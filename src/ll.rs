/* automatically generated by rust-bindgen */

pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed1 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed2 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_long;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulong;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = ::std::os::raw::c_long;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type _uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed4 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutex_t = Union_Unnamed4;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed5 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutexattr_t = Union_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed6 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed6 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed7 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_cond_t = Union_Unnamed6;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_condattr_t = Union_Unnamed8;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed10 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed9 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed10 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_rwlock_t = Union_Unnamed9;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_rwlockattr_t = Union_Unnamed11;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_barrier_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_barrierattr_t = Union_Unnamed13;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
impl ::std::default::Default for Struct_iovec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type socklen_t = __socklen_t;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum___socket_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10,
    SOCK_CLOEXEC = 524288,
    SOCK_NONBLOCK = 2048,
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
impl ::std::default::Default for Struct_sockaddr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::std::os::raw::c_ulong,
    pub __ss_padding: [::std::os::raw::c_char; 112usize],
}
impl ::std::clone::Clone for Struct_sockaddr_storage {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_sockaddr_storage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed14 {
    MSG_OOB = 1,
    MSG_PEEK = 2,
    MSG_DONTROUTE = 4,
    MSG_CTRUNC = 8,
    MSG_PROXY = 16,
    MSG_TRUNC = 32,
    MSG_DONTWAIT = 64,
    MSG_EOR = 128,
    MSG_WAITALL = 256,
    MSG_FIN = 512,
    MSG_SYN = 1024,
    MSG_CONFIRM = 2048,
    MSG_RST = 4096,
    MSG_ERRQUEUE = 8192,
    MSG_NOSIGNAL = 16384,
    MSG_MORE = 32768,
    MSG_WAITFORONE = 65536,
    MSG_FASTOPEN = 536870912,
    MSG_CMSG_CLOEXEC = 1073741824,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut Struct_iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_msghdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: [::std::os::raw::c_uchar; 0usize],
}
impl ::std::default::Default for Struct_cmsghdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed15 {
    SCM_RIGHTS = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_linger {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
impl ::std::default::Default for Struct_osockaddr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed16 {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2,
}
pub type in_addr_t = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::default::Default for Struct_in_addr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_opts {
    pub ip_dst: Struct_in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for Struct_ip_opts {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_ip_opts {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_ip_mreqn {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_address: Struct_in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_ip_mreqn {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: Struct_in_addr,
    pub ipi_addr: Struct_in_addr,
}
impl ::std::default::Default for Struct_in_pktinfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed17 {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_IPIP = 4,
    IPPROTO_TCP = 6,
    IPPROTO_EGP = 8,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_TP = 29,
    IPPROTO_DCCP = 33,
    IPPROTO_IPV6 = 41,
    IPPROTO_RSVP = 46,
    IPPROTO_GRE = 47,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_MTP = 92,
    IPPROTO_BEETPH = 94,
    IPPROTO_ENCAP = 98,
    IPPROTO_PIM = 103,
    IPPROTO_COMP = 108,
    IPPROTO_SCTP = 132,
    IPPROTO_UDPLITE = 136,
    IPPROTO_MPLS = 137,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed18 {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_MH = 135,
}
pub type in_port_t = uint16_t;
pub const IPPORT_BIFFUDP: Enum_Unnamed19 = Enum_Unnamed19::IPPORT_EXECSERVER;
pub const IPPORT_WHOSERVER: Enum_Unnamed19 = Enum_Unnamed19::IPPORT_LOGINSERVER;
pub const IPPORT_ROUTESERVER: Enum_Unnamed19 = Enum_Unnamed19::IPPORT_EFSSERVER;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed19 {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,
    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,
    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,
    IPPORT_RESERVED = 1024,
    IPPORT_USERRESERVED = 5000,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_in6_addr {
    pub __in6_u: Union_Unnamed20,
}
impl ::std::default::Default for Struct_in6_addr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed20 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [uint8_t; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [uint16_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [uint32_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: Struct_in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
impl ::std::default::Default for Struct_sockaddr_in {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: uint32_t,
    pub sin6_addr: Struct_in6_addr,
    pub sin6_scope_id: uint32_t,
}
impl ::std::default::Default for Struct_sockaddr_in6 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_ip_mreq {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
impl ::std::default::Default for Struct_ip_mreq {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_ip_mreq_source {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
    pub imr_sourceaddr: Struct_in_addr,
}
impl ::std::default::Default for Struct_ip_mreq_source {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_ipv6_mreq {
    pub ipv6mr_multiaddr: Struct_in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_ipv6_mreq {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_req {
    pub gr_interface: uint32_t,
    pub gr_group: Struct_sockaddr_storage,
}
impl ::std::clone::Clone for Struct_group_req {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_group_req {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: Struct_sockaddr_storage,
    pub gsr_source: Struct_sockaddr_storage,
}
impl ::std::clone::Clone for Struct_group_source_req {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_group_source_req {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_ip_msfilter {
    pub imsf_multiaddr: Struct_in_addr,
    pub imsf_interface: Struct_in_addr,
    pub imsf_fmode: uint32_t,
    pub imsf_numsrc: uint32_t,
    pub imsf_slist: [Struct_in_addr; 1usize],
}
impl ::std::default::Default for Struct_ip_msfilter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_filter {
    pub gf_interface: uint32_t,
    pub gf_group: Struct_sockaddr_storage,
    pub gf_fmode: uint32_t,
    pub gf_numsrc: uint32_t,
    pub gf_slist: [Struct_sockaddr_storage; 1usize],
}
impl ::std::clone::Clone for Struct_group_filter {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_group_filter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_rpcent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: uint32_t,
}
impl ::std::default::Default for Struct_netent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_hostent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_servent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_protoent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut Struct_sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut Struct_addrinfo,
}
impl ::std::default::Default for Struct_addrinfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_un {
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 108usize],
}
impl ::std::clone::Clone for Struct_sockaddr_un {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_sockaddr_un {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct___locale_data {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type tcp_seq = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_tcphdr {
    pub _bindgen_data_1_: [u32; 5usize],
}
impl Struct_tcphdr {
    pub unsafe fn th_sport(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn th_dport(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(2))
    }
    pub unsafe fn th_seq(&mut self) -> *mut tcp_seq {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4))
    }
    pub unsafe fn th_ack(&mut self) -> *mut tcp_seq {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn th_flags(&mut self) -> *mut u_int8_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(14))
    }
    pub unsafe fn th_win(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(15))
    }
    pub unsafe fn th_sum(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(17))
    }
    pub unsafe fn th_urp(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(19))
    }
    pub unsafe fn source(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn dest(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(2))
    }
    pub unsafe fn seq(&mut self) -> *mut u_int32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4))
    }
    pub unsafe fn ack_seq(&mut self) -> *mut u_int32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn window(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(30))
    }
    pub unsafe fn check(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(32))
    }
    pub unsafe fn urg_ptr(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(34))
    }
}
impl ::std::default::Default for Struct_tcphdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed21 {
    TCP_ESTABLISHED = 1,
    TCP_SYN_SENT = 2,
    TCP_SYN_RECV = 3,
    TCP_FIN_WAIT1 = 4,
    TCP_FIN_WAIT2 = 5,
    TCP_TIME_WAIT = 6,
    TCP_CLOSE = 7,
    TCP_CLOSE_WAIT = 8,
    TCP_LAST_ACK = 9,
    TCP_LISTEN = 10,
    TCP_CLOSING = 11,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_tcp_ca_state {
    TCP_CA_Open = 0,
    TCP_CA_Disorder = 1,
    TCP_CA_CWR = 2,
    TCP_CA_Recovery = 3,
    TCP_CA_Loss = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_tcp_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_ca_state: u_int8_t,
    pub tcpi_retransmits: u_int8_t,
    pub tcpi_probes: u_int8_t,
    pub tcpi_backoff: u_int8_t,
    pub tcpi_options: u_int8_t,
    pub _bindgen_bitfield_1_: u_int8_t,
    pub _bindgen_bitfield_2_: u_int8_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_ato: u_int32_t,
    pub tcpi_snd_mss: u_int32_t,
    pub tcpi_rcv_mss: u_int32_t,
    pub tcpi_unacked: u_int32_t,
    pub tcpi_sacked: u_int32_t,
    pub tcpi_lost: u_int32_t,
    pub tcpi_retrans: u_int32_t,
    pub tcpi_fackets: u_int32_t,
    pub tcpi_last_data_sent: u_int32_t,
    pub tcpi_last_ack_sent: u_int32_t,
    pub tcpi_last_data_recv: u_int32_t,
    pub tcpi_last_ack_recv: u_int32_t,
    pub tcpi_pmtu: u_int32_t,
    pub tcpi_rcv_ssthresh: u_int32_t,
    pub tcpi_rtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_advmss: u_int32_t,
    pub tcpi_reordering: u_int32_t,
    pub tcpi_rcv_rtt: u_int32_t,
    pub tcpi_rcv_space: u_int32_t,
    pub tcpi_total_retrans: u_int32_t,
}
impl ::std::default::Default for Struct_tcp_info {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcp_md5sig {
    pub tcpm_addr: Struct_sockaddr_storage,
    pub __tcpm_pad1: u_int16_t,
    pub tcpm_keylen: u_int16_t,
    pub __tcpm_pad2: u_int32_t,
    pub tcpm_key: [u_int8_t; 80usize],
}
impl ::std::clone::Clone for Struct_tcp_md5sig {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_tcp_md5sig {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_tcp_repair_opt {
    pub opt_code: u_int32_t,
    pub opt_val: u_int32_t,
}
impl ::std::default::Default for Struct_tcp_repair_opt {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed22 {
    TCP_NO_QUEUE = 0,
    TCP_RECV_QUEUE = 1,
    TCP_SEND_QUEUE = 2,
    TCP_QUEUES_NR = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcp_cookie_transactions {
    pub tcpct_flags: u_int16_t,
    pub __tcpct_pad1: u_int8_t,
    pub tcpct_cookie_desired: u_int8_t,
    pub tcpct_s_data_desired: u_int16_t,
    pub tcpct_used: u_int16_t,
    pub tcpct_value: [u_int8_t; 536usize],
}
impl ::std::clone::Clone for Struct_tcp_cookie_transactions {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_tcp_cookie_transactions {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_passwd {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for Struct_winsize {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
impl ::std::default::Default for Struct_termio {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sigval_t = Union_sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed23 {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: Union_Unnamed24,
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed24 {
    pub _bindgen_data_: [u64; 14usize],
}
impl Union_Unnamed24 {
    pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 28usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed25 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed26 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed27 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed28 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed29 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed31 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed24 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed25 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed26 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed27 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed28 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed29 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: Struct_Unnamed30,
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed30 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed31 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed32 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type siginfo_t = Struct_Unnamed23;
#[derive(Copy, Clone)]
#[repr(i32)]
pub enum Enum_Unnamed33 {
    SI_ASYNCNL = -60,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed34 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed35 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed36 {
    SEGV_MAPERR = 1,
    SEGV_ACCERR = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed37 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed38 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed39 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: Union_Unnamed40,
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed40 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed40 {
    pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 12usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _tid(&mut self) -> *mut __pid_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed41 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed40 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed41 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
impl ::std::default::Default for Struct_Unnamed41 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sigevent_t = Struct_sigevent;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed42 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t = ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigaction {
    pub __sigaction_handler: Union_Unnamed43,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<extern "C" fn()>,
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed43 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed43 {
    pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sa_sigaction(
        &mut self,
    ) -> *mut ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    > {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed43 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
impl ::std::default::Default for Struct__fpx_sw_bytes {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for Struct__fpreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
impl ::std::default::Default for Struct__fpxreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::default::Default for Struct__xmmreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__fpxreg; 8usize],
    pub _xmm: [Struct__xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::default::Default for Struct__fpstate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub _bindgen_data_1_: [u64; 1usize],
    pub __reserved1: [__uint64_t; 8usize],
}
impl Struct_sigcontext {
    pub unsafe fn fpstate(&mut self) -> *mut *mut Struct__fpstate {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __fpstate_word(&mut self) -> *mut __uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Struct_sigcontext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
impl ::std::default::Default for Struct__xsave_hdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
impl ::std::clone::Clone for Struct__ymmh_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__ymmh_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xstate {
    pub fpstate: Struct__fpstate,
    pub xstate_hdr: Struct__xsave_hdr,
    pub ymmh: Struct__ymmh_state,
}
impl ::std::clone::Clone for Struct__xstate {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__xstate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed44 {
    SS_ONSTACK = 1,
    SS_DISABLE = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: size_t,
}
impl ::std::default::Default for Struct_sigaltstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type stack_t = Struct_sigaltstack;
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
impl ::std::default::Default for Struct__libc_fpxreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::default::Default for Struct__libc_xmmreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__libc_fpxreg; 8usize],
    pub _xmm: [Struct__libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::default::Default for Struct__libc_fpstate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fpregset_t = *mut Struct__libc_fpstate;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed45 {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
impl ::std::default::Default for Struct_Unnamed45 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type mcontext_t = Struct_Unnamed45;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut Struct_ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: Struct__libc_fpstate,
}
impl ::std::default::Default for Struct_ucontext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ucontext_t = Struct_ucontext;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed46 {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2,
}
pub type idtype_t = Enum_Unnamed46;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed47 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed47 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed47 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __WAIT_STATUS = Union_Unnamed47;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed48 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed49 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed48 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed49 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed49 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_rusage {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: __gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_group {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed50 {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed51,
}
impl ::std::default::Default for Struct_Unnamed50 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed51 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed51 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed51 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __mbstate_t = Struct_Unnamed50;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed52 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed52 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _G_fpos_t = Struct_Unnamed52;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed53 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed53 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _G_fpos64_t = Struct_Unnamed53;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t {}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum___codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus {}
pub type __io_read_fn = unsafe extern "C" fn(
    __cookie: *mut ::std::os::raw::c_void,
    __buf: *mut ::std::os::raw::c_char,
    __nbytes: size_t,
) -> __ssize_t;
pub type __io_write_fn = unsafe extern "C" fn(
    __cookie: *mut ::std::os::raw::c_void,
    __buf: *const ::std::os::raw::c_char,
    __n: size_t,
) -> __ssize_t;
pub type __io_seek_fn = unsafe extern "C" fn(
    __cookie: *mut ::std::os::raw::c_void,
    __pos: *mut __off64_t,
    __w: ::std::os::raw::c_int,
) -> ::std::os::raw::c_int;
pub type __io_close_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
pub type fpos_t = _G_fpos_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed54 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_Unnamed54 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type div_t = Struct_Unnamed54;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed55 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for Struct_Unnamed55 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ldiv_t = Struct_Unnamed55;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed56 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for Struct_Unnamed56 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type lldiv_t = Struct_Unnamed56;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type useconds_t = __useconds_t;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed57 {
    _PC_LINK_MAX = 0,
    _PC_MAX_CANON = 1,
    _PC_MAX_INPUT = 2,
    _PC_NAME_MAX = 3,
    _PC_PATH_MAX = 4,
    _PC_PIPE_BUF = 5,
    _PC_CHOWN_RESTRICTED = 6,
    _PC_NO_TRUNC = 7,
    _PC_VDISABLE = 8,
    _PC_SYNC_IO = 9,
    _PC_ASYNC_IO = 10,
    _PC_PRIO_IO = 11,
    _PC_SOCK_MAXBUF = 12,
    _PC_FILESIZEBITS = 13,
    _PC_REC_INCR_XFER_SIZE = 14,
    _PC_REC_MAX_XFER_SIZE = 15,
    _PC_REC_MIN_XFER_SIZE = 16,
    _PC_REC_XFER_ALIGN = 17,
    _PC_ALLOC_SIZE_MIN = 18,
    _PC_SYMLINK_MAX = 19,
    _PC_2_SYMLINKS = 20,
}
pub const _SC_IOV_MAX: Enum_Unnamed58 = Enum_Unnamed58::_SC_UIO_MAXIOV;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed58 {
    _SC_ARG_MAX = 0,
    _SC_CHILD_MAX = 1,
    _SC_CLK_TCK = 2,
    _SC_NGROUPS_MAX = 3,
    _SC_OPEN_MAX = 4,
    _SC_STREAM_MAX = 5,
    _SC_TZNAME_MAX = 6,
    _SC_JOB_CONTROL = 7,
    _SC_SAVED_IDS = 8,
    _SC_REALTIME_SIGNALS = 9,
    _SC_PRIORITY_SCHEDULING = 10,
    _SC_TIMERS = 11,
    _SC_ASYNCHRONOUS_IO = 12,
    _SC_PRIORITIZED_IO = 13,
    _SC_SYNCHRONIZED_IO = 14,
    _SC_FSYNC = 15,
    _SC_MAPPED_FILES = 16,
    _SC_MEMLOCK = 17,
    _SC_MEMLOCK_RANGE = 18,
    _SC_MEMORY_PROTECTION = 19,
    _SC_MESSAGE_PASSING = 20,
    _SC_SEMAPHORES = 21,
    _SC_SHARED_MEMORY_OBJECTS = 22,
    _SC_AIO_LISTIO_MAX = 23,
    _SC_AIO_MAX = 24,
    _SC_AIO_PRIO_DELTA_MAX = 25,
    _SC_DELAYTIMER_MAX = 26,
    _SC_MQ_OPEN_MAX = 27,
    _SC_MQ_PRIO_MAX = 28,
    _SC_VERSION = 29,
    _SC_PAGESIZE = 30,
    _SC_RTSIG_MAX = 31,
    _SC_SEM_NSEMS_MAX = 32,
    _SC_SEM_VALUE_MAX = 33,
    _SC_SIGQUEUE_MAX = 34,
    _SC_TIMER_MAX = 35,
    _SC_BC_BASE_MAX = 36,
    _SC_BC_DIM_MAX = 37,
    _SC_BC_SCALE_MAX = 38,
    _SC_BC_STRING_MAX = 39,
    _SC_COLL_WEIGHTS_MAX = 40,
    _SC_EQUIV_CLASS_MAX = 41,
    _SC_EXPR_NEST_MAX = 42,
    _SC_LINE_MAX = 43,
    _SC_RE_DUP_MAX = 44,
    _SC_CHARCLASS_NAME_MAX = 45,
    _SC_2_VERSION = 46,
    _SC_2_C_BIND = 47,
    _SC_2_C_DEV = 48,
    _SC_2_FORT_DEV = 49,
    _SC_2_FORT_RUN = 50,
    _SC_2_SW_DEV = 51,
    _SC_2_LOCALEDEF = 52,
    _SC_PII = 53,
    _SC_PII_XTI = 54,
    _SC_PII_SOCKET = 55,
    _SC_PII_INTERNET = 56,
    _SC_PII_OSI = 57,
    _SC_POLL = 58,
    _SC_SELECT = 59,
    _SC_UIO_MAXIOV = 60,
    _SC_PII_INTERNET_STREAM = 61,
    _SC_PII_INTERNET_DGRAM = 62,
    _SC_PII_OSI_COTS = 63,
    _SC_PII_OSI_CLTS = 64,
    _SC_PII_OSI_M = 65,
    _SC_T_IOV_MAX = 66,
    _SC_THREADS = 67,
    _SC_THREAD_SAFE_FUNCTIONS = 68,
    _SC_GETGR_R_SIZE_MAX = 69,
    _SC_GETPW_R_SIZE_MAX = 70,
    _SC_LOGIN_NAME_MAX = 71,
    _SC_TTY_NAME_MAX = 72,
    _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
    _SC_THREAD_KEYS_MAX = 74,
    _SC_THREAD_STACK_MIN = 75,
    _SC_THREAD_THREADS_MAX = 76,
    _SC_THREAD_ATTR_STACKADDR = 77,
    _SC_THREAD_ATTR_STACKSIZE = 78,
    _SC_THREAD_PRIORITY_SCHEDULING = 79,
    _SC_THREAD_PRIO_INHERIT = 80,
    _SC_THREAD_PRIO_PROTECT = 81,
    _SC_THREAD_PROCESS_SHARED = 82,
    _SC_NPROCESSORS_CONF = 83,
    _SC_NPROCESSORS_ONLN = 84,
    _SC_PHYS_PAGES = 85,
    _SC_AVPHYS_PAGES = 86,
    _SC_ATEXIT_MAX = 87,
    _SC_PASS_MAX = 88,
    _SC_XOPEN_VERSION = 89,
    _SC_XOPEN_XCU_VERSION = 90,
    _SC_XOPEN_UNIX = 91,
    _SC_XOPEN_CRYPT = 92,
    _SC_XOPEN_ENH_I18N = 93,
    _SC_XOPEN_SHM = 94,
    _SC_2_CHAR_TERM = 95,
    _SC_2_C_VERSION = 96,
    _SC_2_UPE = 97,
    _SC_XOPEN_XPG2 = 98,
    _SC_XOPEN_XPG3 = 99,
    _SC_XOPEN_XPG4 = 100,
    _SC_CHAR_BIT = 101,
    _SC_CHAR_MAX = 102,
    _SC_CHAR_MIN = 103,
    _SC_INT_MAX = 104,
    _SC_INT_MIN = 105,
    _SC_LONG_BIT = 106,
    _SC_WORD_BIT = 107,
    _SC_MB_LEN_MAX = 108,
    _SC_NZERO = 109,
    _SC_SSIZE_MAX = 110,
    _SC_SCHAR_MAX = 111,
    _SC_SCHAR_MIN = 112,
    _SC_SHRT_MAX = 113,
    _SC_SHRT_MIN = 114,
    _SC_UCHAR_MAX = 115,
    _SC_UINT_MAX = 116,
    _SC_ULONG_MAX = 117,
    _SC_USHRT_MAX = 118,
    _SC_NL_ARGMAX = 119,
    _SC_NL_LANGMAX = 120,
    _SC_NL_MSGMAX = 121,
    _SC_NL_NMAX = 122,
    _SC_NL_SETMAX = 123,
    _SC_NL_TEXTMAX = 124,
    _SC_XBS5_ILP32_OFF32 = 125,
    _SC_XBS5_ILP32_OFFBIG = 126,
    _SC_XBS5_LP64_OFF64 = 127,
    _SC_XBS5_LPBIG_OFFBIG = 128,
    _SC_XOPEN_LEGACY = 129,
    _SC_XOPEN_REALTIME = 130,
    _SC_XOPEN_REALTIME_THREADS = 131,
    _SC_ADVISORY_INFO = 132,
    _SC_BARRIERS = 133,
    _SC_BASE = 134,
    _SC_C_LANG_SUPPORT = 135,
    _SC_C_LANG_SUPPORT_R = 136,
    _SC_CLOCK_SELECTION = 137,
    _SC_CPUTIME = 138,
    _SC_THREAD_CPUTIME = 139,
    _SC_DEVICE_IO = 140,
    _SC_DEVICE_SPECIFIC = 141,
    _SC_DEVICE_SPECIFIC_R = 142,
    _SC_FD_MGMT = 143,
    _SC_FIFO = 144,
    _SC_PIPE = 145,
    _SC_FILE_ATTRIBUTES = 146,
    _SC_FILE_LOCKING = 147,
    _SC_FILE_SYSTEM = 148,
    _SC_MONOTONIC_CLOCK = 149,
    _SC_MULTI_PROCESS = 150,
    _SC_SINGLE_PROCESS = 151,
    _SC_NETWORKING = 152,
    _SC_READER_WRITER_LOCKS = 153,
    _SC_SPIN_LOCKS = 154,
    _SC_REGEXP = 155,
    _SC_REGEX_VERSION = 156,
    _SC_SHELL = 157,
    _SC_SIGNALS = 158,
    _SC_SPAWN = 159,
    _SC_SPORADIC_SERVER = 160,
    _SC_THREAD_SPORADIC_SERVER = 161,
    _SC_SYSTEM_DATABASE = 162,
    _SC_SYSTEM_DATABASE_R = 163,
    _SC_TIMEOUTS = 164,
    _SC_TYPED_MEMORY_OBJECTS = 165,
    _SC_USER_GROUPS = 166,
    _SC_USER_GROUPS_R = 167,
    _SC_2_PBS = 168,
    _SC_2_PBS_ACCOUNTING = 169,
    _SC_2_PBS_LOCATE = 170,
    _SC_2_PBS_MESSAGE = 171,
    _SC_2_PBS_TRACK = 172,
    _SC_SYMLOOP_MAX = 173,
    _SC_STREAMS = 174,
    _SC_2_PBS_CHECKPOINT = 175,
    _SC_V6_ILP32_OFF32 = 176,
    _SC_V6_ILP32_OFFBIG = 177,
    _SC_V6_LP64_OFF64 = 178,
    _SC_V6_LPBIG_OFFBIG = 179,
    _SC_HOST_NAME_MAX = 180,
    _SC_TRACE = 181,
    _SC_TRACE_EVENT_FILTER = 182,
    _SC_TRACE_INHERIT = 183,
    _SC_TRACE_LOG = 184,
    _SC_LEVEL1_ICACHE_SIZE = 185,
    _SC_LEVEL1_ICACHE_ASSOC = 186,
    _SC_LEVEL1_ICACHE_LINESIZE = 187,
    _SC_LEVEL1_DCACHE_SIZE = 188,
    _SC_LEVEL1_DCACHE_ASSOC = 189,
    _SC_LEVEL1_DCACHE_LINESIZE = 190,
    _SC_LEVEL2_CACHE_SIZE = 191,
    _SC_LEVEL2_CACHE_ASSOC = 192,
    _SC_LEVEL2_CACHE_LINESIZE = 193,
    _SC_LEVEL3_CACHE_SIZE = 194,
    _SC_LEVEL3_CACHE_ASSOC = 195,
    _SC_LEVEL3_CACHE_LINESIZE = 196,
    _SC_LEVEL4_CACHE_SIZE = 197,
    _SC_LEVEL4_CACHE_ASSOC = 198,
    _SC_LEVEL4_CACHE_LINESIZE = 199,
    _SC_IPV6 = 235,
    _SC_RAW_SOCKETS = 236,
    _SC_V7_ILP32_OFF32 = 237,
    _SC_V7_ILP32_OFFBIG = 238,
    _SC_V7_LP64_OFF64 = 239,
    _SC_V7_LPBIG_OFFBIG = 240,
    _SC_SS_REPL_MAX = 241,
    _SC_TRACE_EVENT_NAME_MAX = 242,
    _SC_TRACE_NAME_MAX = 243,
    _SC_TRACE_SYS_MAX = 244,
    _SC_TRACE_USER_EVENT_MAX = 245,
    _SC_XOPEN_STREAMS = 246,
    _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
    _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed59 {
    _CS_PATH = 0,
    _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
    _CS_GNU_LIBC_VERSION = 2,
    _CS_GNU_LIBPTHREAD_VERSION = 3,
    _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
    _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS = 1001,
    _CS_LFS_LIBS = 1002,
    _CS_LFS_LINTFLAGS = 1003,
    _CS_LFS64_CFLAGS = 1004,
    _CS_LFS64_LDFLAGS = 1005,
    _CS_LFS64_LIBS = 1006,
    _CS_LFS64_LINTFLAGS = 1007,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
    _CS_XBS5_ILP32_OFF32_LIBS = 1102,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
    _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
    _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
    _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
    _CS_XBS5_LP64_OFF64_LIBS = 1110,
    _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
    _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
    _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
    _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
    _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
    _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
    _CS_V6_ENV = 1148,
    _CS_V7_ENV = 1149,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: Struct_timespec,
    pub st_mtim: Struct_timespec,
    pub st_ctim: Struct_timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
impl ::std::default::Default for Struct_stat {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
impl ::std::clone::Clone for Struct_dirent {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_dirent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed60 {
    DT_UNKNOWN = 0,
    DT_FIFO = 1,
    DT_CHR = 2,
    DT_DIR = 4,
    DT_BLK = 6,
    DT_REG = 8,
    DT_LNK = 10,
    DT_SOCK = 12,
    DT_WHT = 14,
}
pub enum Struct___dirstream {}
pub type DIR = Struct___dirstream;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
impl ::std::default::Default for Struct_flock {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type float_t = ::std::os::raw::c_float;
pub type double_t = ::std::os::raw::c_double;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed61 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
#[derive(Copy, Clone)]
#[repr(i32)]
pub enum Enum_Unnamed62 {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
pub type _LIB_VERSION_TYPE = Enum_Unnamed62;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_exception {
    pub _type: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: ::std::os::raw::c_double,
    pub arg2: ::std::os::raw::c_double,
    pub retval: ::std::os::raw::c_double,
}
impl ::std::default::Default for Struct_exception {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed63 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}
pub type ptrdiff_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed64 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::default::Default for Struct_Unnamed64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type max_align_t = Struct_Unnamed64;
pub enum Struct_qelem {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_PLIBC_SEARCH_QELEM {
    pub q_forw: *mut Struct_qelem,
    pub q_back: *mut Struct_qelem,
    pub q_data: [::std::os::raw::c_char; 1usize],
}
impl ::std::default::Default for Struct_PLIBC_SEARCH_QELEM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PLIBC_SEARCH__compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _win_comparison_fn_t = PLIBC_SEARCH__compar_fn_t;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed65 {
    PLIBC_SEARCH_FIND = 0,
    PLIBC_SEARCH_ENTER = 1,
}
pub type PLIBC_SEARCH_ACTION = Enum_Unnamed65;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_PLIBC_SEARCH_entry {
    pub key: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_PLIBC_SEARCH_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PLIBC_SEARCH_ENTRY = Struct_PLIBC_SEARCH_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__PLIBC_SEARCH_ENTRY {
    pub used: ::std::os::raw::c_uint,
    pub entry: PLIBC_SEARCH_ENTRY,
}
impl ::std::default::Default for Struct__PLIBC_SEARCH_ENTRY {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _PLIBC_SEARCH_ENTRY = Struct__PLIBC_SEARCH_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_PLIBC_SEARCH_hsearch_data {
    pub table: *mut Struct__PLIBC_SEARCH_ENTRY,
    pub size: ::std::os::raw::c_uint,
    pub filled: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_PLIBC_SEARCH_hsearch_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed66 {
    PLIBC_SEARCH_preorder = 0,
    PLIBC_SEARCH_postorder = 1,
    PLIBC_SEARCH_endorder = 2,
    PLIBC_SEARCH_leaf = 3,
}
pub type PLIBC_SEARCH_VISIT = Enum_Unnamed66;
pub type PLIBC_SEARCH__action_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        __nodep: *const ::std::os::raw::c_void,
        __value: PLIBC_SEARCH_VISIT,
        __level: ::std::os::raw::c_int,
    ),
>;
pub type PLIBC_SEARCH__free_fn_t =
    ::std::option::Option<unsafe extern "C" fn(__nodep: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_lconv {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_MessageHeader {
    pub size: uint16_t,
    pub _type: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_MessageHeader {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_FileNameCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[derive(Copy, Clone)]
#[repr(i32)]
pub enum Enum_GNUNET_ErrorType {
    GNUNET_ERROR_TYPE_UNSPECIFIED = -1,
    GNUNET_ERROR_TYPE_NONE = 0,
    GNUNET_ERROR_TYPE_ERROR = 1,
    GNUNET_ERROR_TYPE_WARNING = 2,
    GNUNET_ERROR_TYPE_INFO = 4,
    GNUNET_ERROR_TYPE_DEBUG = 8,
    GNUNET_ERROR_TYPE_INVALID = 16,
    GNUNET_ERROR_TYPE_BULK = 32,
}
pub type GNUNET_Logger = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        kind: Enum_GNUNET_ErrorType,
        component: *const ::std::os::raw::c_char,
        date: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
pub type GNUNET_SCHEDULER_TaskIdentifier = ::std::os::raw::c_ulonglong;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_SCHEDULER_Reason {
    GNUNET_SCHEDULER_REASON_STARTUP = 0,
    GNUNET_SCHEDULER_REASON_SHUTDOWN = 1,
    GNUNET_SCHEDULER_REASON_TIMEOUT = 2,
    GNUNET_SCHEDULER_REASON_READ_READY = 4,
    GNUNET_SCHEDULER_REASON_WRITE_READY = 8,
    GNUNET_SCHEDULER_REASON_PREREQ_DONE = 16,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_SCHEDULER_Priority {
    GNUNET_SCHEDULER_PRIORITY_KEEP = 0,
    GNUNET_SCHEDULER_PRIORITY_IDLE = 1,
    GNUNET_SCHEDULER_PRIORITY_BACKGROUND = 2,
    GNUNET_SCHEDULER_PRIORITY_DEFAULT = 3,
    GNUNET_SCHEDULER_PRIORITY_HIGH = 4,
    GNUNET_SCHEDULER_PRIORITY_UI = 5,
    GNUNET_SCHEDULER_PRIORITY_URGENT = 6,
    GNUNET_SCHEDULER_PRIORITY_SHUTDOWN = 7,
    GNUNET_SCHEDULER_PRIORITY_COUNT = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TIME_Absolute {
    pub abs_value_us: uint64_t,
}
impl ::std::default::Default for Struct_GNUNET_TIME_Absolute {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TIME_Relative {
    pub rel_value_us: uint64_t,
}
impl ::std::default::Default for Struct_GNUNET_TIME_Relative {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TIME_RelativeNBO {
    pub rel_value_us__: uint64_t,
}
impl ::std::default::Default for Struct_GNUNET_TIME_RelativeNBO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TIME_AbsoluteNBO {
    pub abs_value_us__: uint64_t,
}
impl ::std::default::Default for Struct_GNUNET_TIME_AbsoluteNBO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_NETWORK_Handle {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_NETWORK_FDSet {
    pub nsds: ::std::os::raw::c_int,
    pub sds: fd_set,
}
impl ::std::default::Default for Struct_GNUNET_NETWORK_FDSet {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_DISK_PipeHandle {}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_FILE_Type {
    GNUNET_DISK_HANLDE_TYPE_FILE = 0,
    GNUNET_DISK_HANLDE_TYPE_PIPE = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DISK_FileHandle {
    pub fd: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_GNUNET_DISK_FileHandle {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_CONFIGURATION_Handle {}
pub type GNUNET_CONFIGURATION_Iterator = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ),
>;
pub type GNUNET_CONFIGURATION_Section_Iterator = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, section: *const ::std::os::raw::c_char),
>;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_DISK_OpenFlags {
    GNUNET_DISK_OPEN_READ = 1,
    GNUNET_DISK_OPEN_WRITE = 2,
    GNUNET_DISK_OPEN_READWRITE = 3,
    GNUNET_DISK_OPEN_FAILIFEXISTS = 4,
    GNUNET_DISK_OPEN_TRUNCATE = 8,
    GNUNET_DISK_OPEN_CREATE = 16,
    GNUNET_DISK_OPEN_APPEND = 32,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_DISK_MapType {
    GNUNET_DISK_MAP_TYPE_READ = 1,
    GNUNET_DISK_MAP_TYPE_WRITE = 2,
    GNUNET_DISK_MAP_TYPE_READWRITE = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_DISK_AccessPermissions {
    GNUNET_DISK_PERM_NONE = 0,
    GNUNET_DISK_PERM_USER_READ = 1,
    GNUNET_DISK_PERM_USER_WRITE = 2,
    GNUNET_DISK_PERM_USER_EXEC = 4,
    GNUNET_DISK_PERM_GROUP_READ = 8,
    GNUNET_DISK_PERM_GROUP_WRITE = 16,
    GNUNET_DISK_PERM_GROUP_EXEC = 32,
    GNUNET_DISK_PERM_OTHER_READ = 64,
    GNUNET_DISK_PERM_OTHER_WRITE = 128,
    GNUNET_DISK_PERM_OTHER_EXEC = 256,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_DISK_Seek {
    GNUNET_DISK_SEEK_SET = 0,
    GNUNET_DISK_SEEK_CUR = 1,
    GNUNET_DISK_SEEK_END = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_DISK_PipeEnd {
    GNUNET_DISK_PIPE_END_READ = 0,
    GNUNET_DISK_PIPE_END_WRITE = 1,
}
pub enum Struct_GNUNET_DISK_DirectoryIterator {}
pub type GNUNET_DISK_DirectoryIteratorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        di: *mut Struct_GNUNET_DISK_DirectoryIterator,
        filename: *const ::std::os::raw::c_char,
        dirname: *const ::std::os::raw::c_char,
    ),
>;
pub enum Struct_GNUNET_DISK_MapHandle {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_SCHEDULER_TaskContext {
    pub reason: Enum_GNUNET_SCHEDULER_Reason,
    pub read_ready: *const Struct_GNUNET_NETWORK_FDSet,
    pub write_ready: *const Struct_GNUNET_NETWORK_FDSet,
}
impl ::std::default::Default for Struct_GNUNET_SCHEDULER_TaskContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_SCHEDULER_Task = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        tc: *const Struct_GNUNET_SCHEDULER_TaskContext,
    ),
>;
pub type GNUNET_SCHEDULER_select = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        rfds: *mut Struct_GNUNET_NETWORK_FDSet,
        wfds: *mut Struct_GNUNET_NETWORK_FDSet,
        efds: *mut Struct_GNUNET_NETWORK_FDSet,
        timeout: Struct_GNUNET_TIME_Relative,
    ) -> ::std::os::raw::c_int,
>;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed67 {
    GPG_ERR_SOURCE_UNKNOWN = 0,
    GPG_ERR_SOURCE_GCRYPT = 1,
    GPG_ERR_SOURCE_GPG = 2,
    GPG_ERR_SOURCE_GPGSM = 3,
    GPG_ERR_SOURCE_GPGAGENT = 4,
    GPG_ERR_SOURCE_PINENTRY = 5,
    GPG_ERR_SOURCE_SCD = 6,
    GPG_ERR_SOURCE_GPGME = 7,
    GPG_ERR_SOURCE_KEYBOX = 8,
    GPG_ERR_SOURCE_KSBA = 9,
    GPG_ERR_SOURCE_DIRMNGR = 10,
    GPG_ERR_SOURCE_GSTI = 11,
    GPG_ERR_SOURCE_GPA = 12,
    GPG_ERR_SOURCE_KLEO = 13,
    GPG_ERR_SOURCE_G13 = 14,
    GPG_ERR_SOURCE_ASSUAN = 15,
    GPG_ERR_SOURCE_TLS = 17,
    GPG_ERR_SOURCE_ANY = 31,
    GPG_ERR_SOURCE_USER_1 = 32,
    GPG_ERR_SOURCE_USER_2 = 33,
    GPG_ERR_SOURCE_USER_3 = 34,
    GPG_ERR_SOURCE_USER_4 = 35,
    GPG_ERR_SOURCE_DIM = 128,
}
pub type gpg_err_source_t = Enum_Unnamed67;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed68 {
    GPG_ERR_NO_ERROR = 0,
    GPG_ERR_GENERAL = 1,
    GPG_ERR_UNKNOWN_PACKET = 2,
    GPG_ERR_UNKNOWN_VERSION = 3,
    GPG_ERR_PUBKEY_ALGO = 4,
    GPG_ERR_DIGEST_ALGO = 5,
    GPG_ERR_BAD_PUBKEY = 6,
    GPG_ERR_BAD_SECKEY = 7,
    GPG_ERR_BAD_SIGNATURE = 8,
    GPG_ERR_NO_PUBKEY = 9,
    GPG_ERR_CHECKSUM = 10,
    GPG_ERR_BAD_PASSPHRASE = 11,
    GPG_ERR_CIPHER_ALGO = 12,
    GPG_ERR_KEYRING_OPEN = 13,
    GPG_ERR_INV_PACKET = 14,
    GPG_ERR_INV_ARMOR = 15,
    GPG_ERR_NO_USER_ID = 16,
    GPG_ERR_NO_SECKEY = 17,
    GPG_ERR_WRONG_SECKEY = 18,
    GPG_ERR_BAD_KEY = 19,
    GPG_ERR_COMPR_ALGO = 20,
    GPG_ERR_NO_PRIME = 21,
    GPG_ERR_NO_ENCODING_METHOD = 22,
    GPG_ERR_NO_ENCRYPTION_SCHEME = 23,
    GPG_ERR_NO_SIGNATURE_SCHEME = 24,
    GPG_ERR_INV_ATTR = 25,
    GPG_ERR_NO_VALUE = 26,
    GPG_ERR_NOT_FOUND = 27,
    GPG_ERR_VALUE_NOT_FOUND = 28,
    GPG_ERR_SYNTAX = 29,
    GPG_ERR_BAD_MPI = 30,
    GPG_ERR_INV_PASSPHRASE = 31,
    GPG_ERR_SIG_CLASS = 32,
    GPG_ERR_RESOURCE_LIMIT = 33,
    GPG_ERR_INV_KEYRING = 34,
    GPG_ERR_TRUSTDB = 35,
    GPG_ERR_BAD_CERT = 36,
    GPG_ERR_INV_USER_ID = 37,
    GPG_ERR_UNEXPECTED = 38,
    GPG_ERR_TIME_CONFLICT = 39,
    GPG_ERR_KEYSERVER = 40,
    GPG_ERR_WRONG_PUBKEY_ALGO = 41,
    GPG_ERR_TRIBUTE_TO_D_A = 42,
    GPG_ERR_WEAK_KEY = 43,
    GPG_ERR_INV_KEYLEN = 44,
    GPG_ERR_INV_ARG = 45,
    GPG_ERR_BAD_URI = 46,
    GPG_ERR_INV_URI = 47,
    GPG_ERR_NETWORK = 48,
    GPG_ERR_UNKNOWN_HOST = 49,
    GPG_ERR_SELFTEST_FAILED = 50,
    GPG_ERR_NOT_ENCRYPTED = 51,
    GPG_ERR_NOT_PROCESSED = 52,
    GPG_ERR_UNUSABLE_PUBKEY = 53,
    GPG_ERR_UNUSABLE_SECKEY = 54,
    GPG_ERR_INV_VALUE = 55,
    GPG_ERR_BAD_CERT_CHAIN = 56,
    GPG_ERR_MISSING_CERT = 57,
    GPG_ERR_NO_DATA = 58,
    GPG_ERR_BUG = 59,
    GPG_ERR_NOT_SUPPORTED = 60,
    GPG_ERR_INV_OP = 61,
    GPG_ERR_TIMEOUT = 62,
    GPG_ERR_INTERNAL = 63,
    GPG_ERR_EOF_GCRYPT = 64,
    GPG_ERR_INV_OBJ = 65,
    GPG_ERR_TOO_SHORT = 66,
    GPG_ERR_TOO_LARGE = 67,
    GPG_ERR_NO_OBJ = 68,
    GPG_ERR_NOT_IMPLEMENTED = 69,
    GPG_ERR_CONFLICT = 70,
    GPG_ERR_INV_CIPHER_MODE = 71,
    GPG_ERR_INV_FLAG = 72,
    GPG_ERR_INV_HANDLE = 73,
    GPG_ERR_TRUNCATED = 74,
    GPG_ERR_INCOMPLETE_LINE = 75,
    GPG_ERR_INV_RESPONSE = 76,
    GPG_ERR_NO_AGENT = 77,
    GPG_ERR_AGENT = 78,
    GPG_ERR_INV_DATA = 79,
    GPG_ERR_ASSUAN_SERVER_FAULT = 80,
    GPG_ERR_ASSUAN = 81,
    GPG_ERR_INV_SESSION_KEY = 82,
    GPG_ERR_INV_SEXP = 83,
    GPG_ERR_UNSUPPORTED_ALGORITHM = 84,
    GPG_ERR_NO_PIN_ENTRY = 85,
    GPG_ERR_PIN_ENTRY = 86,
    GPG_ERR_BAD_PIN = 87,
    GPG_ERR_INV_NAME = 88,
    GPG_ERR_BAD_DATA = 89,
    GPG_ERR_INV_PARAMETER = 90,
    GPG_ERR_WRONG_CARD = 91,
    GPG_ERR_NO_DIRMNGR = 92,
    GPG_ERR_DIRMNGR = 93,
    GPG_ERR_CERT_REVOKED = 94,
    GPG_ERR_NO_CRL_KNOWN = 95,
    GPG_ERR_CRL_TOO_OLD = 96,
    GPG_ERR_LINE_TOO_LONG = 97,
    GPG_ERR_NOT_TRUSTED = 98,
    GPG_ERR_CANCELED = 99,
    GPG_ERR_BAD_CA_CERT = 100,
    GPG_ERR_CERT_EXPIRED = 101,
    GPG_ERR_CERT_TOO_YOUNG = 102,
    GPG_ERR_UNSUPPORTED_CERT = 103,
    GPG_ERR_UNKNOWN_SEXP = 104,
    GPG_ERR_UNSUPPORTED_PROTECTION = 105,
    GPG_ERR_CORRUPTED_PROTECTION = 106,
    GPG_ERR_AMBIGUOUS_NAME = 107,
    GPG_ERR_CARD = 108,
    GPG_ERR_CARD_RESET = 109,
    GPG_ERR_CARD_REMOVED = 110,
    GPG_ERR_INV_CARD = 111,
    GPG_ERR_CARD_NOT_PRESENT = 112,
    GPG_ERR_NO_PKCS15_APP = 113,
    GPG_ERR_NOT_CONFIRMED = 114,
    GPG_ERR_CONFIGURATION = 115,
    GPG_ERR_NO_POLICY_MATCH = 116,
    GPG_ERR_INV_INDEX = 117,
    GPG_ERR_INV_ID = 118,
    GPG_ERR_NO_SCDAEMON = 119,
    GPG_ERR_SCDAEMON = 120,
    GPG_ERR_UNSUPPORTED_PROTOCOL = 121,
    GPG_ERR_BAD_PIN_METHOD = 122,
    GPG_ERR_CARD_NOT_INITIALIZED = 123,
    GPG_ERR_UNSUPPORTED_OPERATION = 124,
    GPG_ERR_WRONG_KEY_USAGE = 125,
    GPG_ERR_NOTHING_FOUND = 126,
    GPG_ERR_WRONG_BLOB_TYPE = 127,
    GPG_ERR_MISSING_VALUE = 128,
    GPG_ERR_HARDWARE = 129,
    GPG_ERR_PIN_BLOCKED = 130,
    GPG_ERR_USE_CONDITIONS = 131,
    GPG_ERR_PIN_NOT_SYNCED = 132,
    GPG_ERR_INV_CRL = 133,
    GPG_ERR_BAD_BER = 134,
    GPG_ERR_INV_BER = 135,
    GPG_ERR_ELEMENT_NOT_FOUND = 136,
    GPG_ERR_IDENTIFIER_NOT_FOUND = 137,
    GPG_ERR_INV_TAG = 138,
    GPG_ERR_INV_LENGTH = 139,
    GPG_ERR_INV_KEYINFO = 140,
    GPG_ERR_UNEXPECTED_TAG = 141,
    GPG_ERR_NOT_DER_ENCODED = 142,
    GPG_ERR_NO_CMS_OBJ = 143,
    GPG_ERR_INV_CMS_OBJ = 144,
    GPG_ERR_UNKNOWN_CMS_OBJ = 145,
    GPG_ERR_UNSUPPORTED_CMS_OBJ = 146,
    GPG_ERR_UNSUPPORTED_ENCODING = 147,
    GPG_ERR_UNSUPPORTED_CMS_VERSION = 148,
    GPG_ERR_UNKNOWN_ALGORITHM = 149,
    GPG_ERR_INV_ENGINE = 150,
    GPG_ERR_PUBKEY_NOT_TRUSTED = 151,
    GPG_ERR_DECRYPT_FAILED = 152,
    GPG_ERR_KEY_EXPIRED = 153,
    GPG_ERR_SIG_EXPIRED = 154,
    GPG_ERR_ENCODING_PROBLEM = 155,
    GPG_ERR_INV_STATE = 156,
    GPG_ERR_DUP_VALUE = 157,
    GPG_ERR_MISSING_ACTION = 158,
    GPG_ERR_MODULE_NOT_FOUND = 159,
    GPG_ERR_INV_OID_STRING = 160,
    GPG_ERR_INV_TIME = 161,
    GPG_ERR_INV_CRL_OBJ = 162,
    GPG_ERR_UNSUPPORTED_CRL_VERSION = 163,
    GPG_ERR_INV_CERT_OBJ = 164,
    GPG_ERR_UNKNOWN_NAME = 165,
    GPG_ERR_LOCALE_PROBLEM = 166,
    GPG_ERR_NOT_LOCKED = 167,
    GPG_ERR_PROTOCOL_VIOLATION = 168,
    GPG_ERR_INV_MAC = 169,
    GPG_ERR_INV_REQUEST = 170,
    GPG_ERR_UNKNOWN_EXTN = 171,
    GPG_ERR_UNKNOWN_CRIT_EXTN = 172,
    GPG_ERR_LOCKED = 173,
    GPG_ERR_UNKNOWN_OPTION = 174,
    GPG_ERR_UNKNOWN_COMMAND = 175,
    GPG_ERR_NOT_OPERATIONAL = 176,
    GPG_ERR_NO_PASSPHRASE = 177,
    GPG_ERR_NO_PIN = 178,
    GPG_ERR_NOT_ENABLED = 179,
    GPG_ERR_NO_ENGINE = 180,
    GPG_ERR_MISSING_KEY = 181,
    GPG_ERR_TOO_MANY = 182,
    GPG_ERR_LIMIT_REACHED = 183,
    GPG_ERR_NOT_INITIALIZED = 184,
    GPG_ERR_MISSING_ISSUER_CERT = 185,
    GPG_ERR_NO_KEYSERVER = 186,
    GPG_ERR_INV_CURVE = 187,
    GPG_ERR_UNKNOWN_CURVE = 188,
    GPG_ERR_DUP_KEY = 189,
    GPG_ERR_AMBIGUOUS = 190,
    GPG_ERR_NO_CRYPT_CTX = 191,
    GPG_ERR_WRONG_CRYPT_CTX = 192,
    GPG_ERR_BAD_CRYPT_CTX = 193,
    GPG_ERR_CRYPT_CTX_CONFLICT = 194,
    GPG_ERR_BROKEN_PUBKEY = 195,
    GPG_ERR_BROKEN_SECKEY = 196,
    GPG_ERR_MAC_ALGO = 197,
    GPG_ERR_FULLY_CANCELED = 198,
    GPG_ERR_UNFINISHED = 199,
    GPG_ERR_BUFFER_TOO_SHORT = 200,
    GPG_ERR_SEXP_INV_LEN_SPEC = 201,
    GPG_ERR_SEXP_STRING_TOO_LONG = 202,
    GPG_ERR_SEXP_UNMATCHED_PAREN = 203,
    GPG_ERR_SEXP_NOT_CANONICAL = 204,
    GPG_ERR_SEXP_BAD_CHARACTER = 205,
    GPG_ERR_SEXP_BAD_QUOTATION = 206,
    GPG_ERR_SEXP_ZERO_PREFIX = 207,
    GPG_ERR_SEXP_NESTED_DH = 208,
    GPG_ERR_SEXP_UNMATCHED_DH = 209,
    GPG_ERR_SEXP_UNEXPECTED_PUNC = 210,
    GPG_ERR_SEXP_BAD_HEX_CHAR = 211,
    GPG_ERR_SEXP_ODD_HEX_NUMBERS = 212,
    GPG_ERR_SEXP_BAD_OCT_CHAR = 213,
    GPG_ERR_SERVER_FAILED = 219,
    GPG_ERR_NO_NAME = 220,
    GPG_ERR_NO_KEY = 221,
    GPG_ERR_LEGACY_KEY = 222,
    GPG_ERR_REQUEST_TOO_SHORT = 223,
    GPG_ERR_REQUEST_TOO_LONG = 224,
    GPG_ERR_OBJ_TERM_STATE = 225,
    GPG_ERR_NO_CERT_CHAIN = 226,
    GPG_ERR_CERT_TOO_LARGE = 227,
    GPG_ERR_INV_RECORD = 228,
    GPG_ERR_BAD_MAC = 229,
    GPG_ERR_UNEXPECTED_MSG = 230,
    GPG_ERR_COMPR_FAILED = 231,
    GPG_ERR_WOULD_WRAP = 232,
    GPG_ERR_FATAL_ALERT = 233,
    GPG_ERR_NO_CIPHER = 234,
    GPG_ERR_MISSING_CLIENT_CERT = 235,
    GPG_ERR_CLOSE_NOTIFY = 236,
    GPG_ERR_TICKET_EXPIRED = 237,
    GPG_ERR_BAD_TICKET = 238,
    GPG_ERR_UNKNOWN_IDENTITY = 239,
    GPG_ERR_BAD_HS_CERT = 240,
    GPG_ERR_BAD_HS_CERT_REQ = 241,
    GPG_ERR_BAD_HS_CERT_VER = 242,
    GPG_ERR_BAD_HS_CHANGE_CIPHER = 243,
    GPG_ERR_BAD_HS_CLIENT_HELLO = 244,
    GPG_ERR_BAD_HS_SERVER_HELLO = 245,
    GPG_ERR_BAD_HS_SERVER_HELLO_DONE = 246,
    GPG_ERR_BAD_HS_FINISHED = 247,
    GPG_ERR_BAD_HS_SERVER_KEX = 248,
    GPG_ERR_BAD_HS_CLIENT_KEX = 249,
    GPG_ERR_BOGUS_STRING = 250,
    GPG_ERR_FORBIDDEN = 251,
    GPG_ERR_KEY_DISABLED = 252,
    GPG_ERR_KEY_ON_CARD = 253,
    GPG_ERR_INV_LOCK_OBJ = 254,
    GPG_ERR_TRUE = 255,
    GPG_ERR_FALSE = 256,
    GPG_ERR_ASS_GENERAL = 257,
    GPG_ERR_ASS_ACCEPT_FAILED = 258,
    GPG_ERR_ASS_CONNECT_FAILED = 259,
    GPG_ERR_ASS_INV_RESPONSE = 260,
    GPG_ERR_ASS_INV_VALUE = 261,
    GPG_ERR_ASS_INCOMPLETE_LINE = 262,
    GPG_ERR_ASS_LINE_TOO_LONG = 263,
    GPG_ERR_ASS_NESTED_COMMANDS = 264,
    GPG_ERR_ASS_NO_DATA_CB = 265,
    GPG_ERR_ASS_NO_INQUIRE_CB = 266,
    GPG_ERR_ASS_NOT_A_SERVER = 267,
    GPG_ERR_ASS_NOT_A_CLIENT = 268,
    GPG_ERR_ASS_SERVER_START = 269,
    GPG_ERR_ASS_READ_ERROR = 270,
    GPG_ERR_ASS_WRITE_ERROR = 271,
    GPG_ERR_ASS_TOO_MUCH_DATA = 273,
    GPG_ERR_ASS_UNEXPECTED_CMD = 274,
    GPG_ERR_ASS_UNKNOWN_CMD = 275,
    GPG_ERR_ASS_SYNTAX = 276,
    GPG_ERR_ASS_CANCELED = 277,
    GPG_ERR_ASS_NO_INPUT = 278,
    GPG_ERR_ASS_NO_OUTPUT = 279,
    GPG_ERR_ASS_PARAMETER = 280,
    GPG_ERR_ASS_UNKNOWN_INQUIRE = 281,
    GPG_ERR_LDAP_GENERAL = 721,
    GPG_ERR_LDAP_ATTR_GENERAL = 722,
    GPG_ERR_LDAP_NAME_GENERAL = 723,
    GPG_ERR_LDAP_SECURITY_GENERAL = 724,
    GPG_ERR_LDAP_SERVICE_GENERAL = 725,
    GPG_ERR_LDAP_UPDATE_GENERAL = 726,
    GPG_ERR_LDAP_E_GENERAL = 727,
    GPG_ERR_LDAP_X_GENERAL = 728,
    GPG_ERR_LDAP_OTHER_GENERAL = 729,
    GPG_ERR_LDAP_X_CONNECTING = 750,
    GPG_ERR_LDAP_REFERRAL_LIMIT = 751,
    GPG_ERR_LDAP_CLIENT_LOOP = 752,
    GPG_ERR_LDAP_NO_RESULTS = 754,
    GPG_ERR_LDAP_CONTROL_NOT_FOUND = 755,
    GPG_ERR_LDAP_NOT_SUPPORTED = 756,
    GPG_ERR_LDAP_CONNECT = 757,
    GPG_ERR_LDAP_NO_MEMORY = 758,
    GPG_ERR_LDAP_PARAM = 759,
    GPG_ERR_LDAP_USER_CANCELLED = 760,
    GPG_ERR_LDAP_FILTER = 761,
    GPG_ERR_LDAP_AUTH_UNKNOWN = 762,
    GPG_ERR_LDAP_TIMEOUT = 763,
    GPG_ERR_LDAP_DECODING = 764,
    GPG_ERR_LDAP_ENCODING = 765,
    GPG_ERR_LDAP_LOCAL = 766,
    GPG_ERR_LDAP_SERVER_DOWN = 767,
    GPG_ERR_LDAP_SUCCESS = 768,
    GPG_ERR_LDAP_OPERATIONS = 769,
    GPG_ERR_LDAP_PROTOCOL = 770,
    GPG_ERR_LDAP_TIMELIMIT = 771,
    GPG_ERR_LDAP_SIZELIMIT = 772,
    GPG_ERR_LDAP_COMPARE_FALSE = 773,
    GPG_ERR_LDAP_COMPARE_TRUE = 774,
    GPG_ERR_LDAP_UNSUPPORTED_AUTH = 775,
    GPG_ERR_LDAP_STRONG_AUTH_RQRD = 776,
    GPG_ERR_LDAP_PARTIAL_RESULTS = 777,
    GPG_ERR_LDAP_REFERRAL = 778,
    GPG_ERR_LDAP_ADMINLIMIT = 779,
    GPG_ERR_LDAP_UNAVAIL_CRIT_EXTN = 780,
    GPG_ERR_LDAP_CONFIDENT_RQRD = 781,
    GPG_ERR_LDAP_SASL_BIND_INPROG = 782,
    GPG_ERR_LDAP_NO_SUCH_ATTRIBUTE = 784,
    GPG_ERR_LDAP_UNDEFINED_TYPE = 785,
    GPG_ERR_LDAP_BAD_MATCHING = 786,
    GPG_ERR_LDAP_CONST_VIOLATION = 787,
    GPG_ERR_LDAP_TYPE_VALUE_EXISTS = 788,
    GPG_ERR_LDAP_INV_SYNTAX = 789,
    GPG_ERR_LDAP_NO_SUCH_OBJ = 800,
    GPG_ERR_LDAP_ALIAS_PROBLEM = 801,
    GPG_ERR_LDAP_INV_DN_SYNTAX = 802,
    GPG_ERR_LDAP_IS_LEAF = 803,
    GPG_ERR_LDAP_ALIAS_DEREF = 804,
    GPG_ERR_LDAP_X_PROXY_AUTH_FAIL = 815,
    GPG_ERR_LDAP_BAD_AUTH = 816,
    GPG_ERR_LDAP_INV_CREDENTIALS = 817,
    GPG_ERR_LDAP_INSUFFICIENT_ACC = 818,
    GPG_ERR_LDAP_BUSY = 819,
    GPG_ERR_LDAP_UNAVAILABLE = 820,
    GPG_ERR_LDAP_UNWILL_TO_PERFORM = 821,
    GPG_ERR_LDAP_LOOP_DETECT = 822,
    GPG_ERR_LDAP_NAMING_VIOLATION = 832,
    GPG_ERR_LDAP_OBJ_CLS_VIOLATION = 833,
    GPG_ERR_LDAP_NOT_ALLOW_NONLEAF = 834,
    GPG_ERR_LDAP_NOT_ALLOW_ON_RDN = 835,
    GPG_ERR_LDAP_ALREADY_EXISTS = 836,
    GPG_ERR_LDAP_NO_OBJ_CLASS_MODS = 837,
    GPG_ERR_LDAP_RESULTS_TOO_LARGE = 838,
    GPG_ERR_LDAP_AFFECTS_MULT_DSAS = 839,
    GPG_ERR_LDAP_VLV = 844,
    GPG_ERR_LDAP_OTHER = 848,
    GPG_ERR_LDAP_CUP_RESOURCE_LIMIT = 881,
    GPG_ERR_LDAP_CUP_SEC_VIOLATION = 882,
    GPG_ERR_LDAP_CUP_INV_DATA = 883,
    GPG_ERR_LDAP_CUP_UNSUP_SCHEME = 884,
    GPG_ERR_LDAP_CUP_RELOAD = 885,
    GPG_ERR_LDAP_CANCELLED = 886,
    GPG_ERR_LDAP_NO_SUCH_OPERATION = 887,
    GPG_ERR_LDAP_TOO_LATE = 888,
    GPG_ERR_LDAP_CANNOT_CANCEL = 889,
    GPG_ERR_LDAP_ASSERTION_FAILED = 890,
    GPG_ERR_LDAP_PROX_AUTH_DENIED = 891,
    GPG_ERR_USER_1 = 1024,
    GPG_ERR_USER_2 = 1025,
    GPG_ERR_USER_3 = 1026,
    GPG_ERR_USER_4 = 1027,
    GPG_ERR_USER_5 = 1028,
    GPG_ERR_USER_6 = 1029,
    GPG_ERR_USER_7 = 1030,
    GPG_ERR_USER_8 = 1031,
    GPG_ERR_USER_9 = 1032,
    GPG_ERR_USER_10 = 1033,
    GPG_ERR_USER_11 = 1034,
    GPG_ERR_USER_12 = 1035,
    GPG_ERR_USER_13 = 1036,
    GPG_ERR_USER_14 = 1037,
    GPG_ERR_USER_15 = 1038,
    GPG_ERR_USER_16 = 1039,
    GPG_ERR_MISSING_ERRNO = 16381,
    GPG_ERR_UNKNOWN_ERRNO = 16382,
    GPG_ERR_EOF = 16383,
    GPG_ERR_E2BIG = 32768,
    GPG_ERR_EACCES = 32769,
    GPG_ERR_EADDRINUSE = 32770,
    GPG_ERR_EADDRNOTAVAIL = 32771,
    GPG_ERR_EADV = 32772,
    GPG_ERR_EAFNOSUPPORT = 32773,
    GPG_ERR_EAGAIN = 32774,
    GPG_ERR_EALREADY = 32775,
    GPG_ERR_EAUTH = 32776,
    GPG_ERR_EBACKGROUND = 32777,
    GPG_ERR_EBADE = 32778,
    GPG_ERR_EBADF = 32779,
    GPG_ERR_EBADFD = 32780,
    GPG_ERR_EBADMSG = 32781,
    GPG_ERR_EBADR = 32782,
    GPG_ERR_EBADRPC = 32783,
    GPG_ERR_EBADRQC = 32784,
    GPG_ERR_EBADSLT = 32785,
    GPG_ERR_EBFONT = 32786,
    GPG_ERR_EBUSY = 32787,
    GPG_ERR_ECANCELED = 32788,
    GPG_ERR_ECHILD = 32789,
    GPG_ERR_ECHRNG = 32790,
    GPG_ERR_ECOMM = 32791,
    GPG_ERR_ECONNABORTED = 32792,
    GPG_ERR_ECONNREFUSED = 32793,
    GPG_ERR_ECONNRESET = 32794,
    GPG_ERR_ED = 32795,
    GPG_ERR_EDEADLK = 32796,
    GPG_ERR_EDEADLOCK = 32797,
    GPG_ERR_EDESTADDRREQ = 32798,
    GPG_ERR_EDIED = 32799,
    GPG_ERR_EDOM = 32800,
    GPG_ERR_EDOTDOT = 32801,
    GPG_ERR_EDQUOT = 32802,
    GPG_ERR_EEXIST = 32803,
    GPG_ERR_EFAULT = 32804,
    GPG_ERR_EFBIG = 32805,
    GPG_ERR_EFTYPE = 32806,
    GPG_ERR_EGRATUITOUS = 32807,
    GPG_ERR_EGREGIOUS = 32808,
    GPG_ERR_EHOSTDOWN = 32809,
    GPG_ERR_EHOSTUNREACH = 32810,
    GPG_ERR_EIDRM = 32811,
    GPG_ERR_EIEIO = 32812,
    GPG_ERR_EILSEQ = 32813,
    GPG_ERR_EINPROGRESS = 32814,
    GPG_ERR_EINTR = 32815,
    GPG_ERR_EINVAL = 32816,
    GPG_ERR_EIO = 32817,
    GPG_ERR_EISCONN = 32818,
    GPG_ERR_EISDIR = 32819,
    GPG_ERR_EISNAM = 32820,
    GPG_ERR_EL2HLT = 32821,
    GPG_ERR_EL2NSYNC = 32822,
    GPG_ERR_EL3HLT = 32823,
    GPG_ERR_EL3RST = 32824,
    GPG_ERR_ELIBACC = 32825,
    GPG_ERR_ELIBBAD = 32826,
    GPG_ERR_ELIBEXEC = 32827,
    GPG_ERR_ELIBMAX = 32828,
    GPG_ERR_ELIBSCN = 32829,
    GPG_ERR_ELNRNG = 32830,
    GPG_ERR_ELOOP = 32831,
    GPG_ERR_EMEDIUMTYPE = 32832,
    GPG_ERR_EMFILE = 32833,
    GPG_ERR_EMLINK = 32834,
    GPG_ERR_EMSGSIZE = 32835,
    GPG_ERR_EMULTIHOP = 32836,
    GPG_ERR_ENAMETOOLONG = 32837,
    GPG_ERR_ENAVAIL = 32838,
    GPG_ERR_ENEEDAUTH = 32839,
    GPG_ERR_ENETDOWN = 32840,
    GPG_ERR_ENETRESET = 32841,
    GPG_ERR_ENETUNREACH = 32842,
    GPG_ERR_ENFILE = 32843,
    GPG_ERR_ENOANO = 32844,
    GPG_ERR_ENOBUFS = 32845,
    GPG_ERR_ENOCSI = 32846,
    GPG_ERR_ENODATA = 32847,
    GPG_ERR_ENODEV = 32848,
    GPG_ERR_ENOENT = 32849,
    GPG_ERR_ENOEXEC = 32850,
    GPG_ERR_ENOLCK = 32851,
    GPG_ERR_ENOLINK = 32852,
    GPG_ERR_ENOMEDIUM = 32853,
    GPG_ERR_ENOMEM = 32854,
    GPG_ERR_ENOMSG = 32855,
    GPG_ERR_ENONET = 32856,
    GPG_ERR_ENOPKG = 32857,
    GPG_ERR_ENOPROTOOPT = 32858,
    GPG_ERR_ENOSPC = 32859,
    GPG_ERR_ENOSR = 32860,
    GPG_ERR_ENOSTR = 32861,
    GPG_ERR_ENOSYS = 32862,
    GPG_ERR_ENOTBLK = 32863,
    GPG_ERR_ENOTCONN = 32864,
    GPG_ERR_ENOTDIR = 32865,
    GPG_ERR_ENOTEMPTY = 32866,
    GPG_ERR_ENOTNAM = 32867,
    GPG_ERR_ENOTSOCK = 32868,
    GPG_ERR_ENOTSUP = 32869,
    GPG_ERR_ENOTTY = 32870,
    GPG_ERR_ENOTUNIQ = 32871,
    GPG_ERR_ENXIO = 32872,
    GPG_ERR_EOPNOTSUPP = 32873,
    GPG_ERR_EOVERFLOW = 32874,
    GPG_ERR_EPERM = 32875,
    GPG_ERR_EPFNOSUPPORT = 32876,
    GPG_ERR_EPIPE = 32877,
    GPG_ERR_EPROCLIM = 32878,
    GPG_ERR_EPROCUNAVAIL = 32879,
    GPG_ERR_EPROGMISMATCH = 32880,
    GPG_ERR_EPROGUNAVAIL = 32881,
    GPG_ERR_EPROTO = 32882,
    GPG_ERR_EPROTONOSUPPORT = 32883,
    GPG_ERR_EPROTOTYPE = 32884,
    GPG_ERR_ERANGE = 32885,
    GPG_ERR_EREMCHG = 32886,
    GPG_ERR_EREMOTE = 32887,
    GPG_ERR_EREMOTEIO = 32888,
    GPG_ERR_ERESTART = 32889,
    GPG_ERR_EROFS = 32890,
    GPG_ERR_ERPCMISMATCH = 32891,
    GPG_ERR_ESHUTDOWN = 32892,
    GPG_ERR_ESOCKTNOSUPPORT = 32893,
    GPG_ERR_ESPIPE = 32894,
    GPG_ERR_ESRCH = 32895,
    GPG_ERR_ESRMNT = 32896,
    GPG_ERR_ESTALE = 32897,
    GPG_ERR_ESTRPIPE = 32898,
    GPG_ERR_ETIME = 32899,
    GPG_ERR_ETIMEDOUT = 32900,
    GPG_ERR_ETOOMANYREFS = 32901,
    GPG_ERR_ETXTBSY = 32902,
    GPG_ERR_EUCLEAN = 32903,
    GPG_ERR_EUNATCH = 32904,
    GPG_ERR_EUSERS = 32905,
    GPG_ERR_EWOULDBLOCK = 32906,
    GPG_ERR_EXDEV = 32907,
    GPG_ERR_EXFULL = 32908,
    GPG_ERR_CODE_DIM = 65536,
}
pub type gpg_err_code_t = Enum_Unnamed68;
pub type gpg_error_t = ::std::os::raw::c_uint;
pub type gpgrt_ssize_t = ssize_t;
pub type gpgrt_off_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed69 {
    pub _vers: ::std::os::raw::c_long,
    pub u: Union_Unnamed70,
}
impl ::std::clone::Clone for Struct_Unnamed69 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed69 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed70 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed70 {
    pub unsafe fn _priv(&mut self) -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _x_align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _xp_align(&mut self) -> *mut *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed70 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed70 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gpgrt_lock_t = Struct_Unnamed69;
pub enum Struct__gpgrt_stream_internal {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__gpgrt__stream {
    pub flags: Struct_Unnamed71,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub buffer_size: size_t,
    pub data_len: size_t,
    pub data_offset: size_t,
    pub data_flushed: size_t,
    pub unread_buffer: *mut ::std::os::raw::c_uchar,
    pub unread_buffer_size: size_t,
    pub unread_data_len: size_t,
    pub intern: *mut Struct__gpgrt_stream_internal,
}
impl ::std::default::Default for Struct__gpgrt__stream {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed71 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed71 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gpgrt_stream_t = *mut Struct__gpgrt__stream;
pub type gpgrt_cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        cookie: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> ssize_t,
>;
pub type gpgrt_cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        cookie: *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        size: size_t,
    ) -> ssize_t,
>;
pub type gpgrt_cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        cookie: *mut ::std::os::raw::c_void,
        pos: *mut gpgrt_off_t,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type gpgrt_cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__gpgrt_cookie_io_functions {
    pub func_read: gpgrt_cookie_read_function_t,
    pub func_write: gpgrt_cookie_write_function_t,
    pub func_seek: gpgrt_cookie_seek_function_t,
    pub func_close: gpgrt_cookie_close_function_t,
}
impl ::std::default::Default for Struct__gpgrt_cookie_io_functions {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gpgrt_cookie_io_functions_t = Struct__gpgrt_cookie_io_functions;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gpgrt_syshd_types {
    GPGRT_SYSHD_NONE = 0,
    GPGRT_SYSHD_FD = 1,
    GPGRT_SYSHD_SOCK = 2,
    GPGRT_SYSHD_RVID = 3,
    GPGRT_SYSHD_HANDLE = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__gpgrt_syshd {
    pub _type: Enum_gpgrt_syshd_types,
    pub u: Union_Unnamed72,
}
impl ::std::default::Default for Struct__gpgrt_syshd {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed72 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed72 {
    pub unsafe fn fd(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sock(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rvid(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn handle(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed72 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gpgrt_syshd_t = Struct__gpgrt_syshd;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__gpgrt_poll_s {
    pub stream: gpgrt_stream_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct__gpgrt_poll_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gpgrt_poll_t = Struct__gpgrt_poll_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_timezone {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __timezone_ptr_t = *mut Struct_timezone;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum___itimer_which {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
impl ::std::default::Default for Struct_itimerval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __itimer_which_t = ::std::os::raw::c_int;
pub type gcry_socklen_t = socklen_t;
pub type gcry_error_t = gpg_error_t;
pub type gcry_err_code_t = gpg_err_code_t;
pub type gcry_err_source_t = gpg_err_source_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_gcry_thread_cbs {
    pub option: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_gcry_thread_cbs {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_gcry_context {}
pub type gcry_ctx_t = *mut Struct_gcry_context;
pub enum Struct_gcry_mpi {}
pub type gcry_mpi_t = *mut Struct_gcry_mpi;
pub enum Struct_gcry_mpi_point {}
pub type gcry_mpi_point_t = *mut Struct_gcry_mpi_point;
pub type GCRY_MPI = *mut Struct_gcry_mpi;
pub type GcryMPI = *mut Struct_gcry_mpi;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed73 {
    pub size: size_t,
    pub off: size_t,
    pub len: size_t,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_Unnamed73 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gcry_buffer_t = Struct_Unnamed73;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_ctl_cmds {
    GCRYCTL_CFB_SYNC = 3,
    GCRYCTL_RESET = 4,
    GCRYCTL_FINALIZE = 5,
    GCRYCTL_GET_KEYLEN = 6,
    GCRYCTL_GET_BLKLEN = 7,
    GCRYCTL_TEST_ALGO = 8,
    GCRYCTL_IS_SECURE = 9,
    GCRYCTL_GET_ASNOID = 10,
    GCRYCTL_ENABLE_ALGO = 11,
    GCRYCTL_DISABLE_ALGO = 12,
    GCRYCTL_DUMP_RANDOM_STATS = 13,
    GCRYCTL_DUMP_SECMEM_STATS = 14,
    GCRYCTL_GET_ALGO_NPKEY = 15,
    GCRYCTL_GET_ALGO_NSKEY = 16,
    GCRYCTL_GET_ALGO_NSIGN = 17,
    GCRYCTL_GET_ALGO_NENCR = 18,
    GCRYCTL_SET_VERBOSITY = 19,
    GCRYCTL_SET_DEBUG_FLAGS = 20,
    GCRYCTL_CLEAR_DEBUG_FLAGS = 21,
    GCRYCTL_USE_SECURE_RNDPOOL = 22,
    GCRYCTL_DUMP_MEMORY_STATS = 23,
    GCRYCTL_INIT_SECMEM = 24,
    GCRYCTL_TERM_SECMEM = 25,
    GCRYCTL_DISABLE_SECMEM_WARN = 27,
    GCRYCTL_SUSPEND_SECMEM_WARN = 28,
    GCRYCTL_RESUME_SECMEM_WARN = 29,
    GCRYCTL_DROP_PRIVS = 30,
    GCRYCTL_ENABLE_M_GUARD = 31,
    GCRYCTL_START_DUMP = 32,
    GCRYCTL_STOP_DUMP = 33,
    GCRYCTL_GET_ALGO_USAGE = 34,
    GCRYCTL_IS_ALGO_ENABLED = 35,
    GCRYCTL_DISABLE_INTERNAL_LOCKING = 36,
    GCRYCTL_DISABLE_SECMEM = 37,
    GCRYCTL_INITIALIZATION_FINISHED = 38,
    GCRYCTL_INITIALIZATION_FINISHED_P = 39,
    GCRYCTL_ANY_INITIALIZATION_P = 40,
    GCRYCTL_SET_CBC_CTS = 41,
    GCRYCTL_SET_CBC_MAC = 42,
    GCRYCTL_ENABLE_QUICK_RANDOM = 44,
    GCRYCTL_SET_RANDOM_SEED_FILE = 45,
    GCRYCTL_UPDATE_RANDOM_SEED_FILE = 46,
    GCRYCTL_SET_THREAD_CBS = 47,
    GCRYCTL_FAST_POLL = 48,
    GCRYCTL_SET_RANDOM_DAEMON_SOCKET = 49,
    GCRYCTL_USE_RANDOM_DAEMON = 50,
    GCRYCTL_FAKED_RANDOM_P = 51,
    GCRYCTL_SET_RNDEGD_SOCKET = 52,
    GCRYCTL_PRINT_CONFIG = 53,
    GCRYCTL_OPERATIONAL_P = 54,
    GCRYCTL_FIPS_MODE_P = 55,
    GCRYCTL_FORCE_FIPS_MODE = 56,
    GCRYCTL_SELFTEST = 57,
    GCRYCTL_DISABLE_HWF = 63,
    GCRYCTL_SET_ENFORCED_FIPS_FLAG = 64,
    GCRYCTL_SET_PREFERRED_RNG_TYPE = 65,
    GCRYCTL_GET_CURRENT_RNG_TYPE = 66,
    GCRYCTL_DISABLE_LOCKED_SECMEM = 67,
    GCRYCTL_DISABLE_PRIV_DROP = 68,
    GCRYCTL_SET_CCM_LENGTHS = 69,
    GCRYCTL_CLOSE_RANDOM_DEVICE = 70,
    GCRYCTL_INACTIVATE_FIPS_FLAG = 71,
    GCRYCTL_REACTIVATE_FIPS_FLAG = 72,
}
pub enum Struct_gcry_sexp {}
pub type gcry_sexp_t = *mut Struct_gcry_sexp;
pub type GCRY_SEXP = *mut Struct_gcry_sexp;
pub type GcrySexp = *mut Struct_gcry_sexp;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_sexp_format {
    GCRYSEXP_FMT_DEFAULT = 0,
    GCRYSEXP_FMT_CANON = 1,
    GCRYSEXP_FMT_BASE64 = 2,
    GCRYSEXP_FMT_ADVANCED = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_mpi_format {
    GCRYMPI_FMT_NONE = 0,
    GCRYMPI_FMT_STD = 1,
    GCRYMPI_FMT_PGP = 2,
    GCRYMPI_FMT_SSH = 3,
    GCRYMPI_FMT_HEX = 4,
    GCRYMPI_FMT_USG = 5,
    GCRYMPI_FMT_OPAQUE = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_mpi_flag {
    GCRYMPI_FLAG_SECURE = 1,
    GCRYMPI_FLAG_OPAQUE = 2,
    GCRYMPI_FLAG_IMMUTABLE = 4,
    GCRYMPI_FLAG_CONST = 8,
    GCRYMPI_FLAG_USER1 = 256,
    GCRYMPI_FLAG_USER2 = 512,
    GCRYMPI_FLAG_USER3 = 1024,
    GCRYMPI_FLAG_USER4 = 2048,
}
pub enum Struct_gcry_cipher_handle {}
pub type gcry_cipher_hd_t = *mut Struct_gcry_cipher_handle;
pub type GCRY_CIPHER_HD = *mut Struct_gcry_cipher_handle;
pub type GcryCipherHd = *mut Struct_gcry_cipher_handle;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_cipher_algos {
    GCRY_CIPHER_NONE = 0,
    GCRY_CIPHER_IDEA = 1,
    GCRY_CIPHER_3DES = 2,
    GCRY_CIPHER_CAST5 = 3,
    GCRY_CIPHER_BLOWFISH = 4,
    GCRY_CIPHER_SAFER_SK128 = 5,
    GCRY_CIPHER_DES_SK = 6,
    GCRY_CIPHER_AES = 7,
    GCRY_CIPHER_AES192 = 8,
    GCRY_CIPHER_AES256 = 9,
    GCRY_CIPHER_TWOFISH = 10,
    GCRY_CIPHER_ARCFOUR = 301,
    GCRY_CIPHER_DES = 302,
    GCRY_CIPHER_TWOFISH128 = 303,
    GCRY_CIPHER_SERPENT128 = 304,
    GCRY_CIPHER_SERPENT192 = 305,
    GCRY_CIPHER_SERPENT256 = 306,
    GCRY_CIPHER_RFC2268_40 = 307,
    GCRY_CIPHER_RFC2268_128 = 308,
    GCRY_CIPHER_SEED = 309,
    GCRY_CIPHER_CAMELLIA128 = 310,
    GCRY_CIPHER_CAMELLIA192 = 311,
    GCRY_CIPHER_CAMELLIA256 = 312,
    GCRY_CIPHER_SALSA20 = 313,
    GCRY_CIPHER_SALSA20R12 = 314,
    GCRY_CIPHER_GOST28147 = 315,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_cipher_modes {
    GCRY_CIPHER_MODE_NONE = 0,
    GCRY_CIPHER_MODE_ECB = 1,
    GCRY_CIPHER_MODE_CFB = 2,
    GCRY_CIPHER_MODE_CBC = 3,
    GCRY_CIPHER_MODE_STREAM = 4,
    GCRY_CIPHER_MODE_OFB = 5,
    GCRY_CIPHER_MODE_CTR = 6,
    GCRY_CIPHER_MODE_AESWRAP = 7,
    GCRY_CIPHER_MODE_CCM = 8,
    GCRY_CIPHER_MODE_GCM = 9,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_cipher_flags {
    GCRY_CIPHER_SECURE = 1,
    GCRY_CIPHER_ENABLE_SYNC = 2,
    GCRY_CIPHER_CBC_CTS = 4,
    GCRY_CIPHER_CBC_MAC = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_pk_algos {
    GCRY_PK_RSA = 1,
    GCRY_PK_RSA_E = 2,
    GCRY_PK_RSA_S = 3,
    GCRY_PK_ELG_E = 16,
    GCRY_PK_DSA = 17,
    GCRY_PK_ECC = 18,
    GCRY_PK_ELG = 20,
    GCRY_PK_ECDSA = 301,
    GCRY_PK_ECDH = 302,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_md_algos {
    GCRY_MD_NONE = 0,
    GCRY_MD_MD5 = 1,
    GCRY_MD_SHA1 = 2,
    GCRY_MD_RMD160 = 3,
    GCRY_MD_MD2 = 5,
    GCRY_MD_TIGER = 6,
    GCRY_MD_HAVAL = 7,
    GCRY_MD_SHA256 = 8,
    GCRY_MD_SHA384 = 9,
    GCRY_MD_SHA512 = 10,
    GCRY_MD_SHA224 = 11,
    GCRY_MD_MD4 = 301,
    GCRY_MD_CRC32 = 302,
    GCRY_MD_CRC32_RFC1510 = 303,
    GCRY_MD_CRC24_RFC2440 = 304,
    GCRY_MD_WHIRLPOOL = 305,
    GCRY_MD_TIGER1 = 306,
    GCRY_MD_TIGER2 = 307,
    GCRY_MD_GOSTR3411_94 = 308,
    GCRY_MD_STRIBOG256 = 309,
    GCRY_MD_STRIBOG512 = 310,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_md_flags {
    GCRY_MD_FLAG_SECURE = 1,
    GCRY_MD_FLAG_HMAC = 2,
    GCRY_MD_FLAG_BUGEMU1 = 256,
}
pub enum Struct_gcry_md_context {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_gcry_md_handle {
    pub ctx: *mut Struct_gcry_md_context,
    pub bufpos: ::std::os::raw::c_int,
    pub bufsize: ::std::os::raw::c_int,
    pub buf: [::std::os::raw::c_uchar; 1usize],
}
impl ::std::default::Default for Struct_gcry_md_handle {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gcry_md_hd_t = *mut Struct_gcry_md_handle;
pub type GCRY_MD_HD = *mut Struct_gcry_md_handle;
pub type GcryMDHd = *mut Struct_gcry_md_handle;
pub enum Struct_gcry_mac_handle {}
pub type gcry_mac_hd_t = *mut Struct_gcry_mac_handle;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_mac_algos {
    GCRY_MAC_NONE = 0,
    GCRY_MAC_HMAC_SHA256 = 101,
    GCRY_MAC_HMAC_SHA224 = 102,
    GCRY_MAC_HMAC_SHA512 = 103,
    GCRY_MAC_HMAC_SHA384 = 104,
    GCRY_MAC_HMAC_SHA1 = 105,
    GCRY_MAC_HMAC_MD5 = 106,
    GCRY_MAC_HMAC_MD4 = 107,
    GCRY_MAC_HMAC_RMD160 = 108,
    GCRY_MAC_HMAC_TIGER1 = 109,
    GCRY_MAC_HMAC_WHIRLPOOL = 110,
    GCRY_MAC_HMAC_GOSTR3411_94 = 111,
    GCRY_MAC_HMAC_STRIBOG256 = 112,
    GCRY_MAC_HMAC_STRIBOG512 = 113,
    GCRY_MAC_CMAC_AES = 201,
    GCRY_MAC_CMAC_3DES = 202,
    GCRY_MAC_CMAC_CAMELLIA = 203,
    GCRY_MAC_CMAC_CAST5 = 204,
    GCRY_MAC_CMAC_BLOWFISH = 205,
    GCRY_MAC_CMAC_TWOFISH = 206,
    GCRY_MAC_CMAC_SERPENT = 207,
    GCRY_MAC_CMAC_SEED = 208,
    GCRY_MAC_CMAC_RFC2268 = 209,
    GCRY_MAC_CMAC_IDEA = 210,
    GCRY_MAC_CMAC_GOST28147 = 211,
    GCRY_MAC_GMAC_AES = 401,
    GCRY_MAC_GMAC_CAMELLIA = 402,
    GCRY_MAC_GMAC_TWOFISH = 403,
    GCRY_MAC_GMAC_SERPENT = 404,
    GCRY_MAC_GMAC_SEED = 405,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_mac_flags {
    GCRY_MAC_FLAG_SECURE = 1,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_kdf_algos {
    GCRY_KDF_NONE = 0,
    GCRY_KDF_SIMPLE_S2K = 16,
    GCRY_KDF_SALTED_S2K = 17,
    GCRY_KDF_ITERSALTED_S2K = 19,
    GCRY_KDF_PBKDF1 = 33,
    GCRY_KDF_PBKDF2 = 34,
    GCRY_KDF_SCRYPT = 48,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_rng_types {
    GCRY_RNG_TYPE_STANDARD = 1,
    GCRY_RNG_TYPE_FIPS = 2,
    GCRY_RNG_TYPE_SYSTEM = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_random_level {
    GCRY_WEAK_RANDOM = 0,
    GCRY_STRONG_RANDOM = 1,
    GCRY_VERY_STRONG_RANDOM = 2,
}
pub type gcry_random_level_t = Enum_gcry_random_level;
pub type gcry_prime_check_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        candidate: gcry_mpi_t,
    ) -> ::std::os::raw::c_int,
>;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_gcry_log_levels {
    GCRY_LOG_CONT = 0,
    GCRY_LOG_INFO = 10,
    GCRY_LOG_WARN = 20,
    GCRY_LOG_ERROR = 30,
    GCRY_LOG_FATAL = 40,
    GCRY_LOG_BUG = 50,
    GCRY_LOG_DEBUG = 100,
}
pub type gcry_handler_progress_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ),
>;
pub type gcry_handler_alloc_t =
    ::std::option::Option<extern "C" fn(n: size_t) -> *mut ::std::os::raw::c_void>;
pub type gcry_handler_secure_check_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type gcry_handler_realloc_t = ::std::option::Option<
    unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, n: size_t) -> *mut ::std::os::raw::c_void,
>;
pub type gcry_handler_free_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type gcry_handler_no_mem_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type gcry_handler_error_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ),
>;
pub type gcry_handler_log_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_HashCode {
    pub bits: [uint32_t; 16usize],
}
impl ::std::default::Default for Struct_GNUNET_HashCode {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_CRYPTO_Quality {
    GNUNET_CRYPTO_QUALITY_WEAK = 0,
    GNUNET_CRYPTO_QUALITY_STRONG = 1,
    GNUNET_CRYPTO_QUALITY_NONCE = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_HashAsciiEncoded {
    pub encoding: [::std::os::raw::c_uchar; 104usize],
}
impl ::std::clone::Clone for Struct_GNUNET_CRYPTO_HashAsciiEncoded {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_HashAsciiEncoded {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EccSignaturePurpose {
    pub size: uint32_t,
    pub purpose: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EccSignaturePurpose {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EddsaSignature {
    pub r: [::std::os::raw::c_uchar; 32usize],
    pub s: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EddsaSignature {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EcdsaSignature {
    pub r: [::std::os::raw::c_uchar; 32usize],
    pub s: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdsaSignature {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EddsaPublicKey {
    pub q_y: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EddsaPublicKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EcdsaPublicKey {
    pub q_y: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdsaPublicKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_PeerIdentity {
    pub public_key: Struct_GNUNET_CRYPTO_EddsaPublicKey,
}
impl ::std::default::Default for Struct_GNUNET_PeerIdentity {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EcdhePublicKey {
    pub q_y: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdhePublicKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EcdhePrivateKey {
    pub d: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdhePrivateKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EcdsaPrivateKey {
    pub d: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdsaPrivateKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_EddsaPrivateKey {
    pub d: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EddsaPrivateKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_SymmetricSessionKey {
    pub aes_key: [::std::os::raw::c_uchar; 32usize],
    pub twofish_key: [::std::os::raw::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_SymmetricSessionKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CRYPTO_SymmetricInitializationVector {
    pub aes_iv: [::std::os::raw::c_uchar; 16usize],
    pub twofish_iv: [::std::os::raw::c_uchar; 16usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_SymmetricInitializationVector {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_AuthKey {
    pub key: [::std::os::raw::c_uchar; 64usize],
}
impl ::std::clone::Clone for Struct_GNUNET_CRYPTO_AuthKey {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_AuthKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_PaillierPublicKey {
    pub n: [::std::os::raw::c_uchar; 256usize],
}
impl ::std::clone::Clone for Struct_GNUNET_CRYPTO_PaillierPublicKey {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_PaillierPublicKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_PaillierPrivateKey {
    pub lambda: [::std::os::raw::c_uchar; 256usize],
    pub mu: [::std::os::raw::c_uchar; 256usize],
}
impl ::std::clone::Clone for Struct_GNUNET_CRYPTO_PaillierPrivateKey {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_PaillierPrivateKey {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_PaillierCiphertext {
    pub remaining_ops: int32_t,
    pub bits: [::std::os::raw::c_uchar; 512usize],
}
impl ::std::clone::Clone for Struct_GNUNET_CRYPTO_PaillierCiphertext {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_PaillierCiphertext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_CRYPTO_HashCompletedCallback = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, res: *const Struct_GNUNET_HashCode),
>;
pub enum Struct_GNUNET_CRYPTO_FileHashContext {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_BANDWIDTH_Value32NBO {
    pub value__: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_BANDWIDTH_Value32NBO {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_BANDWIDTH_TrackerUpdateCallback =
    ::std::option::Option<unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void)>;
pub type GNUNET_BANDWIDTH_ExcessNotificationCallback =
    ::std::option::Option<unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_BANDWIDTH_Tracker {
    pub update_cb_cls: *mut ::std::os::raw::c_void,
    pub update_cb: GNUNET_BANDWIDTH_TrackerUpdateCallback,
    pub excess_cb_cls: *mut ::std::os::raw::c_void,
    pub excess_cb: GNUNET_BANDWIDTH_ExcessNotificationCallback,
    pub consumption_since_last_update__: int64_t,
    pub excess_task: GNUNET_SCHEDULER_TaskIdentifier,
    pub last_update__: Struct_GNUNET_TIME_Absolute,
    pub available_bytes_per_s__: uint32_t,
    pub max_carry_s__: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_BANDWIDTH_Tracker {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_EXTRACTOR_Options {
    EXTRACTOR_OPTION_DEFAULT_POLICY = 0,
    EXTRACTOR_OPTION_OUT_OF_PROCESS_NO_RESTART = 1,
    EXTRACTOR_OPTION_IN_PROCESS = 2,
    EXTRACTOR_OPTION_DISABLED = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_EXTRACTOR_MetaFormat {
    EXTRACTOR_METAFORMAT_UNKNOWN = 0,
    EXTRACTOR_METAFORMAT_UTF8 = 1,
    EXTRACTOR_METAFORMAT_BINARY = 2,
    EXTRACTOR_METAFORMAT_C_STRING = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_EXTRACTOR_MetaType {
    EXTRACTOR_METATYPE_RESERVED = 0,
    EXTRACTOR_METATYPE_MIMETYPE = 1,
    EXTRACTOR_METATYPE_FILENAME = 2,
    EXTRACTOR_METATYPE_COMMENT = 3,
    EXTRACTOR_METATYPE_TITLE = 4,
    EXTRACTOR_METATYPE_BOOK_TITLE = 5,
    EXTRACTOR_METATYPE_BOOK_EDITION = 6,
    EXTRACTOR_METATYPE_BOOK_CHAPTER_NUMBER = 7,
    EXTRACTOR_METATYPE_JOURNAL_NAME = 8,
    EXTRACTOR_METATYPE_JOURNAL_VOLUME = 9,
    EXTRACTOR_METATYPE_JOURNAL_NUMBER = 10,
    EXTRACTOR_METATYPE_PAGE_COUNT = 11,
    EXTRACTOR_METATYPE_PAGE_RANGE = 12,
    EXTRACTOR_METATYPE_AUTHOR_NAME = 13,
    EXTRACTOR_METATYPE_AUTHOR_EMAIL = 14,
    EXTRACTOR_METATYPE_AUTHOR_INSTITUTION = 15,
    EXTRACTOR_METATYPE_PUBLISHER = 16,
    EXTRACTOR_METATYPE_PUBLISHER_ADDRESS = 17,
    EXTRACTOR_METATYPE_PUBLISHER_INSTITUTION = 18,
    EXTRACTOR_METATYPE_PUBLISHER_SERIES = 19,
    EXTRACTOR_METATYPE_PUBLICATION_TYPE = 20,
    EXTRACTOR_METATYPE_PUBLICATION_YEAR = 21,
    EXTRACTOR_METATYPE_PUBLICATION_MONTH = 22,
    EXTRACTOR_METATYPE_PUBLICATION_DAY = 23,
    EXTRACTOR_METATYPE_PUBLICATION_DATE = 24,
    EXTRACTOR_METATYPE_BIBTEX_EPRINT = 25,
    EXTRACTOR_METATYPE_BIBTEX_ENTRY_TYPE = 26,
    EXTRACTOR_METATYPE_LANGUAGE = 27,
    EXTRACTOR_METATYPE_CREATION_TIME = 28,
    EXTRACTOR_METATYPE_URL = 29,
    EXTRACTOR_METATYPE_URI = 30,
    EXTRACTOR_METATYPE_ISRC = 31,
    EXTRACTOR_METATYPE_HASH_MD4 = 32,
    EXTRACTOR_METATYPE_HASH_MD5 = 33,
    EXTRACTOR_METATYPE_HASH_SHA0 = 34,
    EXTRACTOR_METATYPE_HASH_SHA1 = 35,
    EXTRACTOR_METATYPE_HASH_RMD160 = 36,
    EXTRACTOR_METATYPE_GPS_LATITUDE_REF = 37,
    EXTRACTOR_METATYPE_GPS_LATITUDE = 38,
    EXTRACTOR_METATYPE_GPS_LONGITUDE_REF = 39,
    EXTRACTOR_METATYPE_GPS_LONGITUDE = 40,
    EXTRACTOR_METATYPE_LOCATION_CITY = 41,
    EXTRACTOR_METATYPE_LOCATION_SUBLOCATION = 42,
    EXTRACTOR_METATYPE_LOCATION_COUNTRY = 43,
    EXTRACTOR_METATYPE_LOCATION_COUNTRY_CODE = 44,
    EXTRACTOR_METATYPE_UNKNOWN = 45,
    EXTRACTOR_METATYPE_DESCRIPTION = 46,
    EXTRACTOR_METATYPE_COPYRIGHT = 47,
    EXTRACTOR_METATYPE_RIGHTS = 48,
    EXTRACTOR_METATYPE_KEYWORDS = 49,
    EXTRACTOR_METATYPE_ABSTRACT = 50,
    EXTRACTOR_METATYPE_SUMMARY = 51,
    EXTRACTOR_METATYPE_SUBJECT = 52,
    EXTRACTOR_METATYPE_CREATOR = 53,
    EXTRACTOR_METATYPE_FORMAT = 54,
    EXTRACTOR_METATYPE_FORMAT_VERSION = 55,
    EXTRACTOR_METATYPE_CREATED_BY_SOFTWARE = 56,
    EXTRACTOR_METATYPE_UNKNOWN_DATE = 57,
    EXTRACTOR_METATYPE_CREATION_DATE = 58,
    EXTRACTOR_METATYPE_MODIFICATION_DATE = 59,
    EXTRACTOR_METATYPE_LAST_PRINTED = 60,
    EXTRACTOR_METATYPE_LAST_SAVED_BY = 61,
    EXTRACTOR_METATYPE_TOTAL_EDITING_TIME = 62,
    EXTRACTOR_METATYPE_EDITING_CYCLES = 63,
    EXTRACTOR_METATYPE_MODIFIED_BY_SOFTWARE = 64,
    EXTRACTOR_METATYPE_REVISION_HISTORY = 65,
    EXTRACTOR_METATYPE_EMBEDDED_FILE_SIZE = 66,
    EXTRACTOR_METATYPE_FINDER_FILE_TYPE = 67,
    EXTRACTOR_METATYPE_FINDER_FILE_CREATOR = 68,
    EXTRACTOR_METATYPE_PACKAGE_NAME = 69,
    EXTRACTOR_METATYPE_PACKAGE_VERSION = 70,
    EXTRACTOR_METATYPE_SECTION = 71,
    EXTRACTOR_METATYPE_UPLOAD_PRIORITY = 72,
    EXTRACTOR_METATYPE_PACKAGE_DEPENDENCY = 73,
    EXTRACTOR_METATYPE_PACKAGE_CONFLICTS = 74,
    EXTRACTOR_METATYPE_PACKAGE_REPLACES = 75,
    EXTRACTOR_METATYPE_PACKAGE_PROVIDES = 76,
    EXTRACTOR_METATYPE_PACKAGE_RECOMMENDS = 77,
    EXTRACTOR_METATYPE_PACKAGE_SUGGESTS = 78,
    EXTRACTOR_METATYPE_PACKAGE_MAINTAINER = 79,
    EXTRACTOR_METATYPE_PACKAGE_INSTALLED_SIZE = 80,
    EXTRACTOR_METATYPE_PACKAGE_SOURCE = 81,
    EXTRACTOR_METATYPE_PACKAGE_ESSENTIAL = 82,
    EXTRACTOR_METATYPE_TARGET_ARCHITECTURE = 83,
    EXTRACTOR_METATYPE_PACKAGE_PRE_DEPENDENCY = 84,
    EXTRACTOR_METATYPE_LICENSE = 85,
    EXTRACTOR_METATYPE_PACKAGE_DISTRIBUTION = 86,
    EXTRACTOR_METATYPE_BUILDHOST = 87,
    EXTRACTOR_METATYPE_VENDOR = 88,
    EXTRACTOR_METATYPE_TARGET_OS = 89,
    EXTRACTOR_METATYPE_SOFTWARE_VERSION = 90,
    EXTRACTOR_METATYPE_TARGET_PLATFORM = 91,
    EXTRACTOR_METATYPE_RESOURCE_TYPE = 92,
    EXTRACTOR_METATYPE_LIBRARY_SEARCH_PATH = 93,
    EXTRACTOR_METATYPE_LIBRARY_DEPENDENCY = 94,
    EXTRACTOR_METATYPE_CAMERA_MAKE = 95,
    EXTRACTOR_METATYPE_CAMERA_MODEL = 96,
    EXTRACTOR_METATYPE_EXPOSURE = 97,
    EXTRACTOR_METATYPE_APERTURE = 98,
    EXTRACTOR_METATYPE_EXPOSURE_BIAS = 99,
    EXTRACTOR_METATYPE_FLASH = 100,
    EXTRACTOR_METATYPE_FLASH_BIAS = 101,
    EXTRACTOR_METATYPE_FOCAL_LENGTH = 102,
    EXTRACTOR_METATYPE_FOCAL_LENGTH_35MM = 103,
    EXTRACTOR_METATYPE_ISO_SPEED = 104,
    EXTRACTOR_METATYPE_EXPOSURE_MODE = 105,
    EXTRACTOR_METATYPE_METERING_MODE = 106,
    EXTRACTOR_METATYPE_MACRO_MODE = 107,
    EXTRACTOR_METATYPE_IMAGE_QUALITY = 108,
    EXTRACTOR_METATYPE_WHITE_BALANCE = 109,
    EXTRACTOR_METATYPE_ORIENTATION = 110,
    EXTRACTOR_METATYPE_MAGNIFICATION = 111,
    EXTRACTOR_METATYPE_IMAGE_DIMENSIONS = 112,
    EXTRACTOR_METATYPE_PRODUCED_BY_SOFTWARE = 113,
    EXTRACTOR_METATYPE_THUMBNAIL = 114,
    EXTRACTOR_METATYPE_IMAGE_RESOLUTION = 115,
    EXTRACTOR_METATYPE_SOURCE = 116,
    EXTRACTOR_METATYPE_CHARACTER_SET = 117,
    EXTRACTOR_METATYPE_LINE_COUNT = 118,
    EXTRACTOR_METATYPE_PARAGRAPH_COUNT = 119,
    EXTRACTOR_METATYPE_WORD_COUNT = 120,
    EXTRACTOR_METATYPE_CHARACTER_COUNT = 121,
    EXTRACTOR_METATYPE_PAGE_ORIENTATION = 122,
    EXTRACTOR_METATYPE_PAPER_SIZE = 123,
    EXTRACTOR_METATYPE_TEMPLATE = 124,
    EXTRACTOR_METATYPE_COMPANY = 125,
    EXTRACTOR_METATYPE_MANAGER = 126,
    EXTRACTOR_METATYPE_REVISION_NUMBER = 127,
    EXTRACTOR_METATYPE_DURATION = 128,
    EXTRACTOR_METATYPE_ALBUM = 129,
    EXTRACTOR_METATYPE_ARTIST = 130,
    EXTRACTOR_METATYPE_GENRE = 131,
    EXTRACTOR_METATYPE_TRACK_NUMBER = 132,
    EXTRACTOR_METATYPE_DISC_NUMBER = 133,
    EXTRACTOR_METATYPE_PERFORMER = 134,
    EXTRACTOR_METATYPE_CONTACT_INFORMATION = 135,
    EXTRACTOR_METATYPE_SONG_VERSION = 136,
    EXTRACTOR_METATYPE_PICTURE = 137,
    EXTRACTOR_METATYPE_COVER_PICTURE = 138,
    EXTRACTOR_METATYPE_CONTRIBUTOR_PICTURE = 139,
    EXTRACTOR_METATYPE_EVENT_PICTURE = 140,
    EXTRACTOR_METATYPE_LOGO = 141,
    EXTRACTOR_METATYPE_BROADCAST_TELEVISION_SYSTEM = 142,
    EXTRACTOR_METATYPE_SOURCE_DEVICE = 143,
    EXTRACTOR_METATYPE_DISCLAIMER = 144,
    EXTRACTOR_METATYPE_WARNING = 145,
    EXTRACTOR_METATYPE_PAGE_ORDER = 146,
    EXTRACTOR_METATYPE_WRITER = 147,
    EXTRACTOR_METATYPE_PRODUCT_VERSION = 148,
    EXTRACTOR_METATYPE_CONTRIBUTOR_NAME = 149,
    EXTRACTOR_METATYPE_MOVIE_DIRECTOR = 150,
    EXTRACTOR_METATYPE_NETWORK_NAME = 151,
    EXTRACTOR_METATYPE_SHOW_NAME = 152,
    EXTRACTOR_METATYPE_CHAPTER_NAME = 153,
    EXTRACTOR_METATYPE_SONG_COUNT = 154,
    EXTRACTOR_METATYPE_STARTING_SONG = 155,
    EXTRACTOR_METATYPE_PLAY_COUNTER = 156,
    EXTRACTOR_METATYPE_CONDUCTOR = 157,
    EXTRACTOR_METATYPE_INTERPRETATION = 158,
    EXTRACTOR_METATYPE_COMPOSER = 159,
    EXTRACTOR_METATYPE_BEATS_PER_MINUTE = 160,
    EXTRACTOR_METATYPE_ENCODED_BY = 161,
    EXTRACTOR_METATYPE_ORIGINAL_TITLE = 162,
    EXTRACTOR_METATYPE_ORIGINAL_ARTIST = 163,
    EXTRACTOR_METATYPE_ORIGINAL_WRITER = 164,
    EXTRACTOR_METATYPE_ORIGINAL_RELEASE_YEAR = 165,
    EXTRACTOR_METATYPE_ORIGINAL_PERFORMER = 166,
    EXTRACTOR_METATYPE_LYRICS = 167,
    EXTRACTOR_METATYPE_POPULARITY_METER = 168,
    EXTRACTOR_METATYPE_LICENSEE = 169,
    EXTRACTOR_METATYPE_MUSICIAN_CREDITS_LIST = 170,
    EXTRACTOR_METATYPE_MOOD = 171,
    EXTRACTOR_METATYPE_SUBTITLE = 172,
    EXTRACTOR_METATYPE_GNUNET_DISPLAY_TYPE = 173,
    EXTRACTOR_METATYPE_GNUNET_FULL_DATA = 174,
    EXTRACTOR_METATYPE_RATING = 175,
    EXTRACTOR_METATYPE_ORGANIZATION = 176,
    EXTRACTOR_METATYPE_RIPPER = 177,
    EXTRACTOR_METATYPE_PRODUCER = 178,
    EXTRACTOR_METATYPE_GROUP = 179,
    EXTRACTOR_METATYPE_GNUNET_ORIGINAL_FILENAME = 180,
    EXTRACTOR_METATYPE_DISC_COUNT = 181,
    EXTRACTOR_METATYPE_CODEC = 182,
    EXTRACTOR_METATYPE_VIDEO_CODEC = 183,
    EXTRACTOR_METATYPE_AUDIO_CODEC = 184,
    EXTRACTOR_METATYPE_SUBTITLE_CODEC = 185,
    EXTRACTOR_METATYPE_CONTAINER_FORMAT = 186,
    EXTRACTOR_METATYPE_BITRATE = 187,
    EXTRACTOR_METATYPE_NOMINAL_BITRATE = 188,
    EXTRACTOR_METATYPE_MINIMUM_BITRATE = 189,
    EXTRACTOR_METATYPE_MAXIMUM_BITRATE = 190,
    EXTRACTOR_METATYPE_SERIAL = 191,
    EXTRACTOR_METATYPE_ENCODER = 192,
    EXTRACTOR_METATYPE_ENCODER_VERSION = 193,
    EXTRACTOR_METATYPE_TRACK_GAIN = 194,
    EXTRACTOR_METATYPE_TRACK_PEAK = 195,
    EXTRACTOR_METATYPE_ALBUM_GAIN = 196,
    EXTRACTOR_METATYPE_ALBUM_PEAK = 197,
    EXTRACTOR_METATYPE_REFERENCE_LEVEL = 198,
    EXTRACTOR_METATYPE_LOCATION_NAME = 199,
    EXTRACTOR_METATYPE_LOCATION_ELEVATION = 200,
    EXTRACTOR_METATYPE_LOCATION_HORIZONTAL_ERROR = 201,
    EXTRACTOR_METATYPE_LOCATION_MOVEMENT_SPEED = 202,
    EXTRACTOR_METATYPE_LOCATION_MOVEMENT_DIRECTION = 203,
    EXTRACTOR_METATYPE_LOCATION_CAPTURE_DIRECTION = 204,
    EXTRACTOR_METATYPE_SHOW_EPISODE_NUMBER = 205,
    EXTRACTOR_METATYPE_SHOW_SEASON_NUMBER = 206,
    EXTRACTOR_METATYPE_GROUPING = 207,
    EXTRACTOR_METATYPE_DEVICE_MANUFACTURER = 208,
    EXTRACTOR_METATYPE_DEVICE_MODEL = 209,
    EXTRACTOR_METATYPE_AUDIO_LANGUAGE = 210,
    EXTRACTOR_METATYPE_CHANNELS = 211,
    EXTRACTOR_METATYPE_SAMPLE_RATE = 212,
    EXTRACTOR_METATYPE_AUDIO_DEPTH = 213,
    EXTRACTOR_METATYPE_AUDIO_BITRATE = 214,
    EXTRACTOR_METATYPE_MAXIMUM_AUDIO_BITRATE = 215,
    EXTRACTOR_METATYPE_VIDEO_DIMENSIONS = 216,
    EXTRACTOR_METATYPE_VIDEO_DEPTH = 217,
    EXTRACTOR_METATYPE_FRAME_RATE = 218,
    EXTRACTOR_METATYPE_PIXEL_ASPECT_RATIO = 219,
    EXTRACTOR_METATYPE_VIDEO_BITRATE = 220,
    EXTRACTOR_METATYPE_MAXIMUM_VIDEO_BITRATE = 221,
    EXTRACTOR_METATYPE_SUBTITLE_LANGUAGE = 222,
    EXTRACTOR_METATYPE_VIDEO_LANGUAGE = 223,
    EXTRACTOR_METATYPE_TOC = 224,
    EXTRACTOR_METATYPE_VIDEO_DURATION = 225,
    EXTRACTOR_METATYPE_AUDIO_DURATION = 226,
    EXTRACTOR_METATYPE_SUBTITLE_DURATION = 227,
    EXTRACTOR_METATYPE_AUDIO_PREVIEW = 228,
    EXTRACTOR_METATYPE_LAST = 229,
}
pub type EXTRACTOR_MetaDataProcessor = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        plugin_name: *const ::std::os::raw::c_char,
        _type: Enum_EXTRACTOR_MetaType,
        format: Enum_EXTRACTOR_MetaFormat,
        data_mime_type: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        data_len: size_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_EXTRACTOR_ExtractContext {
    pub cls: *mut ::std::os::raw::c_void,
    pub config: *const ::std::os::raw::c_char,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            cls: *mut ::std::os::raw::c_void,
            data: *mut *mut ::std::os::raw::c_void,
            size: size_t,
        ) -> ssize_t,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            cls: *mut ::std::os::raw::c_void,
            pos: int64_t,
            whence: ::std::os::raw::c_int,
        ) -> int64_t,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void) -> uint64_t>,
    pub _proc: EXTRACTOR_MetaDataProcessor,
}
impl ::std::default::Default for Struct_EXTRACTOR_ExtractContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type EXTRACTOR_extract_method =
    ::std::option::Option<unsafe extern "C" fn(ec: *mut Struct_EXTRACTOR_ExtractContext)>;
pub enum Struct_EXTRACTOR_PluginList {}
pub enum Struct_GNUNET_CONTAINER_BloomFilter {}
pub type GNUNET_HashCodeIterator = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        next: *mut Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int,
>;
pub enum Struct_GNUNET_CONTAINER_MetaData {}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_CONTAINER_MetaDataSerializationOptions {
    GNUNET_CONTAINER_META_DATA_SERIALIZE_FULL = 0,
    GNUNET_CONTAINER_META_DATA_SERIALIZE_PART = 1,
    GNUNET_CONTAINER_META_DATA_SERIALIZE_NO_COMPRESS = 2,
}
pub enum Struct_GNUNET_CONTAINER_MultiHashMap {}
pub enum Struct_GNUNET_CONTAINER_MultiHashMapIterator {}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_CONTAINER_MultiHashMapOption {
    GNUNET_CONTAINER_MULTIHASHMAPOPTION_REPLACE = 0,
    GNUNET_CONTAINER_MULTIHASHMAPOPTION_MULTIPLE = 1,
    GNUNET_CONTAINER_MULTIHASHMAPOPTION_UNIQUE_ONLY = 2,
    GNUNET_CONTAINER_MULTIHASHMAPOPTION_UNIQUE_FAST = 3,
}
pub type GNUNET_CONTAINER_HashMapIterator = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        key: *const Struct_GNUNET_HashCode,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type GNUNET_CONTAINER_PeerMapIterator = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        key: *const Struct_GNUNET_PeerIdentity,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub enum Struct_GNUNET_CONTAINER_MultiPeerMap {}
pub enum Struct_GNUNET_CONTAINER_MultiPeerMapIterator {}
pub enum Struct_GNUNET_CONTAINER_MultiHashMap32 {}
pub enum Struct_GNUNET_CONTAINER_MultiHashMap32Iterator {}
pub type GNUNET_CONTAINER_HashMapIterator32 = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        key: uint32_t,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type GNUNET_CONTAINER_HeapCostType = uint64_t;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_CONTAINER_HeapOrder {
    GNUNET_CONTAINER_HEAP_ORDER_MAX = 0,
    GNUNET_CONTAINER_HEAP_ORDER_MIN = 1,
}
pub enum Struct_GNUNET_CONTAINER_Heap {}
pub enum Struct_GNUNET_CONTAINER_HeapNode {}
pub type GNUNET_CONTAINER_HeapIterator = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        node: *mut Struct_GNUNET_CONTAINER_HeapNode,
        element: *mut ::std::os::raw::c_void,
        cost: GNUNET_CONTAINER_HeapCostType,
    ) -> ::std::os::raw::c_int,
>;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_CONTAINER_SListDisposition {
    GNUNET_CONTAINER_SLIST_DISPOSITION_TRANSIENT = 0,
    GNUNET_CONTAINER_SLIST_DISPOSITION_STATIC = 2,
    GNUNET_CONTAINER_SLIST_DISPOSITION_DYNAMIC = 4,
}
pub enum Struct_GNUNET_CONTAINER_SList_Elem {}
pub enum Struct_GNUNET_CONTAINER_SList {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CONTAINER_SList_Iterator {
    pub list: *mut Struct_GNUNET_CONTAINER_SList,
    pub last: *mut Struct_GNUNET_CONTAINER_SList_Elem,
    pub elem: *mut Struct_GNUNET_CONTAINER_SList_Elem,
}
impl ::std::default::Default for Struct_GNUNET_CONTAINER_SList_Iterator {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_BIO_ReadHandle {}
pub enum Struct_GNUNET_BIO_WriteHandle {}
pub enum Struct_GNUNET_CONNECTION_Handle {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_CONNECTION_Credentials {
    pub uid: uid_t,
    pub gid: gid_t,
}
impl ::std::default::Default for Struct_GNUNET_CONNECTION_Credentials {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_CONNECTION_AccessCheck = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        ucred: *const Struct_GNUNET_CONNECTION_Credentials,
        addr: *const Struct_sockaddr,
        addrlen: socklen_t,
    ) -> ::std::os::raw::c_int,
>;
pub type GNUNET_CONNECTION_Receiver = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_void,
        available: size_t,
        addr: *const Struct_sockaddr,
        addrlen: socklen_t,
        errCode: ::std::os::raw::c_int,
    ),
>;
pub type GNUNET_CONNECTION_TransmitReadyNotify = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        size: size_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> size_t,
>;
pub enum Struct_GNUNET_CONNECTION_TransmitHandle {}
pub enum Struct_GNUNET_CLIENT_Connection {}
pub type GNUNET_CLIENT_MessageHandler = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, msg: *const Struct_GNUNET_MessageHeader),
>;
pub enum Struct_GNUNET_CLIENT_TransmitHandle {}
pub enum Struct_GNUNET_CLIENT_TestHandle {}
pub type GNUNET_CLIENT_TestResultCallback = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, result: ::std::os::raw::c_int),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_GETOPT_CommandLineProcessorContext {
    pub binaryName: *const ::std::os::raw::c_char,
    pub binaryOptions: *const ::std::os::raw::c_char,
    pub allOptions: *const Struct_GNUNET_GETOPT_CommandLineOption,
    pub argv: *const *mut ::std::os::raw::c_char,
    pub argc: ::std::os::raw::c_uint,
    pub currentArgument: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_GNUNET_GETOPT_CommandLineProcessorContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_GETOPT_CommandLineOptionProcessor = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_GETOPT_CommandLineOption {
    pub shortName: ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub argumentHelp: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub require_argument: ::std::os::raw::c_int,
    pub processor: GNUNET_GETOPT_CommandLineOptionProcessor,
    pub scls: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_GNUNET_GETOPT_CommandLineOption {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_SERVER_Handle {}
pub enum Struct_GNUNET_SERVER_Client {}
pub enum Struct_GNUNET_SERVER_TransmitHandle {}
pub type GNUNET_SERVER_MessageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        client: *mut Struct_GNUNET_SERVER_Client,
        message: *const Struct_GNUNET_MessageHeader,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_SERVER_MessageHandler {
    pub callback: GNUNET_SERVER_MessageCallback,
    pub callback_cls: *mut ::std::os::raw::c_void,
    pub _type: uint16_t,
    pub expected_size: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_SERVER_MessageHandler {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_SERVER_DisconnectCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        client: *mut Struct_GNUNET_SERVER_Client,
    ),
>;
pub type GNUNET_SERVER_ConnectCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        client: *mut Struct_GNUNET_SERVER_Client,
    ),
>;
pub enum Struct_GNUNET_SERVER_TransmitContext {}
pub enum Struct_GNUNET_SERVER_NotificationContext {}
pub enum Struct_GNUNET_SERVER_MessageStreamTokenizer {}
pub type GNUNET_SERVER_MessageTokenizerCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        client: *mut ::std::os::raw::c_void,
        message: *const Struct_GNUNET_MessageHeader,
    ) -> ::std::os::raw::c_int,
>;
pub type GNUNET_SERVER_MstCreateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        client: *mut Struct_GNUNET_SERVER_Client,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type GNUNET_SERVER_MstDestroyCallback = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, mst: *mut ::std::os::raw::c_void),
>;
pub type GNUNET_SERVER_MstReceiveCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        mst: *mut ::std::os::raw::c_void,
        client: *mut Struct_GNUNET_SERVER_Client,
        buf: *const ::std::os::raw::c_char,
        size: size_t,
        purge: ::std::os::raw::c_int,
        one_shot: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub enum Struct_GNUNET_HELPER_Handle {}
pub type GNUNET_HELPER_ExceptionCallback =
    ::std::option::Option<unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void)>;
pub type GNUNET_HELPER_Continuation = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, result: ::std::os::raw::c_int),
>;
pub enum Struct_GNUNET_HELPER_SendHandle {}
pub enum Struct_GNUNET_MQ_Envelope {}
pub enum Struct_GNUNET_MQ_Handle {}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_MQ_Error {
    GNUNET_MQ_ERROR_READ = 1,
    GNUNET_MQ_ERROR_WRITE = 2,
    GNUNET_MQ_ERROR_TIMEOUT = 4,
}
pub type GNUNET_MQ_MessageCallback = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, msg: *const Struct_GNUNET_MessageHeader),
>;
pub type GNUNET_MQ_SendImpl = ::std::option::Option<
    unsafe extern "C" fn(
        mq: *mut Struct_GNUNET_MQ_Handle,
        msg: *const Struct_GNUNET_MessageHeader,
        impl_state: *mut ::std::os::raw::c_void,
    ),
>;
pub type GNUNET_MQ_DestroyImpl = ::std::option::Option<
    unsafe extern "C" fn(mq: *mut Struct_GNUNET_MQ_Handle, impl_state: *mut ::std::os::raw::c_void),
>;
pub type GNUNET_MQ_CancelImpl = ::std::option::Option<
    unsafe extern "C" fn(mq: *mut Struct_GNUNET_MQ_Handle, impl_state: *mut ::std::os::raw::c_void),
>;
pub type GNUNET_MQ_NotifyCallback =
    ::std::option::Option<unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void)>;
pub type GNUNET_MQ_ErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, error: Enum_GNUNET_MQ_Error),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_MQ_MessageHandler {
    pub cb: GNUNET_MQ_MessageCallback,
    pub _type: uint16_t,
    pub expected_size: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_MQ_MessageHandler {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_OS_InheritStdioFlags {
    GNUNET_OS_INHERIT_STD_NONE = 0,
    GNUNET_OS_INHERIT_STD_IN = 1,
    GNUNET_OS_INHERIT_STD_OUT = 2,
    GNUNET_OS_INHERIT_STD_ERR = 4,
    GNUNET_OS_INHERIT_STD_OUT_AND_ERR = 6,
    GNUNET_OS_INHERIT_STD_ALL = 7,
}
pub enum Struct_GNUNET_OS_Process {}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_OS_InstallationPathKind {
    GNUNET_OS_IPK_PREFIX = 0,
    GNUNET_OS_IPK_BINDIR = 1,
    GNUNET_OS_IPK_LIBDIR = 2,
    GNUNET_OS_IPK_DATADIR = 3,
    GNUNET_OS_IPK_LOCALEDIR = 4,
    GNUNET_OS_IPK_SELF_PREFIX = 5,
    GNUNET_OS_IPK_ICONDIR = 6,
    GNUNET_OS_IPK_DOCDIR = 7,
    GNUNET_OS_IPK_LIBEXECDIR = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_OS_ProcessStatusType {
    GNUNET_OS_PROCESS_UNKNOWN = 0,
    GNUNET_OS_PROCESS_RUNNING = 1,
    GNUNET_OS_PROCESS_STOPPED = 2,
    GNUNET_OS_PROCESS_EXITED = 3,
    GNUNET_OS_PROCESS_SIGNALED = 4,
}
pub type GNUNET_OS_NetworkInterfaceProcessor = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        isDefault: ::std::os::raw::c_int,
        addr: *const Struct_sockaddr,
        broadcast_addr: *const Struct_sockaddr,
        netmask: *const Struct_sockaddr,
        addrlen: socklen_t,
    ) -> ::std::os::raw::c_int,
>;
pub enum Struct_GNUNET_OS_CommandHandle {}
pub type GNUNET_OS_LineProcessor = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, line: *const ::std::os::raw::c_char),
>;
pub type GNUNET_PEER_Id = ::std::os::raw::c_uint;
pub type GNUNET_PLUGIN_Callback = ::std::option::Option<
    unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type GNUNET_PLUGIN_LoaderCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        library_name: *const ::std::os::raw::c_char,
        lib_ret: *mut ::std::os::raw::c_void,
    ),
>;
pub type GNUNET_PROGRAM_Main = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        args: *const *mut ::std::os::raw::c_char,
        cfgfile: *const ::std::os::raw::c_char,
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ),
>;
pub type GNUNET_SERVICE_Main = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        server: *mut Struct_GNUNET_SERVER_Handle,
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ),
>;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_SERVICE_Options {
    GNUNET_SERVICE_OPTION_NONE = 0,
    GNUNET_SERVICE_OPTION_MANUAL_SHUTDOWN = 1,
    GNUNET_SERVICE_OPTION_SOFT_SHUTDOWN = 2,
}
pub enum Struct_GNUNET_SERVICE_Context {}
pub enum Struct_GNUNET_SIGNAL_Context {}
pub type GNUNET_SIGNAL_Handler = ::std::option::Option<extern "C" fn()>;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_STRINGS_FilenameCheck {
    GNUNET_STRINGS_CHECK_EXISTS = 1,
    GNUNET_STRINGS_CHECK_IS_DIRECTORY = 2,
    GNUNET_STRINGS_CHECK_IS_LINK = 4,
    GNUNET_STRINGS_CHECK_IS_ABSOLUTE = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_STRINGS_PortPolicy {
    pub start_port: uint16_t,
    pub end_port: uint16_t,
    pub negate_portrange: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_GNUNET_STRINGS_PortPolicy {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_STRINGS_IPv4NetworkPolicy {
    pub network: Struct_in_addr,
    pub netmask: Struct_in_addr,
    pub pp: Struct_GNUNET_STRINGS_PortPolicy,
}
impl ::std::default::Default for Struct_GNUNET_STRINGS_IPv4NetworkPolicy {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_STRINGS_IPv6NetworkPolicy {
    pub network: Struct_in6_addr,
    pub netmask: Struct_in6_addr,
    pub pp: Struct_GNUNET_STRINGS_PortPolicy,
}
impl ::std::default::Default for Struct_GNUNET_STRINGS_IPv6NetworkPolicy {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_Layer2PacketHeader {
    pub flags: uint16_t,
    pub proto: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_Layer2PacketHeader {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_IPv4Header {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub diff_serv: uint8_t,
    pub total_length: uint16_t,
    pub identification: uint16_t,
    pub _bindgen_bitfield_2_: ::std::os::raw::c_uint,
    pub ttl: uint8_t,
    pub protocol: uint8_t,
    pub checksum: uint16_t,
    pub source_address: Struct_in_addr,
    pub destination_address: Struct_in_addr,
}
impl ::std::default::Default for Struct_GNUNET_TUN_IPv4Header {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_IPv6Header {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub payload_length: uint16_t,
    pub next_header: uint8_t,
    pub hop_limit: uint8_t,
    pub source_address: Struct_in6_addr,
    pub destination_address: Struct_in6_addr,
}
impl ::std::default::Default for Struct_GNUNET_TUN_IPv6Header {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_TcpHeader {
    pub source_port: uint16_t,
    pub destination_port: uint16_t,
    pub seq: uint32_t,
    pub ack: uint32_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub flags: uint8_t,
    pub window_size: uint16_t,
    pub crc: uint16_t,
    pub urgent_pointer: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_TcpHeader {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_UdpHeader {
    pub source_port: uint16_t,
    pub destination_port: uint16_t,
    pub len: uint16_t,
    pub crc: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_UdpHeader {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_DnsFlags {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsFlags {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_DnsHeader {
    pub id: uint16_t,
    pub flags: Struct_GNUNET_TUN_DnsFlags,
    pub query_count: uint16_t,
    pub answer_rcount: uint16_t,
    pub authority_rcount: uint16_t,
    pub additional_rcount: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsHeader {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_DnsSoaRecord {
    pub serial: uint32_t,
    pub refresh: uint32_t,
    pub retry: uint32_t,
    pub expire: uint32_t,
    pub minimum: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsSoaRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_DnsSrvRecord {
    pub prio: uint16_t,
    pub weight: uint16_t,
    pub port: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsSrvRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_DnsCertRecord {
    pub cert_type: uint16_t,
    pub cert_tag: uint16_t,
    pub algorithm: uint8_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsCertRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_DnsTlsaRecord {
    pub usage: uint8_t,
    pub selector: uint8_t,
    pub matching_type: uint8_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsTlsaRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_GnsVpnRecord {
    pub peer: Struct_GNUNET_PeerIdentity,
    pub proto: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_GnsVpnRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_DnsQueryLine {
    pub _type: uint16_t,
    pub dns_traffic_class: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsQueryLine {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_DnsRecordLine {
    pub _type: uint16_t,
    pub dns_traffic_class: uint16_t,
    pub ttl: uint32_t,
    pub data_len: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsRecordLine {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_TUN_IcmpHeader {
    pub _type: uint8_t,
    pub code: uint8_t,
    pub crc: uint16_t,
    pub quench: Union_Unnamed74,
}
impl ::std::default::Default for Struct_GNUNET_TUN_IcmpHeader {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed74 {
    pub _bindgen_data_: [u8; 4usize],
}
impl Union_Unnamed74 {
    pub unsafe fn echo(&mut self) -> *mut Struct_Unnamed75 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn destination_unreachable(&mut self) -> *mut Struct_ih_pmtu {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn redirect_gateway_address(&mut self) -> *mut Struct_in_addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn packet_too_big_mtu(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed74 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed75 {
    pub identifier: uint16_t,
    pub sequence_number: uint16_t,
}
impl ::std::default::Default for Struct_Unnamed75 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_ih_pmtu {
    pub empty: uint16_t,
    pub next_hop_mtu: uint16_t,
}
impl ::std::default::Default for Struct_ih_pmtu {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DNSPARSER_Query {
    pub name: *mut ::std::os::raw::c_char,
    pub _type: uint16_t,
    pub dns_traffic_class: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_Query {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DNSPARSER_MxRecord {
    pub preference: uint16_t,
    pub mxhost: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_MxRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DNSPARSER_SrvRecord {
    pub service: *mut ::std::os::raw::c_char,
    pub proto: *mut ::std::os::raw::c_char,
    pub domain_name: *mut ::std::os::raw::c_char,
    pub target: *mut ::std::os::raw::c_char,
    pub priority: uint16_t,
    pub weight: uint16_t,
    pub port: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_SrvRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_DNSPARSER_CertType {
    GNUNET_DNSPARSER_CERTTYPE_RESERVED = 0,
    GNUNET_DNSPARSER_CERTTYPE_PKIX = 1,
    GNUNET_DNSPARSER_CERTTYPE_SKPI = 2,
    GNUNET_DNSPARSER_CERTTYPE_PGP = 3,
    GNUNET_DNSPARSER_CERTTYPE_IPKIX = 4,
    GNUNET_DNSPARSER_CERTTYPE_ISKPI = 5,
    GNUNET_DNSPARSER_CERTTYPE_IPGP = 6,
    GNUNET_DNSPARSER_CERTTYPE_ACPKIX = 7,
    GNUNET_DNSPARSER_CERTTYPE_IACKPIX = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_DNSPARSER_CertAlgorithm {
    GNUNET_DNSPARSER_CERTALGO_UNDEFINED = 0,
    GNUNET_DNSPARSER_CERTALGO_RSAMD5 = 1,
    GNUNET_DNSPARSER_CERTALGO_DH = 2,
    GNUNET_DNSPARSER_CERTALGO_DSASHA = 3,
    GNUNET_DNSPARSER_CERTALGO_RSRVD4 = 4,
    GNUNET_DNSPARSER_CERTALGO_RSASHA = 5,
    GNUNET_DNSPARSER_CERTALGO_DSANSEC3 = 6,
    GNUNET_DNSPARSER_CERTALGO_RSANSEC3 = 7,
    GNUNET_DNSPARSER_CERTALGO_RSASHA256 = 8,
    GNUNET_DNSPARSER_CERTALGO_RSRVD9 = 9,
    GNUNET_DNSPARSER_CERTALGO_RSASHA512 = 10,
    GNUNET_DNSPARSER_CERTALGO_GOST_R34 = 12,
    GNUNET_DNSPARSER_CERTALGO_ECDSA_P256SHA256 = 13,
    GNUNET_DNSPARSER_CERTALGO_ECDSA_P384SHA384 = 14,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DNSPARSER_CertRecord {
    pub cert_type: Enum_GNUNET_DNSPARSER_CertType,
    pub cert_tag: uint16_t,
    pub algorithm: Enum_GNUNET_DNSPARSER_CertAlgorithm,
    pub certificate_size: size_t,
    pub certificate_data: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_CertRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DNSPARSER_SoaRecord {
    pub mname: *mut ::std::os::raw::c_char,
    pub rname: *mut ::std::os::raw::c_char,
    pub serial: uint32_t,
    pub refresh: uint32_t,
    pub retry: uint32_t,
    pub expire: uint32_t,
    pub minimum_ttl: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_SoaRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DNSPARSER_RawRecord {
    pub data: *mut ::std::os::raw::c_void,
    pub data_len: size_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_RawRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DNSPARSER_Record {
    pub name: *mut ::std::os::raw::c_char,
    pub data: Union_Unnamed76,
    pub expiration_time: Struct_GNUNET_TIME_Absolute,
    pub _type: uint16_t,
    pub dns_traffic_class: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_Record {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed76 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed76 {
    pub unsafe fn hostname(&mut self) -> *mut *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn soa(&mut self) -> *mut *mut Struct_GNUNET_DNSPARSER_SoaRecord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cert(&mut self) -> *mut *mut Struct_GNUNET_DNSPARSER_CertRecord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mx(&mut self) -> *mut *mut Struct_GNUNET_DNSPARSER_MxRecord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn srv(&mut self) -> *mut *mut Struct_GNUNET_DNSPARSER_SrvRecord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn raw(&mut self) -> *mut Struct_GNUNET_DNSPARSER_RawRecord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed76 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_DNSPARSER_Packet {
    pub queries: *mut Struct_GNUNET_DNSPARSER_Query,
    pub answers: *mut Struct_GNUNET_DNSPARSER_Record,
    pub authority_records: *mut Struct_GNUNET_DNSPARSER_Record,
    pub additional_records: *mut Struct_GNUNET_DNSPARSER_Record,
    pub num_queries: ::std::os::raw::c_uint,
    pub num_answers: ::std::os::raw::c_uint,
    pub num_authority_records: ::std::os::raw::c_uint,
    pub num_additional_records: ::std::os::raw::c_uint,
    pub flags: Struct_GNUNET_TUN_DnsFlags,
    pub id: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_Packet {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_BLOCK_Type {
    GNUNET_BLOCK_TYPE_ANY = 0,
    GNUNET_BLOCK_TYPE_FS_DBLOCK = 1,
    GNUNET_BLOCK_TYPE_FS_IBLOCK = 2,
    GNUNET_BLOCK_TYPE_FS_KBLOCK = 3,
    GNUNET_BLOCK_TYPE_FS_SBLOCK = 4,
    GNUNET_BLOCK_TYPE_FS_NBLOCK = 5,
    GNUNET_BLOCK_TYPE_FS_ONDEMAND = 6,
    GNUNET_BLOCK_TYPE_DHT_HELLO = 7,
    GNUNET_BLOCK_TYPE_TEST = 8,
    GNUNET_BLOCK_TYPE_FS_UBLOCK = 9,
    GNUNET_BLOCK_TYPE_DNS = 10,
    GNUNET_BLOCK_TYPE_GNS_NAMERECORD = 11,
    GNUNET_BLOCK_TYPE_REGEX = 22,
    GNUNET_BLOCK_TYPE_REGEX_ACCEPT = 23,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_BLOCK_EvaluationResult {
    GNUNET_BLOCK_EVALUATION_OK_MORE = 0,
    GNUNET_BLOCK_EVALUATION_OK_LAST = 1,
    GNUNET_BLOCK_EVALUATION_OK_DUPLICATE = 2,
    GNUNET_BLOCK_EVALUATION_RESULT_INVALID = 3,
    GNUNET_BLOCK_EVALUATION_RESULT_IRRELEVANT = 4,
    GNUNET_BLOCK_EVALUATION_REQUEST_VALID = 10,
    GNUNET_BLOCK_EVALUATION_REQUEST_INVALID = 11,
    GNUNET_BLOCK_EVALUATION_TYPE_NOT_SUPPORTED = 20,
}
pub enum Struct_GNUNET_BLOCK_Context {}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_GNSRECORD_Flags {
    GNUNET_GNSRECORD_RF_NONE = 0,
    GNUNET_GNSRECORD_RF_PRIVATE = 2,
    GNUNET_GNSRECORD_RF_PENDING = 4,
    GNUNET_GNSRECORD_RF_RELATIVE_EXPIRATION = 8,
    GNUNET_GNSRECORD_RF_SHADOW_RECORD = 16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_GNSRECORD_Data {
    pub data: *const ::std::os::raw::c_void,
    pub expiration_time: uint64_t,
    pub data_size: size_t,
    pub record_type: uint32_t,
    pub flags: Enum_GNUNET_GNSRECORD_Flags,
}
impl ::std::default::Default for Struct_GNUNET_GNSRECORD_Data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_GNUNET_GNSRECORD_Block {
    pub signature: Struct_GNUNET_CRYPTO_EcdsaSignature,
    pub derived_key: Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    pub purpose: Struct_GNUNET_CRYPTO_EccSignaturePurpose,
    pub expiration_time: Struct_GNUNET_TIME_AbsoluteNBO,
}
impl ::std::default::Default for Struct_GNUNET_GNSRECORD_Block {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_GNSRECORD_RecordCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        rd_count: ::std::os::raw::c_uint,
        rd: *const Struct_GNUNET_GNSRECORD_Data,
    ),
>;
pub enum Struct_GNUNET_NAMESTORE_QueueEntry {}
pub enum Struct_GNUNET_NAMESTORE_Handle {}
pub enum Struct_GNUNET_NAMESTORE_ZoneIterator {}
pub type GNUNET_NAMESTORE_ContinuationWithStatus = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        success: int32_t,
        emsg: *const ::std::os::raw::c_char,
    ),
>;
pub type GNUNET_NAMESTORE_RecordMonitor = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        zone: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        label: *const ::std::os::raw::c_char,
        rd_count: ::std::os::raw::c_uint,
        rd: *const Struct_GNUNET_GNSRECORD_Data,
    ),
>;
pub enum Struct_GNUNET_NAMESTORE_ZoneMonitor {}
pub type GNUNET_NAMESTORE_RecordsSynchronizedCallback =
    ::std::option::Option<unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void)>;
pub enum Struct_GNUNET_GNS_Handle {}
pub enum Struct_GNUNET_GNS_LookupRequest {}
pub type GNUNET_GNS_LookupResultProcessor = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        rd_count: uint32_t,
        rd: *const Struct_GNUNET_GNSRECORD_Data,
    ),
>;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_GNUNET_GNS_LocalOptions {
    GNUNET_GNS_LO_DEFAULT = 0,
    GNUNET_GNS_LO_NO_DHT = 1,
    GNUNET_GNS_LO_LOCAL_MASTER = 2,
}
pub enum Struct_GNUNET_IDENTITY_Handle {}
pub enum Struct_GNUNET_IDENTITY_Ego {}
pub enum Struct_GNUNET_IDENTITY_Operation {}
pub type GNUNET_IDENTITY_Callback = ::std::option::Option<
    unsafe extern "C" fn(
        cls: *mut ::std::os::raw::c_void,
        ego: *mut Struct_GNUNET_IDENTITY_Ego,
        ctx: *mut *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ),
>;
pub type GNUNET_IDENTITY_Continuation = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, emsg: *const ::std::os::raw::c_char),
>;
pub type GNUNET_IDENTITY_EgoCallback = ::std::option::Option<
    unsafe extern "C" fn(cls: *mut ::std::os::raw::c_void, ego: *const Struct_GNUNET_IDENTITY_Ego),
>;
pub enum Struct_GNUNET_IDENTITY_EgoLookup {}
pub type __builtin_va_list = [Struct___va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static in6addr_any: Struct_in6_addr;
    pub static in6addr_loopback: Struct_in6_addr;
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
    pub static mut optarg: *mut ::std::os::raw::c_char;
    pub static mut optind: ::std::os::raw::c_int;
    pub static mut opterr: ::std::os::raw::c_int;
    pub static mut optopt: ::std::os::raw::c_int;
    pub static mut signgam: ::std::os::raw::c_int;
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut __daylight: ::std::os::raw::c_int;
    pub static mut __timezone: ::std::os::raw::c_long;
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut daylight: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut Struct_timeval,
    ) -> ::std::os::raw::c_int;
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const Struct_timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const Struct_iovec,
        __count: ::std::os::raw::c_int,
    ) -> ssize_t;
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const Struct_iovec,
        __count: ::std::os::raw::c_int,
    ) -> ssize_t;
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const Struct_iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> ssize_t;
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const Struct_iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> ssize_t;
    pub fn __cmsg_nxthdr(
        __mhdr: *mut Struct_msghdr,
        __cmsg: *mut Struct_cmsghdr,
    ) -> *mut Struct_cmsghdr;
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const Struct_sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut Struct_sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const Struct_sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut Struct_sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *const Struct_sockaddr,
        __addr_len: socklen_t,
    ) -> ssize_t;
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *mut Struct_sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const Struct_msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut Struct_msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut Struct_sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn ntohl(__netlong: uint32_t) -> uint32_t;
    pub fn ntohs(__netshort: uint16_t) -> uint16_t;
    pub fn htonl(__hostlong: uint32_t) -> uint32_t;
    pub fn htons(__hostshort: uint16_t) -> uint16_t;
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut Struct_sockaddr_in,
    ) -> ::std::os::raw::c_int;
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut Struct_sockaddr_in6,
    ) -> ::std::os::raw::c_int;
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
    pub fn endrpcent();
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut Struct_rpcent;
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut Struct_rpcent;
    pub fn getrpcent() -> *mut Struct_rpcent;
    pub fn getrpcbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut Struct_rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_rpcent,
    ) -> ::std::os::raw::c_int;
    pub fn getrpcbynumber_r(
        __number: ::std::os::raw::c_int,
        __result_buf: *mut Struct_rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_rpcent,
    ) -> ::std::os::raw::c_int;
    pub fn getrpcent_r(
        __result_buf: *mut Struct_rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_rpcent,
    ) -> ::std::os::raw::c_int;
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
    pub fn herror(__str: *const ::std::os::raw::c_char);
    pub fn hstrerror(__err_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
    pub fn endhostent();
    pub fn gethostent() -> *mut Struct_hostent;
    pub fn gethostbyaddr(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
    ) -> *mut Struct_hostent;
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char) -> *mut Struct_hostent;
    pub fn gethostbyname2(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
    ) -> *mut Struct_hostent;
    pub fn gethostent_r(
        __result_buf: *mut Struct_hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn gethostbyaddr_r(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut Struct_hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn gethostbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut Struct_hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn gethostbyname2_r(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
        __result_buf: *mut Struct_hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
    pub fn endnetent();
    pub fn getnetent() -> *mut Struct_netent;
    pub fn getnetbyaddr(__net: uint32_t, __type: ::std::os::raw::c_int) -> *mut Struct_netent;
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut Struct_netent;
    pub fn getnetent_r(
        __result_buf: *mut Struct_netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn getnetbyaddr_r(
        __net: uint32_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut Struct_netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn getnetbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut Struct_netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
    pub fn endservent();
    pub fn getservent() -> *mut Struct_servent;
    pub fn getservbyname(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut Struct_servent;
    pub fn getservbyport(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut Struct_servent;
    pub fn getservent_r(
        __result_buf: *mut Struct_servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_servent,
    ) -> ::std::os::raw::c_int;
    pub fn getservbyname_r(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut Struct_servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_servent,
    ) -> ::std::os::raw::c_int;
    pub fn getservbyport_r(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut Struct_servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_servent,
    ) -> ::std::os::raw::c_int;
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
    pub fn endprotoent();
    pub fn getprotoent() -> *mut Struct_protoent;
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char) -> *mut Struct_protoent;
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut Struct_protoent;
    pub fn getprotoent_r(
        __result_buf: *mut Struct_protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_protoent,
    ) -> ::std::os::raw::c_int;
    pub fn getprotobyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut Struct_protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_protoent,
    ) -> ::std::os::raw::c_int;
    pub fn getprotobynumber_r(
        __proto: ::std::os::raw::c_int,
        __result_buf: *mut Struct_protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_protoent,
    ) -> ::std::os::raw::c_int;
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn endnetgrent();
    pub fn getnetgrent(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn innetgr(
        __netgroup: *const ::std::os::raw::c_char,
        __host: *const ::std::os::raw::c_char,
        __user: *const ::std::os::raw::c_char,
        __domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn getnetgrent_r(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn rcmd(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn rcmd_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
    pub fn rexec(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn rexec_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
    pub fn ruserok(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn ruserok_af(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
    pub fn iruserok(
        __raddr: uint32_t,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn iruserok_af(
        __raddr: *const ::std::os::raw::c_void,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn rresvport_af(
        __alport: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
    pub fn getaddrinfo(
        __name: *const ::std::os::raw::c_char,
        __service: *const ::std::os::raw::c_char,
        __req: *const Struct_addrinfo,
        __pai: *mut *mut Struct_addrinfo,
    ) -> ::std::os::raw::c_int;
    pub fn freeaddrinfo(__ai: *mut Struct_addrinfo);
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    pub fn getnameinfo(
        __sa: *const Struct_sockaddr,
        __salen: socklen_t,
        __host: *mut ::std::os::raw::c_char,
        __hostlen: socklen_t,
        __serv: *mut ::std::os::raw::c_char,
        __servlen: socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_ulong;
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int;
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: __locale_t,
    ) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
    pub fn inet_lnaof(__in: Struct_in_addr) -> in_addr_t;
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> Struct_in_addr;
    pub fn inet_netof(__in: Struct_in_addr) -> in_addr_t;
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
    pub fn inet_ntoa(__in: Struct_in_addr) -> *mut ::std::os::raw::c_char;
    pub fn inet_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn inet_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __len: socklen_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn inet_aton(
        __cp: *const ::std::os::raw::c_char,
        __inp: *mut Struct_in_addr,
    ) -> ::std::os::raw::c_int;
    pub fn inet_neta(
        __net: in_addr_t,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn inet_net_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __bits: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn inet_net_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn inet_nsap_addr(
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_uchar,
        __len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
    pub fn inet_nsap_ntoa(
        __len: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_uchar,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn setpwent();
    pub fn endpwent();
    pub fn getpwent() -> *mut Struct_passwd;
    pub fn fgetpwent(__stream: *mut FILE) -> *mut Struct_passwd;
    pub fn putpwent(__p: *const Struct_passwd, __f: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getpwuid(__uid: __uid_t) -> *mut Struct_passwd;
    pub fn getpwnam(__name: *const ::std::os::raw::c_char) -> *mut Struct_passwd;
    pub fn getpwent_r(
        __resultbuf: *mut Struct_passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_passwd,
    ) -> ::std::os::raw::c_int;
    pub fn getpwuid_r(
        __uid: __uid_t,
        __resultbuf: *mut Struct_passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_passwd,
    ) -> ::std::os::raw::c_int;
    pub fn getpwnam_r(
        __name: *const ::std::os::raw::c_char,
        __resultbuf: *mut Struct_passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_passwd,
    ) -> ::std::os::raw::c_int;
    pub fn fgetpwent_r(
        __stream: *mut FILE,
        __resultbuf: *mut Struct_passwd,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_passwd,
    ) -> ::std::os::raw::c_int;
    pub fn ioctl(
        __fd: ::std::os::raw::c_int,
        __request: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn __sigismember(
        arg1: *const __sigset_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn siggetmask() -> ::std::os::raw::c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const Struct_sigaction,
        __oact: *mut Struct_sigaction,
    ) -> ::std::os::raw::c_int;
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const Struct_timespec,
    ) -> ::std::os::raw::c_int;
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: Union_sigval,
    ) -> ::std::os::raw::c_int;
    pub fn sigreturn(__scp: *mut Struct_sigcontext) -> ::std::os::raw::c_int;
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn sigstack(
        __ss: *mut Struct_sigstack,
        __oss: *mut Struct_sigstack,
    ) -> ::std::os::raw::c_int;
    pub fn sigaltstack(
        __ss: *const Struct_sigaltstack,
        __oss: *mut Struct_sigaltstack,
    ) -> ::std::os::raw::c_int;
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
    pub fn wait(__stat_loc: __WAIT_STATUS) -> __pid_t;
    pub fn waitpid(
        __pid: __pid_t,
        __stat_loc: *mut ::std::os::raw::c_int,
        __options: ::std::os::raw::c_int,
    ) -> __pid_t;
    pub fn waitid(
        __idtype: idtype_t,
        __id: __id_t,
        __infop: *mut siginfo_t,
        __options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn wait3(
        __stat_loc: __WAIT_STATUS,
        __options: ::std::os::raw::c_int,
        __usage: *mut Struct_rusage,
    ) -> __pid_t;
    pub fn wait4(
        __pid: __pid_t,
        __stat_loc: __WAIT_STATUS,
        __options: ::std::os::raw::c_int,
        __usage: *mut Struct_rusage,
    ) -> __pid_t;
    pub fn setgrent();
    pub fn endgrent();
    pub fn getgrent() -> *mut Struct_group;
    pub fn fgetgrent(__stream: *mut FILE) -> *mut Struct_group;
    pub fn getgrgid(__gid: __gid_t) -> *mut Struct_group;
    pub fn getgrnam(__name: *const ::std::os::raw::c_char) -> *mut Struct_group;
    pub fn getgrgid_r(
        __gid: __gid_t,
        __resultbuf: *mut Struct_group,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_group,
    ) -> ::std::os::raw::c_int;
    pub fn getgrnam_r(
        __name: *const ::std::os::raw::c_char,
        __resultbuf: *mut Struct_group,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_group,
    ) -> ::std::os::raw::c_int;
    pub fn fgetgrent_r(
        __stream: *mut FILE,
        __resultbuf: *mut Struct_group,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: size_t,
        __result: *mut *mut Struct_group,
    ) -> ::std::os::raw::c_int;
    pub fn setgroups(__n: size_t, __groups: *const __gid_t) -> ::std::os::raw::c_int;
    pub fn getgrouplist(
        __user: *const ::std::os::raw::c_char,
        __group: __gid_t,
        __groups: *mut __gid_t,
        __ngroups: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn initgroups(
        __user: *const ::std::os::raw::c_char,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __gnuc_va_list,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: size_t,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: size_t,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __s: *mut FILE,
    ) -> size_t;
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn atoll(nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_double;
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_float;
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_double;
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn random_r(
        __buf: *mut Struct_random_data,
        __result: *mut int32_t,
    ) -> ::std::os::raw::c_int;
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut Struct_random_data,
    ) -> ::std::os::raw::c_int;
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut Struct_random_data,
    ) -> ::std::os::raw::c_int;
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut Struct_random_data,
    ) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(
        __buffer: *mut Struct_drand48_data,
        __result: *mut ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_int;
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut Struct_drand48_data,
        __result: *mut ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_int;
    pub fn lrand48_r(
        __buffer: *mut Struct_drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut Struct_drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
    pub fn mrand48_r(
        __buffer: *mut Struct_drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut Struct_drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut Struct_drand48_data,
    ) -> ::std::os::raw::c_int;
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut Struct_drand48_data,
    ) -> ::std::os::raw::c_int;
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut Struct_drand48_data,
    ) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>) -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>) -> ::std::os::raw::c_int;
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
    pub fn ecvt(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn fcvt(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn gcvt(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn qecvt(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn fcvt_r(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn qecvt_r(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn qfcvt_r(
        __value: ::std::os::raw::c_double,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn getloadavg(
        __loadavg: *mut ::std::os::raw::c_double,
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
    pub fn dirname(__path: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn __xpg_basename(__path: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
    pub fn pause() -> ::std::os::raw::c_int;
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *mut *mut ::std::os::raw::c_char,
        __envp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *mut *mut ::std::os::raw::c_char,
        __envp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _exit(__status: ::std::os::raw::c_int);
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
    pub fn getpid() -> __pid_t;
    pub fn getppid() -> __pid_t;
    pub fn getpgrp() -> __pid_t;
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
    pub fn setpgrp() -> ::std::os::raw::c_int;
    pub fn setsid() -> __pid_t;
    pub fn getsid(__pid: __pid_t) -> __pid_t;
    pub fn getuid() -> __uid_t;
    pub fn geteuid() -> __uid_t;
    pub fn getgid() -> __gid_t;
    pub fn getegid() -> __gid_t;
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
    pub fn fork() -> __pid_t;
    pub fn vfork() -> ::std::os::raw::c_int;
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ttyslot() -> ::std::os::raw::c_int;
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn vhangup() -> ::std::os::raw::c_int;
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
    pub fn endusershell();
    pub fn setusershell();
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn gethostid() -> ::std::os::raw::c_long;
    pub fn sync();
    pub fn getpagesize() -> ::std::os::raw::c_int;
    pub fn getdtablesize() -> ::std::os::raw::c_int;
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    pub fn sbrk(__delta: intptr_t) -> *mut ::std::os::raw::c_void;
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn stat(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut Struct_stat,
    ) -> ::std::os::raw::c_int;
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut Struct_stat) -> ::std::os::raw::c_int;
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut Struct_stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn lstat(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut Struct_stat,
    ) -> ::std::os::raw::c_int;
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn umask(__mask: __mode_t) -> __mode_t;
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *mut Struct_timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn futimens(
        __fd: ::std::os::raw::c_int,
        __times: *mut Struct_timespec,
    ) -> ::std::os::raw::c_int;
    pub fn __fxstat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut Struct_stat,
    ) -> ::std::os::raw::c_int;
    pub fn __xstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut Struct_stat,
    ) -> ::std::os::raw::c_int;
    pub fn __lxstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut Struct_stat,
    ) -> ::std::os::raw::c_int;
    pub fn __fxstatat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut Struct_stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn __xmknod(
        __ver: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
    pub fn __xmknodat(
        __ver: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
    pub fn readdir(__dirp: *mut DIR) -> *mut Struct_dirent;
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut Struct_dirent,
        __result: *mut *mut Struct_dirent,
    ) -> ::std::os::raw::c_int;
    pub fn rewinddir(__dirp: *mut DIR);
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
    pub fn scandir(
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut Struct_dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const Struct_dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const Struct_dirent,
                arg2: *mut *const Struct_dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
    pub fn alphasort(
        __e1: *mut *const Struct_dirent,
        __e2: *mut *const Struct_dirent,
    ) -> ::std::os::raw::c_int;
    pub fn getdirentries(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
        __basep: *mut __off_t,
    ) -> __ssize_t;
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
    pub fn acos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan2(
        __y: ::std::os::raw::c_double,
        __x: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __atan2(
        __y: ::std::os::raw::c_double,
        __x: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn cos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn frexp(
        __x: ::std::os::raw::c_double,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __frexp(
        __x: ::std::os::raw::c_double,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn ldexp(
        __x: ::std::os::raw::c_double,
        __exponent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __ldexp(
        __x: ::std::os::raw::c_double,
        __exponent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn log(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log10(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log10(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn modf(
        __x: ::std::os::raw::c_double,
        __iptr: *mut ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __modf(
        __x: ::std::os::raw::c_double,
        __iptr: *mut ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn expm1(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expm1(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log1p(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log1p(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn pow(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __pow(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn sqrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sqrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn hypot(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __hypot(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn cbrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cbrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ceil(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __ceil(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fabs(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fabs(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn floor(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __floor(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmod(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fmod(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __isinf(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __finite(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn isinf(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn finite(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn drem(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __drem(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn significand(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __significand(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn copysign(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __copysign(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn __isnan(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn isnan(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn j0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn j1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn jn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __jn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn y0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn y1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn yn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __yn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn erf(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erf(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfc(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfc(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __lgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn gamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __gamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgamma_r(
        arg1: ::std::os::raw::c_double,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __lgamma_r(
        arg1: ::std::os::raw::c_double,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn rint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __rint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn nextafter(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __nextafter(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn nexttoward(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __nexttoward(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn remainder(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __remainder(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn scalbn(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __scalbn(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn ilogb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __ilogb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn scalbln(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_double;
    pub fn __scalbln(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_double;
    pub fn nearbyint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __nearbyint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn round(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __round(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn trunc(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __trunc(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn remquo(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
        __quo: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __remquo(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
        __quo: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn lrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn __llrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn lround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn __llround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn fdim(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fdim(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn fmax(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fmax(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn fmin(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fmin(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fpclassify(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __signbit(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn fma(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
        __z: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fma(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
        __z: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn scalb(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __scalb(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn acosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __acosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn asinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __asinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __atanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atan2f(
        __y: ::std::os::raw::c_float,
        __x: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __atan2f(
        __y: ::std::os::raw::c_float,
        __x: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn cosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __cosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn coshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __coshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn acoshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __acoshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn asinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __asinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __atanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn expf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __expf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn frexpf(
        __x: ::std::os::raw::c_float,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn __frexpf(
        __x: ::std::os::raw::c_float,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn ldexpf(
        __x: ::std::os::raw::c_float,
        __exponent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn __ldexpf(
        __x: ::std::os::raw::c_float,
        __exponent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn logf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __logf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log10f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log10f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn modff(
        __x: ::std::os::raw::c_float,
        __iptr: *mut ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __modff(
        __x: ::std::os::raw::c_float,
        __iptr: *mut ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn expm1f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __expm1f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log1pf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log1pf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn logbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __logbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn exp2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __exp2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn powf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __powf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn sqrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sqrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn hypotf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __hypotf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn cbrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __cbrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn ceilf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __ceilf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn fabsf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __fabsf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn floorf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __floorf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn fmodf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __fmodf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __isinff(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn __finitef(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn isinff(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn finitef(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn dremf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __dremf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn significandf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __significandf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn copysignf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __copysignf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_float;
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_float;
    pub fn __isnanf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn isnanf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn j0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __j0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn j1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __j1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn jnf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __jnf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn y0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __y0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn y1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __y1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn ynf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __ynf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn erff(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __erff(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn erfcf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __erfcf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn lgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __lgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn gammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __gammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn lgammaf_r(
        arg1: ::std::os::raw::c_float,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn __lgammaf_r(
        arg1: ::std::os::raw::c_float,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn rintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __rintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn nextafterf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __nextafterf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn nexttowardf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_float;
    pub fn __nexttowardf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_float;
    pub fn remainderf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __remainderf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn scalbnf(
        __x: ::std::os::raw::c_float,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn __scalbnf(
        __x: ::std::os::raw::c_float,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn ilogbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn __ilogbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn scalblnf(
        __x: ::std::os::raw::c_float,
        __n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_float;
    pub fn __scalblnf(
        __x: ::std::os::raw::c_float,
        __n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_float;
    pub fn nearbyintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __nearbyintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn roundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __roundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn truncf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __truncf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn remquof(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
        __quo: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn __remquof(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
        __quo: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_float;
    pub fn lrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn __lrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn llrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_longlong;
    pub fn __llrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_longlong;
    pub fn lroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn __lroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn llroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_longlong;
    pub fn __llroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_longlong;
    pub fn fdimf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __fdimf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn fmaxf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __fmaxf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn fminf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __fminf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __fpclassifyf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn __signbitf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn fmaf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
        __z: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __fmaf(
        __x: ::std::os::raw::c_float,
        __y: ::std::os::raw::c_float,
        __z: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn scalbf(
        __x: ::std::os::raw::c_float,
        __n: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn __scalbf(
        __x: ::std::os::raw::c_float,
        __n: ::std::os::raw::c_float,
    ) -> ::std::os::raw::c_float;
    pub fn acosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan2l(
        __y: ::std::os::raw::c_double,
        __x: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __atan2l(
        __y: ::std::os::raw::c_double,
        __x: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn cosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn coshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __coshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acoshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acoshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn expl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn frexpl(
        __x: ::std::os::raw::c_double,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __frexpl(
        __x: ::std::os::raw::c_double,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn ldexpl(
        __x: ::std::os::raw::c_double,
        __exponent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __ldexpl(
        __x: ::std::os::raw::c_double,
        __exponent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn logl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log10l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log10l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn modfl(
        __x: ::std::os::raw::c_double,
        __iptr: *mut ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __modfl(
        __x: ::std::os::raw::c_double,
        __iptr: *mut ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn expm1l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expm1l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log1pl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log1pl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn powl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __powl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn sqrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sqrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn hypotl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __hypotl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn cbrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cbrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ceill(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __ceill(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fabsl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fabsl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn floorl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __floorl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmodl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fmodl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __isinfl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __finitel(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn isinfl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn finitel(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn dreml(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __dreml(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn significandl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __significandl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn copysignl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __copysignl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn __isnanl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn isnanl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn j0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn j1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn jnl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __jnl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn y0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn y1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ynl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __ynl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn erfl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfcl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfcl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __lgammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tgammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tgammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn gammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __gammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgammal_r(
        arg1: ::std::os::raw::c_double,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __lgammal_r(
        arg1: ::std::os::raw::c_double,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn rintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __rintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn nextafterl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __nextafterl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn nexttowardl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __nexttowardl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn remainderl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __remainderl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn scalbnl(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __scalbnl(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn ilogbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __ilogbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn scalblnl(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_double;
    pub fn __scalblnl(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_double;
    pub fn nearbyintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __nearbyintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn roundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __roundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn truncl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __truncl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn remquol(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
        __quo: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn __remquol(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
        __quo: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_double;
    pub fn lrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn __llrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn lroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn __llroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn fdiml(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fdiml(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn fmaxl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fmaxl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn fminl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fminl(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fpclassifyl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __signbitl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn fmal(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
        __z: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __fmal(
        __x: ::std::os::raw::c_double,
        __y: ::std::os::raw::c_double,
        __z: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn scalbl(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn __scalbl(
        __x: ::std::os::raw::c_double,
        __n: ::std::os::raw::c_double,
    ) -> ::std::os::raw::c_double;
    pub fn matherr(__exc: *mut Struct_exception) -> ::std::os::raw::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::std::os::raw::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const Struct_tm,
    ) -> size_t;
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const Struct_tm,
        __loc: __locale_t,
    ) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::std::os::raw::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn asctime_r(
        __tp: *const Struct_tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn tzset();
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nanosleep(
        __requested_time: *const Struct_timespec,
        __remaining: *mut Struct_timespec,
    ) -> ::std::os::raw::c_int;
    pub fn clock_getres(
        __clock_id: clockid_t,
        __res: *mut Struct_timespec,
    ) -> ::std::os::raw::c_int;
    pub fn clock_gettime(
        __clock_id: clockid_t,
        __tp: *mut Struct_timespec,
    ) -> ::std::os::raw::c_int;
    pub fn clock_settime(
        __clock_id: clockid_t,
        __tp: *const Struct_timespec,
    ) -> ::std::os::raw::c_int;
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const Struct_timespec,
        __rem: *mut Struct_timespec,
    ) -> ::std::os::raw::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut Struct_sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const Struct_itimerspec,
        __ovalue: *mut Struct_itimerspec,
    ) -> ::std::os::raw::c_int;
    pub fn timer_gettime(
        __timerid: timer_t,
        __value: *mut Struct_itimerspec,
    ) -> ::std::os::raw::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn timespec_get(
        __ts: *mut Struct_timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
    pub fn _win_insque(__elem: *mut ::std::os::raw::c_void, __prev: *mut ::std::os::raw::c_void);
    pub fn _win_remque(__elem: *mut ::std::os::raw::c_void);
    pub fn _win_hsearch(
        __item: PLIBC_SEARCH_ENTRY,
        __action: PLIBC_SEARCH_ACTION,
    ) -> *mut PLIBC_SEARCH_ENTRY;
    pub fn _win_hcreate(__nel: size_t) -> ::std::os::raw::c_int;
    pub fn _win_hdestroy();
    pub fn _win_hsearch_r(
        __item: PLIBC_SEARCH_ENTRY,
        __action: PLIBC_SEARCH_ACTION,
        __retval: *mut *mut PLIBC_SEARCH_ENTRY,
        __htab: *mut Struct_PLIBC_SEARCH_hsearch_data,
    ) -> ::std::os::raw::c_int;
    pub fn _win_hcreate_r(
        __nel: size_t,
        __htab: *mut Struct_PLIBC_SEARCH_hsearch_data,
    ) -> ::std::os::raw::c_int;
    pub fn _win_hdestroy_r(__htab: *mut Struct_PLIBC_SEARCH_hsearch_data);
    pub fn _win_tsearch(
        __key: *const ::std::os::raw::c_void,
        __rootp: *mut *mut ::std::os::raw::c_void,
        __compar: PLIBC_SEARCH__compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn _win_tfind(
        __key: *const ::std::os::raw::c_void,
        __rootp: *const *mut ::std::os::raw::c_void,
        __compar: PLIBC_SEARCH__compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn _win_tdelete(
        __key: *const ::std::os::raw::c_void,
        __rootp: *mut *mut ::std::os::raw::c_void,
        __compar: PLIBC_SEARCH__compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn _win_twalk(__root: *const ::std::os::raw::c_void, __action: PLIBC_SEARCH__action_fn_t);
    pub fn _win_tdestroy(__root: *mut ::std::os::raw::c_void, __freefct: PLIBC_SEARCH__free_fn_t);
    pub fn _win_lfind(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: *mut size_t,
        __size: size_t,
        __compar: PLIBC_SEARCH__compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn _win_lsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *mut ::std::os::raw::c_void,
        __nmemb: *mut size_t,
        __size: size_t,
        __compar: PLIBC_SEARCH__compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn localeconv() -> *mut Struct_lconv;
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: __locale_t,
    ) -> __locale_t;
    pub fn duplocale(__dataset: __locale_t) -> __locale_t;
    pub fn freelocale(__dataset: __locale_t);
    pub fn uselocale(__dataset: __locale_t) -> __locale_t;
    pub fn mmap(
        __addr: *mut ::std::os::raw::c_void,
        __len: size_t,
        __prot: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn munmap(__addr: *mut ::std::os::raw::c_void, __len: size_t) -> ::std::os::raw::c_int;
    pub fn mprotect(
        __addr: *mut ::std::os::raw::c_void,
        __len: size_t,
        __prot: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn msync(
        __addr: *mut ::std::os::raw::c_void,
        __len: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn madvise(
        __addr: *mut ::std::os::raw::c_void,
        __len: size_t,
        __advice: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn posix_madvise(
        __addr: *mut ::std::os::raw::c_void,
        __len: size_t,
        __advice: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn mlock(__addr: *const ::std::os::raw::c_void, __len: size_t) -> ::std::os::raw::c_int;
    pub fn munlock(__addr: *const ::std::os::raw::c_void, __len: size_t) -> ::std::os::raw::c_int;
    pub fn mlockall(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn munlockall() -> ::std::os::raw::c_int;
    pub fn mincore(
        __start: *mut ::std::os::raw::c_void,
        __len: size_t,
        __vec: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
    pub fn shm_open(
        __name: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        __mode: mode_t,
    ) -> ::std::os::raw::c_int;
    pub fn shm_unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn GNUNET_get_log_skip() -> ::std::os::raw::c_int;
    pub fn GNUNET_get_log_call_status(
        caller_level: ::std::os::raw::c_int,
        comp: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        function: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_log_nocheck(
        kind: Enum_GNUNET_ErrorType,
        message: *const ::std::os::raw::c_char,
        ...
    );
    pub fn GNUNET_log_from_nocheck(
        kind: Enum_GNUNET_ErrorType,
        comp: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        ...
    );
    pub fn GNUNET_log_config_missing(
        kind: Enum_GNUNET_ErrorType,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
    );
    pub fn GNUNET_log_config_invalid(
        kind: Enum_GNUNET_ErrorType,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        required: *const ::std::os::raw::c_char,
    );
    pub fn GNUNET_abort();
    pub fn GNUNET_log_skip(n: ::std::os::raw::c_int, check_reset: ::std::os::raw::c_int);
    pub fn GNUNET_log_setup(
        comp: *const ::std::os::raw::c_char,
        loglevel: *const ::std::os::raw::c_char,
        logfile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_logger_add(logger: GNUNET_Logger, logger_cls: *mut ::std::os::raw::c_void);
    pub fn GNUNET_logger_remove(logger: GNUNET_Logger, logger_cls: *mut ::std::os::raw::c_void);
    pub fn GNUNET_h2s(hc: *const Struct_GNUNET_HashCode) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_h2s_full(hc: *const Struct_GNUNET_HashCode) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_i2s(pid: *const Struct_GNUNET_PeerIdentity) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_i2s_full(pid: *const Struct_GNUNET_PeerIdentity)
        -> *const ::std::os::raw::c_char;
    pub fn GNUNET_a2s(
        addr: *const Struct_sockaddr,
        addrlen: socklen_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_error_type_to_string(
        kind: Enum_GNUNET_ErrorType,
    ) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_ntohll(n: uint64_t) -> uint64_t;
    pub fn GNUNET_htonll(n: uint64_t) -> uint64_t;
    pub fn GNUNET_hton_double(d: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn GNUNET_ntoh_double(d: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn GNUNET_snprintf(
        buf: *mut ::std::os::raw::c_char,
        size: size_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_asprintf(
        buf: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_xmalloc_(
        size: size_t,
        filename: *const ::std::os::raw::c_char,
        linenumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_xmemdup_(
        buf: *const ::std::os::raw::c_void,
        size: size_t,
        filename: *const ::std::os::raw::c_char,
        linenumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_xmalloc_unchecked_(
        size: size_t,
        filename: *const ::std::os::raw::c_char,
        linenumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_xrealloc_(
        ptr: *mut ::std::os::raw::c_void,
        n: size_t,
        filename: *const ::std::os::raw::c_char,
        linenumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_xfree_(
        ptr: *mut ::std::os::raw::c_void,
        filename: *const ::std::os::raw::c_char,
        linenumber: ::std::os::raw::c_int,
    );
    pub fn GNUNET_xstrdup_(
        str: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        linenumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_xstrndup_(
        str: *const ::std::os::raw::c_char,
        len: size_t,
        filename: *const ::std::os::raw::c_char,
        linenumber: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_xgrow_(
        old: *mut *mut ::std::os::raw::c_void,
        elementSize: size_t,
        oldCount: *mut ::std::os::raw::c_uint,
        newCount: ::std::os::raw::c_uint,
        filename: *const ::std::os::raw::c_char,
        linenumber: ::std::os::raw::c_int,
    );
    pub fn GNUNET_copy_message(
        msg: *const Struct_GNUNET_MessageHeader,
    ) -> *mut Struct_GNUNET_MessageHeader;
    pub fn GNUNET_TIME_relative_get_zero_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_get_zero_() -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_relative_get_unit_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_millisecond_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_second_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_minute_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_hour_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_forever_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_get_forever_() -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_absolute_get() -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_relative_to_absolute(
        rel: Struct_GNUNET_TIME_Relative,
    ) -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_relative_min(
        t1: Struct_GNUNET_TIME_Relative,
        t2: Struct_GNUNET_TIME_Relative,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_max(
        t1: Struct_GNUNET_TIME_Relative,
        t2: Struct_GNUNET_TIME_Relative,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_min(
        t1: Struct_GNUNET_TIME_Absolute,
        t2: Struct_GNUNET_TIME_Absolute,
    ) -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_absolute_max(
        t1: Struct_GNUNET_TIME_Absolute,
        t2: Struct_GNUNET_TIME_Absolute,
    ) -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_absolute_get_remaining(
        future: Struct_GNUNET_TIME_Absolute,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_calculate_eta(
        start: Struct_GNUNET_TIME_Absolute,
        finished: uint64_t,
        total: uint64_t,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_get_difference(
        start: Struct_GNUNET_TIME_Absolute,
        end: Struct_GNUNET_TIME_Absolute,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_get_duration(
        whence: Struct_GNUNET_TIME_Absolute,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_add(
        start: Struct_GNUNET_TIME_Absolute,
        duration: Struct_GNUNET_TIME_Relative,
    ) -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_absolute_subtract(
        start: Struct_GNUNET_TIME_Absolute,
        duration: Struct_GNUNET_TIME_Relative,
    ) -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_relative_multiply(
        rel: Struct_GNUNET_TIME_Relative,
        factor: ::std::os::raw::c_uint,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_divide(
        rel: Struct_GNUNET_TIME_Relative,
        factor: ::std::os::raw::c_uint,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_add(
        a1: Struct_GNUNET_TIME_Relative,
        a2: Struct_GNUNET_TIME_Relative,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_subtract(
        a1: Struct_GNUNET_TIME_Relative,
        a2: Struct_GNUNET_TIME_Relative,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_hton(
        a: Struct_GNUNET_TIME_Relative,
    ) -> Struct_GNUNET_TIME_RelativeNBO;
    pub fn GNUNET_TIME_relative_ntoh(
        a: Struct_GNUNET_TIME_RelativeNBO,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_hton(
        a: Struct_GNUNET_TIME_Absolute,
    ) -> Struct_GNUNET_TIME_AbsoluteNBO;
    pub fn GNUNET_TIME_absolute_ntoh(
        a: Struct_GNUNET_TIME_AbsoluteNBO,
    ) -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_set_offset(offset: ::std::os::raw::c_longlong);
    pub fn GNUNET_TIME_get_offset() -> ::std::os::raw::c_longlong;
    pub fn GNUNET_TIME_get_current_year() -> ::std::os::raw::c_uint;
    pub fn GNUNET_TIME_year_to_time(year: ::std::os::raw::c_uint) -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_time_to_year(at: Struct_GNUNET_TIME_Absolute) -> ::std::os::raw::c_uint;
    pub fn GNUNET_CONFIGURATION_create() -> *mut Struct_GNUNET_CONFIGURATION_Handle;
    pub fn GNUNET_CONFIGURATION_dup(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ) -> *mut Struct_GNUNET_CONFIGURATION_Handle;
    pub fn GNUNET_CONFIGURATION_destroy(cfg: *mut Struct_GNUNET_CONFIGURATION_Handle);
    pub fn GNUNET_CONFIGURATION_load(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_load_from(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        defaults_d: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_parse(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_serialize(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        size: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_CONFIGURATION_deserialize(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        mem: *const ::std::os::raw::c_char,
        size: size_t,
        allow_inline: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_write(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_write_diffs(
        cfg_default: *const Struct_GNUNET_CONFIGURATION_Handle,
        cfg_new: *const Struct_GNUNET_CONFIGURATION_Handle,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_get_diff(
        cfg_default: *const Struct_GNUNET_CONFIGURATION_Handle,
        cfg_new: *const Struct_GNUNET_CONFIGURATION_Handle,
    ) -> *mut Struct_GNUNET_CONFIGURATION_Handle;
    pub fn GNUNET_CONFIGURATION_is_dirty(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_iterate(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        iter: GNUNET_CONFIGURATION_Iterator,
        iter_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_CONFIGURATION_iterate_sections(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        iter: GNUNET_CONFIGURATION_Section_Iterator,
        iter_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_CONFIGURATION_remove_section(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
    );
    pub fn GNUNET_CONFIGURATION_get_value_number(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        number: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_time(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        time: *mut Struct_GNUNET_TIME_Relative,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_size(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_have_value(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_string(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_filename(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_iterate_value_filenames(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        cb: GNUNET_FileNameCallback,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_iterate_section_values(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        iter: GNUNET_CONFIGURATION_Iterator,
        iter_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_CONFIGURATION_get_value_choice(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        choices: *const *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_yesno(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_expand_dollar(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        orig: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_CONFIGURATION_set_value_number(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        number: ::std::os::raw::c_ulonglong,
    );
    pub fn GNUNET_CONFIGURATION_set_value_string(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
    pub fn GNUNET_CONFIGURATION_remove_value_filename(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONFIGURATION_append_value_filename(
        cfg: *mut Struct_GNUNET_CONFIGURATION_Handle,
        section: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_handle_invalid(
        h: *const Struct_GNUNET_DISK_FileHandle,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_file_test(fil: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_file_backup(fil: *const ::std::os::raw::c_char);
    pub fn GNUNET_DISK_file_seek(
        h: *const Struct_GNUNET_DISK_FileHandle,
        offset: off_t,
        whence: Enum_GNUNET_DISK_Seek,
    ) -> off_t;
    pub fn GNUNET_DISK_file_size(
        filename: *const ::std::os::raw::c_char,
        size: *mut uint64_t,
        include_symbolic_links: ::std::os::raw::c_int,
        single_file_mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_file_get_identifiers(
        filename: *const ::std::os::raw::c_char,
        dev: *mut uint64_t,
        ino: *mut uint64_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_mktemp(t: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_DISK_mkdtemp(t: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_DISK_file_open(
        _fn: *const ::std::os::raw::c_char,
        flags: Enum_GNUNET_DISK_OpenFlags,
        perm: Enum_GNUNET_DISK_AccessPermissions,
    ) -> *mut Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_file_handle_size(
        fh: *mut Struct_GNUNET_DISK_FileHandle,
        size: *mut off_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_pipe(
        blocking_read: ::std::os::raw::c_int,
        blocking_write: ::std::os::raw::c_int,
        inherit_read: ::std::os::raw::c_int,
        inherit_write: ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_DISK_PipeHandle;
    pub fn GNUNET_DISK_pipe_from_fd(
        blocking_read: ::std::os::raw::c_int,
        blocking_write: ::std::os::raw::c_int,
        fd: *mut ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_DISK_PipeHandle;
    pub fn GNUNET_DISK_pipe_close(p: *mut Struct_GNUNET_DISK_PipeHandle) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_pipe_close_end(
        p: *mut Struct_GNUNET_DISK_PipeHandle,
        end: Enum_GNUNET_DISK_PipeEnd,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_pipe_detach_end(
        p: *mut Struct_GNUNET_DISK_PipeHandle,
        end: Enum_GNUNET_DISK_PipeEnd,
    ) -> *mut Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_file_close(h: *mut Struct_GNUNET_DISK_FileHandle) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_pipe_handle(
        p: *const Struct_GNUNET_DISK_PipeHandle,
        n: Enum_GNUNET_DISK_PipeEnd,
    ) -> *const Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_fix_permissions(
        _fn: *const ::std::os::raw::c_char,
        require_uid_match: ::std::os::raw::c_int,
        require_gid_match: ::std::os::raw::c_int,
    );
    pub fn GNUNET_DISK_get_handle_from_int_fd(
        fno: ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_get_handle_from_native(fd: *mut FILE) -> *mut Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_file_read(
        h: *const Struct_GNUNET_DISK_FileHandle,
        result: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> ssize_t;
    pub fn GNUNET_DISK_file_read_non_blocking(
        h: *const Struct_GNUNET_DISK_FileHandle,
        result: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> ssize_t;
    pub fn GNUNET_DISK_fn_read(
        _fn: *const ::std::os::raw::c_char,
        result: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> ssize_t;
    pub fn GNUNET_DISK_file_write(
        h: *const Struct_GNUNET_DISK_FileHandle,
        buffer: *const ::std::os::raw::c_void,
        n: size_t,
    ) -> ssize_t;
    pub fn GNUNET_DISK_file_write_blocking(
        h: *const Struct_GNUNET_DISK_FileHandle,
        buffer: *const ::std::os::raw::c_void,
        n: size_t,
    ) -> ssize_t;
    pub fn GNUNET_DISK_fn_write(
        _fn: *const ::std::os::raw::c_char,
        buffer: *const ::std::os::raw::c_void,
        n: size_t,
        mode: Enum_GNUNET_DISK_AccessPermissions,
    ) -> ssize_t;
    pub fn GNUNET_DISK_file_copy(
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_directory_scan(
        dir_name: *const ::std::os::raw::c_char,
        callback: GNUNET_FileNameCallback,
        callback_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_directory_iterator_next(
        iter: *mut Struct_GNUNET_DISK_DirectoryIterator,
        can: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_directory_iterator_start(
        prio: Enum_GNUNET_SCHEDULER_Priority,
        dir_name: *const ::std::os::raw::c_char,
        callback: GNUNET_DISK_DirectoryIteratorCallback,
        callback_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_directory_create_for_file(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_directory_test(
        fil: *const ::std::os::raw::c_char,
        is_readable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_directory_remove(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_directory_create(
        dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_file_lock(
        fh: *mut Struct_GNUNET_DISK_FileHandle,
        lock_start: off_t,
        lock_end: off_t,
        excl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_file_unlock(
        fh: *mut Struct_GNUNET_DISK_FileHandle,
        unlock_start: off_t,
        unlock_end: off_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_filename_canonicalize(_fn: *mut ::std::os::raw::c_char);
    pub fn GNUNET_DISK_file_change_owner(
        filename: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_file_map(
        h: *const Struct_GNUNET_DISK_FileHandle,
        m: *mut *mut Struct_GNUNET_DISK_MapHandle,
        access: Enum_GNUNET_DISK_MapType,
        len: size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_DISK_file_unmap(h: *mut Struct_GNUNET_DISK_MapHandle) -> ::std::os::raw::c_int;
    pub fn GNUNET_DISK_file_sync(h: *const Struct_GNUNET_DISK_FileHandle) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_test_pf(pf: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_shorten_unixpath(
        unixpath: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_NETWORK_socket_accept(
        desc: *const Struct_GNUNET_NETWORK_Handle,
        address: *mut Struct_sockaddr,
        address_len: *mut socklen_t,
    ) -> *mut Struct_GNUNET_NETWORK_Handle;
    pub fn GNUNET_NETWORK_socket_box_native(
        fd: ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_NETWORK_Handle;
    pub fn GNUNET_NETWORK_socket_set_blocking(
        fd: *mut Struct_GNUNET_NETWORK_Handle,
        doBlock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_bind(
        desc: *mut Struct_GNUNET_NETWORK_Handle,
        address: *const Struct_sockaddr,
        address_len: socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_close(
        desc: *mut Struct_GNUNET_NETWORK_Handle,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_free_memory_only_(desc: *mut Struct_GNUNET_NETWORK_Handle);
    pub fn GNUNET_NETWORK_socket_connect(
        desc: *const Struct_GNUNET_NETWORK_Handle,
        address: *const Struct_sockaddr,
        address_len: socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_getsockopt(
        desc: *const Struct_GNUNET_NETWORK_Handle,
        level: ::std::os::raw::c_int,
        optname: ::std::os::raw::c_int,
        optval: *mut ::std::os::raw::c_void,
        optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_listen(
        desc: *const Struct_GNUNET_NETWORK_Handle,
        backlog: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_recvfrom_amount(
        desc: *const Struct_GNUNET_NETWORK_Handle,
    ) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_recvfrom(
        desc: *const Struct_GNUNET_NETWORK_Handle,
        buffer: *mut ::std::os::raw::c_void,
        length: size_t,
        src_addr: *mut Struct_sockaddr,
        addrlen: *mut socklen_t,
    ) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_recv(
        desc: *const Struct_GNUNET_NETWORK_Handle,
        buffer: *mut ::std::os::raw::c_void,
        length: size_t,
    ) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_select(
        rfds: *mut Struct_GNUNET_NETWORK_FDSet,
        wfds: *mut Struct_GNUNET_NETWORK_FDSet,
        efds: *mut Struct_GNUNET_NETWORK_FDSet,
        timeout: Struct_GNUNET_TIME_Relative,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_send(
        desc: *const Struct_GNUNET_NETWORK_Handle,
        buffer: *const ::std::os::raw::c_void,
        length: size_t,
    ) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_sendto(
        desc: *const Struct_GNUNET_NETWORK_Handle,
        message: *const ::std::os::raw::c_void,
        length: size_t,
        dest_addr: *const Struct_sockaddr,
        dest_len: socklen_t,
    ) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_setsockopt(
        fd: *mut Struct_GNUNET_NETWORK_Handle,
        level: ::std::os::raw::c_int,
        option_name: ::std::os::raw::c_int,
        option_value: *const ::std::os::raw::c_void,
        option_len: socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_shutdown(
        desc: *mut Struct_GNUNET_NETWORK_Handle,
        how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_disable_corking(
        desc: *mut Struct_GNUNET_NETWORK_Handle,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_socket_create(
        domain: ::std::os::raw::c_int,
        _type: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_NETWORK_Handle;
    pub fn GNUNET_NETWORK_fdset_zero(fds: *mut Struct_GNUNET_NETWORK_FDSet);
    pub fn GNUNET_NETWORK_fdset_set(
        fds: *mut Struct_GNUNET_NETWORK_FDSet,
        desc: *const Struct_GNUNET_NETWORK_Handle,
    );
    pub fn GNUNET_NETWORK_fdset_isset(
        fds: *const Struct_GNUNET_NETWORK_FDSet,
        desc: *const Struct_GNUNET_NETWORK_Handle,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_fdset_add(
        dst: *mut Struct_GNUNET_NETWORK_FDSet,
        src: *const Struct_GNUNET_NETWORK_FDSet,
    );
    pub fn GNUNET_NETWORK_fdset_copy(
        to: *mut Struct_GNUNET_NETWORK_FDSet,
        from: *const Struct_GNUNET_NETWORK_FDSet,
    );
    pub fn GNUNET_NETWORK_get_fd(desc: *mut Struct_GNUNET_NETWORK_Handle) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_get_addr(desc: *mut Struct_GNUNET_NETWORK_Handle)
        -> *mut Struct_sockaddr;
    pub fn GNUNET_NETWORK_get_addrlen(desc: *mut Struct_GNUNET_NETWORK_Handle) -> socklen_t;
    pub fn GNUNET_NETWORK_fdset_copy_native(
        to: *mut Struct_GNUNET_NETWORK_FDSet,
        from: *const fd_set,
        nfds: ::std::os::raw::c_int,
    );
    pub fn GNUNET_NETWORK_fdset_set_native(
        to: *mut Struct_GNUNET_NETWORK_FDSet,
        nfd: ::std::os::raw::c_int,
    );
    pub fn GNUNET_NETWORK_fdset_test_native(
        to: *const Struct_GNUNET_NETWORK_FDSet,
        nfd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_fdset_handle_set(
        fds: *mut Struct_GNUNET_NETWORK_FDSet,
        h: *const Struct_GNUNET_DISK_FileHandle,
    );
    pub fn GNUNET_NETWORK_fdset_handle_isset(
        fds: *const Struct_GNUNET_NETWORK_FDSet,
        h: *const Struct_GNUNET_DISK_FileHandle,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_fdset_overlap(
        fds1: *const Struct_GNUNET_NETWORK_FDSet,
        fds2: *const Struct_GNUNET_NETWORK_FDSet,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_NETWORK_fdset_create() -> *mut Struct_GNUNET_NETWORK_FDSet;
    pub fn GNUNET_NETWORK_fdset_destroy(fds: *mut Struct_GNUNET_NETWORK_FDSet);
    pub fn GNUNET_SCHEDULER_run(task: GNUNET_SCHEDULER_Task, task_cls: *mut ::std::os::raw::c_void);
    pub fn GNUNET_SCHEDULER_shutdown();
    pub fn GNUNET_SCHEDULER_get_load(p: Enum_GNUNET_SCHEDULER_Priority) -> ::std::os::raw::c_uint;
    pub fn GNUNET_SCHEDULER_get_reason() -> Enum_GNUNET_SCHEDULER_Reason;
    pub fn GNUNET_SCHEDULER_cancel(
        task: GNUNET_SCHEDULER_TaskIdentifier,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_SCHEDULER_add_continuation(
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
        reason: Enum_GNUNET_SCHEDULER_Reason,
    );
    pub fn GNUNET_SCHEDULER_add_continuation_with_priority(
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
        reason: Enum_GNUNET_SCHEDULER_Reason,
        priority: Enum_GNUNET_SCHEDULER_Priority,
    );
    pub fn GNUNET_SCHEDULER_add_with_priority(
        prio: Enum_GNUNET_SCHEDULER_Priority,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_now(
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_now_with_lifeness(
        lifeness: ::std::os::raw::c_int,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_delayed(
        delay: Struct_GNUNET_TIME_Relative,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_delayed_with_priority(
        delay: Struct_GNUNET_TIME_Relative,
        priority: Enum_GNUNET_SCHEDULER_Priority,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_read_net(
        delay: Struct_GNUNET_TIME_Relative,
        rfd: *mut Struct_GNUNET_NETWORK_Handle,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_read_net_with_priority(
        delay: Struct_GNUNET_TIME_Relative,
        priority: Enum_GNUNET_SCHEDULER_Priority,
        rfd: *mut Struct_GNUNET_NETWORK_Handle,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_write_net(
        delay: Struct_GNUNET_TIME_Relative,
        wfd: *mut Struct_GNUNET_NETWORK_Handle,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_net_with_priority(
        delay: Struct_GNUNET_TIME_Relative,
        priority: Enum_GNUNET_SCHEDULER_Priority,
        fd: *mut Struct_GNUNET_NETWORK_Handle,
        on_read: ::std::os::raw::c_int,
        on_write: ::std::os::raw::c_int,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_read_file(
        delay: Struct_GNUNET_TIME_Relative,
        rfd: *const Struct_GNUNET_DISK_FileHandle,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_write_file(
        delay: Struct_GNUNET_TIME_Relative,
        wfd: *const Struct_GNUNET_DISK_FileHandle,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_file_with_priority(
        delay: Struct_GNUNET_TIME_Relative,
        priority: Enum_GNUNET_SCHEDULER_Priority,
        fd: *const Struct_GNUNET_DISK_FileHandle,
        on_read: ::std::os::raw::c_int,
        on_write: ::std::os::raw::c_int,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_add_select(
        prio: Enum_GNUNET_SCHEDULER_Priority,
        delay: Struct_GNUNET_TIME_Relative,
        rs: *const Struct_GNUNET_NETWORK_FDSet,
        ws: *const Struct_GNUNET_NETWORK_FDSet,
        task: GNUNET_SCHEDULER_Task,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> GNUNET_SCHEDULER_TaskIdentifier;
    pub fn GNUNET_SCHEDULER_set_select(
        new_select: GNUNET_SCHEDULER_select,
        new_select_cls: *mut ::std::os::raw::c_void,
    );
    pub fn gpg_err_init() -> gpg_error_t;
    pub fn gpg_err_deinit(mode: ::std::os::raw::c_int);
    pub fn gpgrt_set_syscall_clamp(
        pre: ::std::option::Option<extern "C" fn()>,
        post: ::std::option::Option<extern "C" fn()>,
    );
    pub fn gpgrt_set_alloc_func(
        f: ::std::option::Option<
            unsafe extern "C" fn(
                a: *mut ::std::os::raw::c_void,
                n: size_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
    );
    pub fn gpg_strerror(err: gpg_error_t) -> *const ::std::os::raw::c_char;
    pub fn gpg_strerror_r(
        err: gpg_error_t,
        buf: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpg_strsource(err: gpg_error_t) -> *const ::std::os::raw::c_char;
    pub fn gpg_err_code_from_errno(err: ::std::os::raw::c_int) -> gpg_err_code_t;
    pub fn gpg_err_code_to_errno(code: gpg_err_code_t) -> ::std::os::raw::c_int;
    pub fn gpg_err_code_from_syserror() -> gpg_err_code_t;
    pub fn gpg_err_set_errno(err: ::std::os::raw::c_int);
    pub fn gpgrt_check_version(
        req_version: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    pub fn gpg_error_check_version(
        req_version: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    pub fn gpgrt_lock_init(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_lock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_trylock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_unlock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_destroy(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_yield() -> gpg_err_code_t;
    pub fn gpgrt_fopen(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_mopen(
        data: *mut ::std::os::raw::c_void,
        data_n: size_t,
        data_len: size_t,
        grow: ::std::os::raw::c_uint,
        func_realloc: ::std::option::Option<
            unsafe extern "C" fn(
                mem: *mut ::std::os::raw::c_void,
                size: size_t,
            ) -> *mut ::std::os::raw::c_void,
        >,
        func_free: ::std::option::Option<unsafe extern "C" fn(mem: *mut ::std::os::raw::c_void)>,
        mode: *const ::std::os::raw::c_char,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_fopenmem(memlimit: size_t, mode: *const ::std::os::raw::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_fopenmem_init(
        memlimit: size_t,
        mode: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        datalen: size_t,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_fdopen(
        filedes: ::std::os::raw::c_int,
        mode: *const ::std::os::raw::c_char,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_fdopen_nc(
        filedes: ::std::os::raw::c_int,
        mode: *const ::std::os::raw::c_char,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_sysopen(
        syshd: *mut gpgrt_syshd_t,
        mode: *const ::std::os::raw::c_char,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_sysopen_nc(
        syshd: *mut gpgrt_syshd_t,
        mode: *const ::std::os::raw::c_char,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_fpopen(fp: *mut FILE, mode: *const ::std::os::raw::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_fpopen_nc(fp: *mut FILE, mode: *const ::std::os::raw::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_freopen(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        stream: gpgrt_stream_t,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_fopencookie(
        cookie: *mut ::std::os::raw::c_void,
        mode: *const ::std::os::raw::c_char,
        functions: gpgrt_cookie_io_functions_t,
    ) -> gpgrt_stream_t;
    pub fn gpgrt_fclose(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fclose_snatch(
        stream: gpgrt_stream_t,
        r_buffer: *mut *mut ::std::os::raw::c_void,
        r_buflen: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_onclose(
        stream: gpgrt_stream_t,
        mode: ::std::os::raw::c_int,
        fnc: ::std::option::Option<
            unsafe extern "C" fn(arg1: gpgrt_stream_t, arg2: *mut ::std::os::raw::c_void),
        >,
        fnc_value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_fileno(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fileno_unlocked(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_syshd(stream: gpgrt_stream_t, syshd: *mut gpgrt_syshd_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_syshd_unlocked(
        stream: gpgrt_stream_t,
        syshd: *mut gpgrt_syshd_t,
    ) -> ::std::os::raw::c_int;
    pub fn _gpgrt_set_std_fd(no: ::std::os::raw::c_int, fd: ::std::os::raw::c_int);
    pub fn _gpgrt_get_std_stream(fd: ::std::os::raw::c_int) -> gpgrt_stream_t;
    pub fn gpgrt_flockfile(stream: gpgrt_stream_t);
    pub fn gpgrt_ftrylockfile(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_funlockfile(stream: gpgrt_stream_t);
    pub fn gpgrt_feof(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_feof_unlocked(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_ferror(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_ferror_unlocked(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_clearerr(stream: gpgrt_stream_t);
    pub fn gpgrt_clearerr_unlocked(stream: gpgrt_stream_t);
    pub fn _gpgrt_pending(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn _gpgrt_pending_unlocked(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fflush(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fseek(
        stream: gpgrt_stream_t,
        offset: ::std::os::raw::c_long,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_fseeko(
        stream: gpgrt_stream_t,
        offset: gpgrt_off_t,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_ftell(stream: gpgrt_stream_t) -> ::std::os::raw::c_long;
    pub fn gpgrt_ftello(stream: gpgrt_stream_t) -> gpgrt_off_t;
    pub fn gpgrt_rewind(stream: gpgrt_stream_t);
    pub fn gpgrt_fgetc(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_fputc(c: ::std::os::raw::c_int, stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn _gpgrt_getc_underflow(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn _gpgrt_putc_overflow(
        c: ::std::os::raw::c_int,
        stream: gpgrt_stream_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_ungetc(c: ::std::os::raw::c_int, stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_read(
        stream: gpgrt_stream_t,
        buffer: *mut ::std::os::raw::c_void,
        bytes_to_read: size_t,
        bytes_read: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_write(
        stream: gpgrt_stream_t,
        buffer: *const ::std::os::raw::c_void,
        bytes_to_write: size_t,
        bytes_written: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_write_sanitized(
        stream: gpgrt_stream_t,
        buffer: *const ::std::os::raw::c_void,
        length: size_t,
        delimiters: *const ::std::os::raw::c_char,
        bytes_written: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_write_hexstring(
        stream: gpgrt_stream_t,
        buffer: *const ::std::os::raw::c_void,
        length: size_t,
        reserved: ::std::os::raw::c_int,
        bytes_written: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_fread(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
        nitems: size_t,
        stream: gpgrt_stream_t,
    ) -> size_t;
    pub fn gpgrt_fwrite(
        ptr: *const ::std::os::raw::c_void,
        size: size_t,
        memb: size_t,
        stream: gpgrt_stream_t,
    ) -> size_t;
    pub fn gpgrt_fgets(
        s: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        stream: gpgrt_stream_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn gpgrt_fputs(
        s: *const ::std::os::raw::c_char,
        stream: gpgrt_stream_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_fputs_unlocked(
        s: *const ::std::os::raw::c_char,
        stream: gpgrt_stream_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_getline(
        lineptr: *mut *mut ::std::os::raw::c_char,
        n: *mut size_t,
        stream: gpgrt_stream_t,
    ) -> ssize_t;
    pub fn gpgrt_read_line(
        stream: gpgrt_stream_t,
        addr_of_buffer: *mut *mut ::std::os::raw::c_char,
        length_of_buffer: *mut size_t,
        max_length: *mut size_t,
    ) -> ssize_t;
    pub fn gpgrt_free(a: *mut ::std::os::raw::c_void);
    pub fn gpgrt_fprintf(
        stream: gpgrt_stream_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_fprintf_unlocked(
        stream: gpgrt_stream_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_printf(format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn gpgrt_printf_unlocked(
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_vfprintf(
        stream: gpgrt_stream_t,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_vfprintf_unlocked(
        stream: gpgrt_stream_t,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_setvbuf(
        stream: gpgrt_stream_t,
        buf: *mut ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        size: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_setbuf(stream: gpgrt_stream_t, buf: *mut ::std::os::raw::c_char);
    pub fn gpgrt_set_binary(stream: gpgrt_stream_t);
    pub fn gpgrt_set_nonblock(
        stream: gpgrt_stream_t,
        onoff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_get_nonblock(stream: gpgrt_stream_t) -> ::std::os::raw::c_int;
    pub fn gpgrt_poll(
        fdlist: *mut gpgrt_poll_t,
        nfds: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_tmpfile() -> gpgrt_stream_t;
    pub fn gpgrt_opaque_set(stream: gpgrt_stream_t, opaque: *mut ::std::os::raw::c_void);
    pub fn gpgrt_opaque_get(stream: gpgrt_stream_t) -> *mut ::std::os::raw::c_void;
    pub fn gpgrt_fname_set(stream: gpgrt_stream_t, fname: *const ::std::os::raw::c_char);
    pub fn gpgrt_fname_get(stream: gpgrt_stream_t) -> *const ::std::os::raw::c_char;
    pub fn gpgrt_asprintf(
        r_buf: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_vasprintf(
        r_buf: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_bsprintf(
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
    pub fn gpgrt_vbsprintf(
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> *mut ::std::os::raw::c_char;
    pub fn gpgrt_snprintf(
        buf: *mut ::std::os::raw::c_char,
        bufsize: size_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn gpgrt_vsnprintf(
        buf: *mut ::std::os::raw::c_char,
        bufsize: size_t,
        format: *const ::std::os::raw::c_char,
        arg_ptr: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn gettimeofday(__tv: *mut Struct_timeval, __tz: __timezone_ptr_t)
        -> ::std::os::raw::c_int;
    pub fn settimeofday(
        __tv: *const Struct_timeval,
        __tz: *const Struct_timezone,
    ) -> ::std::os::raw::c_int;
    pub fn adjtime(
        __delta: *const Struct_timeval,
        __olddelta: *mut Struct_timeval,
    ) -> ::std::os::raw::c_int;
    pub fn getitimer(
        __which: __itimer_which_t,
        __value: *mut Struct_itimerval,
    ) -> ::std::os::raw::c_int;
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const Struct_itimerval,
        __old: *mut Struct_itimerval,
    ) -> ::std::os::raw::c_int;
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *mut Struct_timeval,
    ) -> ::std::os::raw::c_int;
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *mut Struct_timeval,
    ) -> ::std::os::raw::c_int;
    pub fn futimes(
        __fd: ::std::os::raw::c_int,
        __tvp: *mut Struct_timeval,
    ) -> ::std::os::raw::c_int;
    pub fn gcry_strerror(err: gcry_error_t) -> *const ::std::os::raw::c_char;
    pub fn gcry_strsource(err: gcry_error_t) -> *const ::std::os::raw::c_char;
    pub fn gcry_err_code_from_errno(err: ::std::os::raw::c_int) -> gcry_err_code_t;
    pub fn gcry_err_code_to_errno(code: gcry_err_code_t) -> ::std::os::raw::c_int;
    pub fn gcry_err_make_from_errno(
        source: gcry_err_source_t,
        err: ::std::os::raw::c_int,
    ) -> gcry_error_t;
    pub fn gcry_error_from_errno(err: ::std::os::raw::c_int) -> gcry_err_code_t;
    pub fn gcry_check_version(
        req_version: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    pub fn gcry_control(CMD: Enum_gcry_ctl_cmds, ...) -> gcry_error_t;
    pub fn gcry_sexp_new(
        retsexp: *mut gcry_sexp_t,
        buffer: *const ::std::os::raw::c_void,
        length: size_t,
        autodetect: ::std::os::raw::c_int,
    ) -> gcry_error_t;
    pub fn gcry_sexp_create(
        retsexp: *mut gcry_sexp_t,
        buffer: *mut ::std::os::raw::c_void,
        length: size_t,
        autodetect: ::std::os::raw::c_int,
        freefnc: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> gcry_error_t;
    pub fn gcry_sexp_sscan(
        retsexp: *mut gcry_sexp_t,
        erroff: *mut size_t,
        buffer: *const ::std::os::raw::c_char,
        length: size_t,
    ) -> gcry_error_t;
    pub fn gcry_sexp_build(
        retsexp: *mut gcry_sexp_t,
        erroff: *mut size_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> gcry_error_t;
    pub fn gcry_sexp_build_array(
        retsexp: *mut gcry_sexp_t,
        erroff: *mut size_t,
        format: *const ::std::os::raw::c_char,
        arg_list: *mut *mut ::std::os::raw::c_void,
    ) -> gcry_error_t;
    pub fn gcry_sexp_release(sexp: gcry_sexp_t);
    pub fn gcry_sexp_canon_len(
        buffer: *const ::std::os::raw::c_uchar,
        length: size_t,
        erroff: *mut size_t,
        errcode: *mut gcry_error_t,
    ) -> size_t;
    pub fn gcry_sexp_sprint(
        sexp: gcry_sexp_t,
        mode: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        maxlength: size_t,
    ) -> size_t;
    pub fn gcry_sexp_dump(a: gcry_sexp_t);
    pub fn gcry_sexp_cons(a: gcry_sexp_t, b: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_alist(array: *const gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_vlist(a: gcry_sexp_t, ...) -> gcry_sexp_t;
    pub fn gcry_sexp_append(a: gcry_sexp_t, n: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_prepend(a: gcry_sexp_t, n: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_find_token(
        list: gcry_sexp_t,
        tok: *const ::std::os::raw::c_char,
        toklen: size_t,
    ) -> gcry_sexp_t;
    pub fn gcry_sexp_length(list: gcry_sexp_t) -> ::std::os::raw::c_int;
    pub fn gcry_sexp_nth(list: gcry_sexp_t, number: ::std::os::raw::c_int) -> gcry_sexp_t;
    pub fn gcry_sexp_car(list: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_cdr(list: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_cadr(list: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_nth_data(
        list: gcry_sexp_t,
        number: ::std::os::raw::c_int,
        datalen: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
    pub fn gcry_sexp_nth_buffer(
        list: gcry_sexp_t,
        number: ::std::os::raw::c_int,
        rlength: *mut size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn gcry_sexp_nth_string(
        list: gcry_sexp_t,
        number: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
    pub fn gcry_sexp_nth_mpi(
        list: gcry_sexp_t,
        number: ::std::os::raw::c_int,
        mpifmt: ::std::os::raw::c_int,
    ) -> gcry_mpi_t;
    pub fn gcry_sexp_extract_param(
        sexp: gcry_sexp_t,
        path: *const ::std::os::raw::c_char,
        list: *const ::std::os::raw::c_char,
        ...
    ) -> gpg_error_t;
    pub fn gcry_mpi_new(nbits: ::std::os::raw::c_uint) -> gcry_mpi_t;
    pub fn gcry_mpi_snew(nbits: ::std::os::raw::c_uint) -> gcry_mpi_t;
    pub fn gcry_mpi_release(a: gcry_mpi_t);
    pub fn gcry_mpi_copy(a: gcry_mpi_t) -> gcry_mpi_t;
    pub fn gcry_mpi_snatch(w: gcry_mpi_t, u: gcry_mpi_t);
    pub fn gcry_mpi_set(w: gcry_mpi_t, u: gcry_mpi_t) -> gcry_mpi_t;
    pub fn gcry_mpi_set_ui(w: gcry_mpi_t, u: ::std::os::raw::c_ulong) -> gcry_mpi_t;
    pub fn gcry_mpi_swap(a: gcry_mpi_t, b: gcry_mpi_t);
    pub fn gcry_mpi_is_neg(a: gcry_mpi_t) -> ::std::os::raw::c_int;
    pub fn gcry_mpi_neg(w: gcry_mpi_t, u: gcry_mpi_t);
    pub fn gcry_mpi_abs(w: gcry_mpi_t);
    pub fn gcry_mpi_cmp(u: gcry_mpi_t, v: gcry_mpi_t) -> ::std::os::raw::c_int;
    pub fn gcry_mpi_cmp_ui(u: gcry_mpi_t, v: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
    pub fn gcry_mpi_scan(
        ret_mpi: *mut gcry_mpi_t,
        format: Enum_gcry_mpi_format,
        buffer: *const ::std::os::raw::c_void,
        buflen: size_t,
        nscanned: *mut size_t,
    ) -> gcry_error_t;
    pub fn gcry_mpi_print(
        format: Enum_gcry_mpi_format,
        buffer: *mut ::std::os::raw::c_uchar,
        buflen: size_t,
        nwritten: *mut size_t,
        a: gcry_mpi_t,
    ) -> gcry_error_t;
    pub fn gcry_mpi_aprint(
        format: Enum_gcry_mpi_format,
        buffer: *mut *mut ::std::os::raw::c_uchar,
        nwritten: *mut size_t,
        a: gcry_mpi_t,
    ) -> gcry_error_t;
    pub fn gcry_mpi_dump(a: gcry_mpi_t);
    pub fn gcry_mpi_add(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t);
    pub fn gcry_mpi_add_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::std::os::raw::c_ulong);
    pub fn gcry_mpi_addm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t, m: gcry_mpi_t);
    pub fn gcry_mpi_sub(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t);
    pub fn gcry_mpi_sub_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::std::os::raw::c_ulong);
    pub fn gcry_mpi_subm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t, m: gcry_mpi_t);
    pub fn gcry_mpi_mul(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t);
    pub fn gcry_mpi_mul_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::std::os::raw::c_ulong);
    pub fn gcry_mpi_mulm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t, m: gcry_mpi_t);
    pub fn gcry_mpi_mul_2exp(w: gcry_mpi_t, u: gcry_mpi_t, cnt: ::std::os::raw::c_ulong);
    pub fn gcry_mpi_div(
        q: gcry_mpi_t,
        r: gcry_mpi_t,
        dividend: gcry_mpi_t,
        divisor: gcry_mpi_t,
        round: ::std::os::raw::c_int,
    );
    pub fn gcry_mpi_mod(r: gcry_mpi_t, dividend: gcry_mpi_t, divisor: gcry_mpi_t);
    pub fn gcry_mpi_powm(w: gcry_mpi_t, b: gcry_mpi_t, e: gcry_mpi_t, m: gcry_mpi_t);
    pub fn gcry_mpi_gcd(g: gcry_mpi_t, a: gcry_mpi_t, b: gcry_mpi_t) -> ::std::os::raw::c_int;
    pub fn gcry_mpi_invm(x: gcry_mpi_t, a: gcry_mpi_t, m: gcry_mpi_t) -> ::std::os::raw::c_int;
    pub fn gcry_mpi_point_new(nbits: ::std::os::raw::c_uint) -> gcry_mpi_point_t;
    pub fn gcry_mpi_point_release(point: gcry_mpi_point_t);
    pub fn gcry_mpi_point_get(x: gcry_mpi_t, y: gcry_mpi_t, z: gcry_mpi_t, point: gcry_mpi_point_t);
    pub fn gcry_mpi_point_snatch_get(
        x: gcry_mpi_t,
        y: gcry_mpi_t,
        z: gcry_mpi_t,
        point: gcry_mpi_point_t,
    );
    pub fn gcry_mpi_point_set(
        point: gcry_mpi_point_t,
        x: gcry_mpi_t,
        y: gcry_mpi_t,
        z: gcry_mpi_t,
    ) -> gcry_mpi_point_t;
    pub fn gcry_mpi_point_snatch_set(
        point: gcry_mpi_point_t,
        x: gcry_mpi_t,
        y: gcry_mpi_t,
        z: gcry_mpi_t,
    ) -> gcry_mpi_point_t;
    pub fn gcry_mpi_ec_new(
        r_ctx: *mut gcry_ctx_t,
        keyparam: gcry_sexp_t,
        curvename: *const ::std::os::raw::c_char,
    ) -> gpg_error_t;
    pub fn gcry_mpi_ec_get_mpi(
        name: *const ::std::os::raw::c_char,
        ctx: gcry_ctx_t,
        copy: ::std::os::raw::c_int,
    ) -> gcry_mpi_t;
    pub fn gcry_mpi_ec_get_point(
        name: *const ::std::os::raw::c_char,
        ctx: gcry_ctx_t,
        copy: ::std::os::raw::c_int,
    ) -> gcry_mpi_point_t;
    pub fn gcry_mpi_ec_set_mpi(
        name: *const ::std::os::raw::c_char,
        newvalue: gcry_mpi_t,
        ctx: gcry_ctx_t,
    ) -> gpg_error_t;
    pub fn gcry_mpi_ec_set_point(
        name: *const ::std::os::raw::c_char,
        newvalue: gcry_mpi_point_t,
        ctx: gcry_ctx_t,
    ) -> gpg_error_t;
    pub fn gcry_mpi_ec_get_affine(
        x: gcry_mpi_t,
        y: gcry_mpi_t,
        point: gcry_mpi_point_t,
        ctx: gcry_ctx_t,
    ) -> ::std::os::raw::c_int;
    pub fn gcry_mpi_ec_dup(w: gcry_mpi_point_t, u: gcry_mpi_point_t, ctx: gcry_ctx_t);
    pub fn gcry_mpi_ec_add(
        w: gcry_mpi_point_t,
        u: gcry_mpi_point_t,
        v: gcry_mpi_point_t,
        ctx: gcry_ctx_t,
    );
    pub fn gcry_mpi_ec_mul(
        w: gcry_mpi_point_t,
        n: gcry_mpi_t,
        u: gcry_mpi_point_t,
        ctx: gcry_ctx_t,
    );
    pub fn gcry_mpi_ec_curve_point(w: gcry_mpi_point_t, ctx: gcry_ctx_t) -> ::std::os::raw::c_int;
    pub fn gcry_mpi_get_nbits(a: gcry_mpi_t) -> ::std::os::raw::c_uint;
    pub fn gcry_mpi_test_bit(a: gcry_mpi_t, n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn gcry_mpi_set_bit(a: gcry_mpi_t, n: ::std::os::raw::c_uint);
    pub fn gcry_mpi_clear_bit(a: gcry_mpi_t, n: ::std::os::raw::c_uint);
    pub fn gcry_mpi_set_highbit(a: gcry_mpi_t, n: ::std::os::raw::c_uint);
    pub fn gcry_mpi_clear_highbit(a: gcry_mpi_t, n: ::std::os::raw::c_uint);
    pub fn gcry_mpi_rshift(x: gcry_mpi_t, a: gcry_mpi_t, n: ::std::os::raw::c_uint);
    pub fn gcry_mpi_lshift(x: gcry_mpi_t, a: gcry_mpi_t, n: ::std::os::raw::c_uint);
    pub fn gcry_mpi_set_opaque(
        a: gcry_mpi_t,
        p: *mut ::std::os::raw::c_void,
        nbits: ::std::os::raw::c_uint,
    ) -> gcry_mpi_t;
    pub fn gcry_mpi_set_opaque_copy(
        a: gcry_mpi_t,
        p: *const ::std::os::raw::c_void,
        nbits: ::std::os::raw::c_uint,
    ) -> gcry_mpi_t;
    pub fn gcry_mpi_get_opaque(
        a: gcry_mpi_t,
        nbits: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
    pub fn gcry_mpi_set_flag(a: gcry_mpi_t, flag: Enum_gcry_mpi_flag);
    pub fn gcry_mpi_clear_flag(a: gcry_mpi_t, flag: Enum_gcry_mpi_flag);
    pub fn gcry_mpi_get_flag(a: gcry_mpi_t, flag: Enum_gcry_mpi_flag) -> ::std::os::raw::c_int;
    pub fn _gcry_mpi_get_const(no: ::std::os::raw::c_int) -> gcry_mpi_t;
    pub fn gcry_cipher_open(
        handle: *mut gcry_cipher_hd_t,
        algo: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> gcry_error_t;
    pub fn gcry_cipher_close(h: gcry_cipher_hd_t);
    pub fn gcry_cipher_ctl(
        h: gcry_cipher_hd_t,
        cmd: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        buflen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_info(
        h: gcry_cipher_hd_t,
        what: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        nbytes: *mut size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_algo_info(
        algo: ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        nbytes: *mut size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_algo_name(algorithm: ::std::os::raw::c_int)
        -> *const ::std::os::raw::c_char;
    pub fn gcry_cipher_map_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn gcry_cipher_mode_from_oid(
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn gcry_cipher_encrypt(
        h: gcry_cipher_hd_t,
        out: *mut ::std::os::raw::c_void,
        outsize: size_t,
        _in: *const ::std::os::raw::c_void,
        inlen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_decrypt(
        h: gcry_cipher_hd_t,
        out: *mut ::std::os::raw::c_void,
        outsize: size_t,
        _in: *const ::std::os::raw::c_void,
        inlen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_setkey(
        hd: gcry_cipher_hd_t,
        key: *const ::std::os::raw::c_void,
        keylen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_setiv(
        hd: gcry_cipher_hd_t,
        iv: *const ::std::os::raw::c_void,
        ivlen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_authenticate(
        hd: gcry_cipher_hd_t,
        abuf: *const ::std::os::raw::c_void,
        abuflen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_gettag(
        hd: gcry_cipher_hd_t,
        outtag: *mut ::std::os::raw::c_void,
        taglen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_checktag(
        hd: gcry_cipher_hd_t,
        intag: *const ::std::os::raw::c_void,
        taglen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_cipher_setctr(
        hd: gcry_cipher_hd_t,
        ctr: *const ::std::os::raw::c_void,
        ctrlen: size_t,
    ) -> gpg_error_t;
    pub fn gcry_cipher_get_algo_keylen(algo: ::std::os::raw::c_int) -> size_t;
    pub fn gcry_cipher_get_algo_blklen(algo: ::std::os::raw::c_int) -> size_t;
    pub fn gcry_pk_encrypt(
        result: *mut gcry_sexp_t,
        data: gcry_sexp_t,
        pkey: gcry_sexp_t,
    ) -> gcry_error_t;
    pub fn gcry_pk_decrypt(
        result: *mut gcry_sexp_t,
        data: gcry_sexp_t,
        skey: gcry_sexp_t,
    ) -> gcry_error_t;
    pub fn gcry_pk_sign(
        result: *mut gcry_sexp_t,
        data: gcry_sexp_t,
        skey: gcry_sexp_t,
    ) -> gcry_error_t;
    pub fn gcry_pk_verify(
        sigval: gcry_sexp_t,
        data: gcry_sexp_t,
        pkey: gcry_sexp_t,
    ) -> gcry_error_t;
    pub fn gcry_pk_testkey(key: gcry_sexp_t) -> gcry_error_t;
    pub fn gcry_pk_genkey(r_key: *mut gcry_sexp_t, s_parms: gcry_sexp_t) -> gcry_error_t;
    pub fn gcry_pk_ctl(
        cmd: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        buflen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_pk_algo_info(
        algo: ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        nbytes: *mut size_t,
    ) -> gcry_error_t;
    pub fn gcry_pk_algo_name(algorithm: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    pub fn gcry_pk_map_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn gcry_pk_get_nbits(key: gcry_sexp_t) -> ::std::os::raw::c_uint;
    pub fn gcry_pk_get_keygrip(
        key: gcry_sexp_t,
        array: *mut ::std::os::raw::c_uchar,
    ) -> *mut ::std::os::raw::c_uchar;
    pub fn gcry_pk_get_curve(
        key: gcry_sexp_t,
        iterator: ::std::os::raw::c_int,
        r_nbits: *mut ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
    pub fn gcry_pk_get_param(
        algo: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> gcry_sexp_t;
    pub fn gcry_pubkey_get_sexp(
        r_sexp: *mut gcry_sexp_t,
        mode: ::std::os::raw::c_int,
        ctx: gcry_ctx_t,
    ) -> gcry_error_t;
    pub fn gcry_md_open(
        h: *mut gcry_md_hd_t,
        algo: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> gcry_error_t;
    pub fn gcry_md_close(hd: gcry_md_hd_t);
    pub fn gcry_md_enable(hd: gcry_md_hd_t, algo: ::std::os::raw::c_int) -> gcry_error_t;
    pub fn gcry_md_copy(bhd: *mut gcry_md_hd_t, ahd: gcry_md_hd_t) -> gcry_error_t;
    pub fn gcry_md_reset(hd: gcry_md_hd_t);
    pub fn gcry_md_ctl(
        hd: gcry_md_hd_t,
        cmd: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        buflen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_md_write(hd: gcry_md_hd_t, buffer: *const ::std::os::raw::c_void, length: size_t);
    pub fn gcry_md_read(
        hd: gcry_md_hd_t,
        algo: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
    pub fn gcry_md_hash_buffer(
        algo: ::std::os::raw::c_int,
        digest: *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        length: size_t,
    );
    pub fn gcry_md_hash_buffers(
        algo: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        digest: *mut ::std::os::raw::c_void,
        iov: *const gcry_buffer_t,
        iovcnt: ::std::os::raw::c_int,
    ) -> gpg_error_t;
    pub fn gcry_md_get_algo(hd: gcry_md_hd_t) -> ::std::os::raw::c_int;
    pub fn gcry_md_get_algo_dlen(algo: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    pub fn gcry_md_is_enabled(
        a: gcry_md_hd_t,
        algo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn gcry_md_is_secure(a: gcry_md_hd_t) -> ::std::os::raw::c_int;
    pub fn gcry_md_info(
        h: gcry_md_hd_t,
        what: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        nbytes: *mut size_t,
    ) -> gcry_error_t;
    pub fn gcry_md_algo_info(
        algo: ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        nbytes: *mut size_t,
    ) -> gcry_error_t;
    pub fn gcry_md_algo_name(algo: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    pub fn gcry_md_map_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn gcry_md_setkey(
        hd: gcry_md_hd_t,
        key: *const ::std::os::raw::c_void,
        keylen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_md_debug(hd: gcry_md_hd_t, suffix: *const ::std::os::raw::c_char);
    pub fn gcry_mac_open(
        handle: *mut gcry_mac_hd_t,
        algo: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        ctx: gcry_ctx_t,
    ) -> gcry_error_t;
    pub fn gcry_mac_close(h: gcry_mac_hd_t);
    pub fn gcry_mac_ctl(
        h: gcry_mac_hd_t,
        cmd: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        buflen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_mac_algo_info(
        algo: ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        nbytes: *mut size_t,
    ) -> gcry_error_t;
    pub fn gcry_mac_setkey(
        hd: gcry_mac_hd_t,
        key: *const ::std::os::raw::c_void,
        keylen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_mac_setiv(
        hd: gcry_mac_hd_t,
        iv: *const ::std::os::raw::c_void,
        ivlen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_mac_write(
        hd: gcry_mac_hd_t,
        buffer: *const ::std::os::raw::c_void,
        length: size_t,
    ) -> gcry_error_t;
    pub fn gcry_mac_read(
        hd: gcry_mac_hd_t,
        buffer: *mut ::std::os::raw::c_void,
        buflen: *mut size_t,
    ) -> gcry_error_t;
    pub fn gcry_mac_verify(
        hd: gcry_mac_hd_t,
        buffer: *const ::std::os::raw::c_void,
        buflen: size_t,
    ) -> gcry_error_t;
    pub fn gcry_mac_get_algo_maclen(algo: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    pub fn gcry_mac_get_algo_keylen(algo: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
    pub fn gcry_mac_algo_name(algorithm: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
    pub fn gcry_mac_map_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn gcry_kdf_derive(
        passphrase: *const ::std::os::raw::c_void,
        passphraselen: size_t,
        algo: ::std::os::raw::c_int,
        subalgo: ::std::os::raw::c_int,
        salt: *const ::std::os::raw::c_void,
        saltlen: size_t,
        iterations: ::std::os::raw::c_ulong,
        keysize: size_t,
        keybuffer: *mut ::std::os::raw::c_void,
    ) -> gpg_error_t;
    pub fn gcry_randomize(
        buffer: *mut ::std::os::raw::c_void,
        length: size_t,
        level: Enum_gcry_random_level,
    );
    pub fn gcry_random_add_bytes(
        buffer: *const ::std::os::raw::c_void,
        length: size_t,
        quality: ::std::os::raw::c_int,
    ) -> gcry_error_t;
    pub fn gcry_random_bytes(
        nbytes: size_t,
        level: Enum_gcry_random_level,
    ) -> *mut ::std::os::raw::c_void;
    pub fn gcry_random_bytes_secure(
        nbytes: size_t,
        level: Enum_gcry_random_level,
    ) -> *mut ::std::os::raw::c_void;
    pub fn gcry_mpi_randomize(
        w: gcry_mpi_t,
        nbits: ::std::os::raw::c_uint,
        level: Enum_gcry_random_level,
    );
    pub fn gcry_create_nonce(buffer: *mut ::std::os::raw::c_void, length: size_t);
    pub fn gcry_prime_generate(
        prime: *mut gcry_mpi_t,
        prime_bits: ::std::os::raw::c_uint,
        factor_bits: ::std::os::raw::c_uint,
        factors: *mut *mut gcry_mpi_t,
        cb_func: gcry_prime_check_func_t,
        cb_arg: *mut ::std::os::raw::c_void,
        random_level: gcry_random_level_t,
        flags: ::std::os::raw::c_uint,
    ) -> gcry_error_t;
    pub fn gcry_prime_group_generator(
        r_g: *mut gcry_mpi_t,
        prime: gcry_mpi_t,
        factors: *mut gcry_mpi_t,
        start_g: gcry_mpi_t,
    ) -> gcry_error_t;
    pub fn gcry_prime_release_factors(factors: *mut gcry_mpi_t);
    pub fn gcry_prime_check(x: gcry_mpi_t, flags: ::std::os::raw::c_uint) -> gcry_error_t;
    pub fn gcry_ctx_release(ctx: gcry_ctx_t);
    pub fn gcry_log_debug(fmt: *const ::std::os::raw::c_char, ...);
    pub fn gcry_log_debughex(
        text: *const ::std::os::raw::c_char,
        buffer: *const ::std::os::raw::c_void,
        length: size_t,
    );
    pub fn gcry_log_debugmpi(text: *const ::std::os::raw::c_char, mpi: gcry_mpi_t);
    pub fn gcry_log_debugpnt(
        text: *const ::std::os::raw::c_char,
        point: gcry_mpi_point_t,
        ctx: gcry_ctx_t,
    );
    pub fn gcry_log_debugsxp(text: *const ::std::os::raw::c_char, sexp: gcry_sexp_t);
    pub fn gcry_set_progress_handler(
        cb: gcry_handler_progress_t,
        cb_data: *mut ::std::os::raw::c_void,
    );
    pub fn gcry_set_allocation_handler(
        func_alloc: gcry_handler_alloc_t,
        func_alloc_secure: gcry_handler_alloc_t,
        func_secure_check: gcry_handler_secure_check_t,
        func_realloc: gcry_handler_realloc_t,
        func_free: gcry_handler_free_t,
    );
    pub fn gcry_set_outofcore_handler(
        h: gcry_handler_no_mem_t,
        opaque: *mut ::std::os::raw::c_void,
    );
    pub fn gcry_set_fatalerror_handler(
        fnc: gcry_handler_error_t,
        opaque: *mut ::std::os::raw::c_void,
    );
    pub fn gcry_set_log_handler(f: gcry_handler_log_t, opaque: *mut ::std::os::raw::c_void);
    pub fn gcry_set_gettext_handler(
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
            ) -> *const ::std::os::raw::c_char,
        >,
    );
    pub fn gcry_malloc(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_calloc(n: size_t, m: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_malloc_secure(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_calloc_secure(n: size_t, m: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_realloc(a: *mut ::std::os::raw::c_void, n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_strdup(string: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn gcry_xmalloc(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_xcalloc(n: size_t, m: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_xmalloc_secure(n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_xcalloc_secure(n: size_t, m: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_xrealloc(a: *mut ::std::os::raw::c_void, n: size_t) -> *mut ::std::os::raw::c_void;
    pub fn gcry_xstrdup(a: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn gcry_free(a: *mut ::std::os::raw::c_void);
    pub fn gcry_is_secure(a: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_seed_weak_random(seed: int32_t);
    pub fn GNUNET_CRYPTO_crc16_step(
        sum: uint32_t,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> uint32_t;
    pub fn GNUNET_CRYPTO_crc16_finish(sum: uint32_t) -> uint16_t;
    pub fn GNUNET_CRYPTO_crc16_n(buf: *const ::std::os::raw::c_void, len: size_t) -> uint16_t;
    pub fn GNUNET_CRYPTO_crc32_n(buf: *const ::std::os::raw::c_void, len: size_t) -> int32_t;
    pub fn GNUNET_CRYPTO_random_block(
        mode: Enum_GNUNET_CRYPTO_Quality,
        buffer: *mut ::std::os::raw::c_void,
        length: size_t,
    );
    pub fn GNUNET_CRYPTO_random_u32(mode: Enum_GNUNET_CRYPTO_Quality, i: uint32_t) -> uint32_t;
    pub fn GNUNET_CRYPTO_random_u64(mode: Enum_GNUNET_CRYPTO_Quality, max: uint64_t) -> uint64_t;
    pub fn GNUNET_CRYPTO_random_permute(
        mode: Enum_GNUNET_CRYPTO_Quality,
        n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_uint;
    pub fn GNUNET_CRYPTO_symmetric_create_session_key(
        key: *mut Struct_GNUNET_CRYPTO_SymmetricSessionKey,
    );
    pub fn GNUNET_CRYPTO_symmetric_encrypt(
        block: *const ::std::os::raw::c_void,
        size: size_t,
        sessionkey: *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
        iv: *const Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
        result: *mut ::std::os::raw::c_void,
    ) -> ssize_t;
    pub fn GNUNET_CRYPTO_symmetric_decrypt(
        block: *const ::std::os::raw::c_void,
        size: size_t,
        sessionkey: *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
        iv: *const Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
        result: *mut ::std::os::raw::c_void,
    ) -> ssize_t;
    pub fn GNUNET_CRYPTO_symmetric_derive_iv(
        iv: *mut Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
        skey: *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
        salt: *const ::std::os::raw::c_void,
        salt_len: size_t,
        ...
    );
    pub fn GNUNET_CRYPTO_symmetric_derive_iv_v(
        iv: *mut Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
        skey: *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
        salt: *const ::std::os::raw::c_void,
        salt_len: size_t,
        argp: va_list,
    );
    pub fn GNUNET_CRYPTO_hash_to_enc(
        block: *const Struct_GNUNET_HashCode,
        result: *mut Struct_GNUNET_CRYPTO_HashAsciiEncoded,
    );
    pub fn GNUNET_CRYPTO_hash_from_string2(
        enc: *const ::std::os::raw::c_char,
        enclen: size_t,
        result: *mut Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_hash_distance_u32(
        a: *const Struct_GNUNET_HashCode,
        b: *const Struct_GNUNET_HashCode,
    ) -> uint32_t;
    pub fn GNUNET_CRYPTO_hash(
        block: *const ::std::os::raw::c_void,
        size: size_t,
        ret: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_CRYPTO_hmac(
        key: *const Struct_GNUNET_CRYPTO_AuthKey,
        plaintext: *const ::std::os::raw::c_void,
        plaintext_len: size_t,
        hmac: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_CRYPTO_hash_file(
        priority: Enum_GNUNET_SCHEDULER_Priority,
        filename: *const ::std::os::raw::c_char,
        blocksize: size_t,
        callback: GNUNET_CRYPTO_HashCompletedCallback,
        callback_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_CRYPTO_FileHashContext;
    pub fn GNUNET_CRYPTO_hash_file_cancel(fhc: *mut Struct_GNUNET_CRYPTO_FileHashContext);
    pub fn GNUNET_CRYPTO_hash_create_random(
        mode: Enum_GNUNET_CRYPTO_Quality,
        result: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_CRYPTO_hash_difference(
        a: *const Struct_GNUNET_HashCode,
        b: *const Struct_GNUNET_HashCode,
        result: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_CRYPTO_hash_sum(
        a: *const Struct_GNUNET_HashCode,
        delta: *const Struct_GNUNET_HashCode,
        result: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_CRYPTO_hash_xor(
        a: *const Struct_GNUNET_HashCode,
        b: *const Struct_GNUNET_HashCode,
        result: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_CRYPTO_hash_to_aes_key(
        hc: *const Struct_GNUNET_HashCode,
        skey: *mut Struct_GNUNET_CRYPTO_SymmetricSessionKey,
        iv: *mut Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
    );
    pub fn GNUNET_CRYPTO_hash_get_bit(
        code: *const Struct_GNUNET_HashCode,
        bit: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_hash_matching_bits(
        first: *const Struct_GNUNET_HashCode,
        second: *const Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_uint;
    pub fn GNUNET_CRYPTO_hash_cmp(
        h1: *const Struct_GNUNET_HashCode,
        h2: *const Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_hash_xorcmp(
        h1: *const Struct_GNUNET_HashCode,
        h2: *const Struct_GNUNET_HashCode,
        target: *const Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_hmac_derive_key_v(
        key: *mut Struct_GNUNET_CRYPTO_AuthKey,
        rkey: *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
        salt: *const ::std::os::raw::c_void,
        salt_len: size_t,
        argp: va_list,
    );
    pub fn GNUNET_CRYPTO_hmac_derive_key(
        key: *mut Struct_GNUNET_CRYPTO_AuthKey,
        rkey: *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
        salt: *const ::std::os::raw::c_void,
        salt_len: size_t,
        ...
    );
    pub fn GNUNET_CRYPTO_hkdf(
        result: *mut ::std::os::raw::c_void,
        out_len: size_t,
        xtr_algo: ::std::os::raw::c_int,
        prf_algo: ::std::os::raw::c_int,
        xts: *const ::std::os::raw::c_void,
        xts_len: size_t,
        skm: *const ::std::os::raw::c_void,
        skm_len: size_t,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_hkdf_v(
        result: *mut ::std::os::raw::c_void,
        out_len: size_t,
        xtr_algo: ::std::os::raw::c_int,
        prf_algo: ::std::os::raw::c_int,
        xts: *const ::std::os::raw::c_void,
        xts_len: size_t,
        skm: *const ::std::os::raw::c_void,
        skm_len: size_t,
        argp: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_kdf_v(
        result: *mut ::std::os::raw::c_void,
        out_len: size_t,
        xts: *const ::std::os::raw::c_void,
        xts_len: size_t,
        skm: *const ::std::os::raw::c_void,
        skm_len: size_t,
        argp: va_list,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_kdf(
        result: *mut ::std::os::raw::c_void,
        out_len: size_t,
        xts: *const ::std::os::raw::c_void,
        xts_len: size_t,
        skm: *const ::std::os::raw::c_void,
        skm_len: size_t,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_key_get_public(
        _priv: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        _pub: *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    );
    pub fn GNUNET_CRYPTO_eddsa_key_get_public(
        _priv: *const Struct_GNUNET_CRYPTO_EddsaPrivateKey,
        _pub: *mut Struct_GNUNET_CRYPTO_EddsaPublicKey,
    );
    pub fn GNUNET_CRYPTO_ecdhe_key_get_public(
        _priv: *const Struct_GNUNET_CRYPTO_EcdhePrivateKey,
        _pub: *mut Struct_GNUNET_CRYPTO_EcdhePublicKey,
    );
    pub fn GNUNET_CRYPTO_ecdsa_public_key_to_string(
        _pub: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_CRYPTO_eddsa_public_key_to_string(
        _pub: *const Struct_GNUNET_CRYPTO_EddsaPublicKey,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_CRYPTO_ecdsa_public_key_from_string(
        enc: *const ::std::os::raw::c_char,
        enclen: size_t,
        _pub: *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_eddsa_public_key_from_string(
        enc: *const ::std::os::raw::c_char,
        enclen: size_t,
        _pub: *mut Struct_GNUNET_CRYPTO_EddsaPublicKey,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_key_create_from_file(
        filename: *const ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_key_create_from_file(
        filename: *const ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_CRYPTO_EddsaPrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_key_create_from_configuration(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ) -> *mut Struct_GNUNET_CRYPTO_EddsaPrivateKey;
    pub fn GNUNET_CRYPTO_ecdsa_key_create() -> *mut Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_key_create() -> *mut Struct_GNUNET_CRYPTO_EddsaPrivateKey;
    pub fn GNUNET_CRYPTO_ecdhe_key_create() -> *mut Struct_GNUNET_CRYPTO_EcdhePrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_key_clear(pk: *mut Struct_GNUNET_CRYPTO_EddsaPrivateKey);
    pub fn GNUNET_CRYPTO_ecdsa_key_clear(pk: *mut Struct_GNUNET_CRYPTO_EcdsaPrivateKey);
    pub fn GNUNET_CRYPTO_ecdhe_key_clear(pk: *mut Struct_GNUNET_CRYPTO_EcdhePrivateKey);
    pub fn GNUNET_CRYPTO_ecdsa_key_get_anonymous() -> *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_setup_hostkey(cfg_name: *const ::std::os::raw::c_char);
    pub fn GNUNET_CRYPTO_get_peer_identity(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        dst: *mut Struct_GNUNET_PeerIdentity,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_cmp_peer_identity(
        first: *const Struct_GNUNET_PeerIdentity,
        second: *const Struct_GNUNET_PeerIdentity,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_ecc_ecdh(
        _priv: *const Struct_GNUNET_CRYPTO_EcdhePrivateKey,
        _pub: *const Struct_GNUNET_CRYPTO_EcdhePublicKey,
        key_material: *mut Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_eddsa_sign(
        _priv: *const Struct_GNUNET_CRYPTO_EddsaPrivateKey,
        purpose: *const Struct_GNUNET_CRYPTO_EccSignaturePurpose,
        sig: *mut Struct_GNUNET_CRYPTO_EddsaSignature,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_sign(
        _priv: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        purpose: *const Struct_GNUNET_CRYPTO_EccSignaturePurpose,
        sig: *mut Struct_GNUNET_CRYPTO_EcdsaSignature,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_eddsa_verify(
        purpose: uint32_t,
        validate: *const Struct_GNUNET_CRYPTO_EccSignaturePurpose,
        sig: *const Struct_GNUNET_CRYPTO_EddsaSignature,
        _pub: *const Struct_GNUNET_CRYPTO_EddsaPublicKey,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_verify(
        purpose: uint32_t,
        validate: *const Struct_GNUNET_CRYPTO_EccSignaturePurpose,
        sig: *const Struct_GNUNET_CRYPTO_EcdsaSignature,
        _pub: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_private_key_derive(
        _priv: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        label: *const ::std::os::raw::c_char,
        context: *const ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_CRYPTO_ecdsa_public_key_derive(
        _pub: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
        label: *const ::std::os::raw::c_char,
        context: *const ::std::os::raw::c_char,
        result: *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    );
    pub fn GNUNET_CRYPTO_mpi_print_unsigned(
        buf: *mut ::std::os::raw::c_void,
        size: size_t,
        val: gcry_mpi_t,
    );
    pub fn GNUNET_CRYPTO_mpi_scan_unsigned(
        result: *mut gcry_mpi_t,
        data: *const ::std::os::raw::c_void,
        size: size_t,
    );
    pub fn GNUNET_CRYPTO_paillier_create(
        public_key: *mut Struct_GNUNET_CRYPTO_PaillierPublicKey,
        private_key: *mut Struct_GNUNET_CRYPTO_PaillierPrivateKey,
    );
    pub fn GNUNET_CRYPTO_paillier_encrypt(
        public_key: *const Struct_GNUNET_CRYPTO_PaillierPublicKey,
        m: gcry_mpi_t,
        desired_ops: ::std::os::raw::c_int,
        ciphertext: *mut Struct_GNUNET_CRYPTO_PaillierCiphertext,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_paillier_decrypt(
        private_key: *const Struct_GNUNET_CRYPTO_PaillierPrivateKey,
        public_key: *const Struct_GNUNET_CRYPTO_PaillierPublicKey,
        ciphertext: *const Struct_GNUNET_CRYPTO_PaillierCiphertext,
        m: gcry_mpi_t,
    );
    pub fn GNUNET_CRYPTO_paillier_hom_add(
        public_key: *const Struct_GNUNET_CRYPTO_PaillierPublicKey,
        c1: *const Struct_GNUNET_CRYPTO_PaillierCiphertext,
        c2: *const Struct_GNUNET_CRYPTO_PaillierCiphertext,
        result: *mut Struct_GNUNET_CRYPTO_PaillierCiphertext,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CRYPTO_paillier_hom_get_remaining(
        c: *const Struct_GNUNET_CRYPTO_PaillierCiphertext,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BANDWIDTH_value_init(
        bytes_per_second: uint32_t,
    ) -> Struct_GNUNET_BANDWIDTH_Value32NBO;
    pub fn GNUNET_BANDWIDTH_value_get_available_until(
        bps: Struct_GNUNET_BANDWIDTH_Value32NBO,
        deadline: Struct_GNUNET_TIME_Relative,
    ) -> uint64_t;
    pub fn GNUNET_BANDWIDTH_value_get_delay_for(
        bps: Struct_GNUNET_BANDWIDTH_Value32NBO,
        size: uint64_t,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_BANDWIDTH_value_min(
        b1: Struct_GNUNET_BANDWIDTH_Value32NBO,
        b2: Struct_GNUNET_BANDWIDTH_Value32NBO,
    ) -> Struct_GNUNET_BANDWIDTH_Value32NBO;
    pub fn GNUNET_BANDWIDTH_tracker_init(
        av: *mut Struct_GNUNET_BANDWIDTH_Tracker,
        update_cb: GNUNET_BANDWIDTH_TrackerUpdateCallback,
        update_cb_cls: *mut ::std::os::raw::c_void,
        bytes_per_second_limit: Struct_GNUNET_BANDWIDTH_Value32NBO,
        max_carry_s: uint32_t,
    );
    pub fn GNUNET_BANDWIDTH_tracker_init2(
        av: *mut Struct_GNUNET_BANDWIDTH_Tracker,
        update_cb: GNUNET_BANDWIDTH_TrackerUpdateCallback,
        update_cb_cls: *mut ::std::os::raw::c_void,
        bytes_per_second_limit: Struct_GNUNET_BANDWIDTH_Value32NBO,
        max_carry_s: uint32_t,
        excess_cb: GNUNET_BANDWIDTH_ExcessNotificationCallback,
        excess_cb_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_BANDWIDTH_tracker_notification_stop(av: *mut Struct_GNUNET_BANDWIDTH_Tracker);
    pub fn GNUNET_BANDWIDTH_tracker_consume(
        av: *mut Struct_GNUNET_BANDWIDTH_Tracker,
        size: ssize_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BANDWIDTH_tracker_get_delay(
        av: *mut Struct_GNUNET_BANDWIDTH_Tracker,
        size: size_t,
    ) -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_BANDWIDTH_tracker_get_available(
        av: *mut Struct_GNUNET_BANDWIDTH_Tracker,
    ) -> int64_t;
    pub fn GNUNET_BANDWIDTH_tracker_update_quota(
        av: *mut Struct_GNUNET_BANDWIDTH_Tracker,
        bytes_per_second_limit: Struct_GNUNET_BANDWIDTH_Value32NBO,
    );
    pub fn EXTRACTOR_metatype_to_string(
        _type: Enum_EXTRACTOR_MetaType,
    ) -> *const ::std::os::raw::c_char;
    pub fn EXTRACTOR_metatype_to_description(
        _type: Enum_EXTRACTOR_MetaType,
    ) -> *const ::std::os::raw::c_char;
    pub fn EXTRACTOR_metatype_get_max() -> Enum_EXTRACTOR_MetaType;
    pub fn EXTRACTOR_plugin_add_defaults(
        flags: Enum_EXTRACTOR_Options,
    ) -> *mut Struct_EXTRACTOR_PluginList;
    pub fn EXTRACTOR_plugin_add(
        prev: *mut Struct_EXTRACTOR_PluginList,
        library: *const ::std::os::raw::c_char,
        options: *const ::std::os::raw::c_char,
        flags: Enum_EXTRACTOR_Options,
    ) -> *mut Struct_EXTRACTOR_PluginList;
    pub fn EXTRACTOR_plugin_add_config(
        prev: *mut Struct_EXTRACTOR_PluginList,
        config: *const ::std::os::raw::c_char,
        flags: Enum_EXTRACTOR_Options,
    ) -> *mut Struct_EXTRACTOR_PluginList;
    pub fn EXTRACTOR_plugin_remove(
        prev: *mut Struct_EXTRACTOR_PluginList,
        library: *const ::std::os::raw::c_char,
    ) -> *mut Struct_EXTRACTOR_PluginList;
    pub fn EXTRACTOR_plugin_remove_all(plugins: *mut Struct_EXTRACTOR_PluginList);
    pub fn EXTRACTOR_extract(
        plugins: *mut Struct_EXTRACTOR_PluginList,
        filename: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        size: size_t,
        _proc: EXTRACTOR_MetaDataProcessor,
        proc_cls: *mut ::std::os::raw::c_void,
    );
    pub fn EXTRACTOR_meta_data_print(
        handle: *mut ::std::os::raw::c_void,
        plugin_name: *const ::std::os::raw::c_char,
        _type: Enum_EXTRACTOR_MetaType,
        format: Enum_EXTRACTOR_MetaFormat,
        data_mime_type: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        data_len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_load(
        filename: *const ::std::os::raw::c_char,
        size: size_t,
        k: ::std::os::raw::c_uint,
    ) -> *mut Struct_GNUNET_CONTAINER_BloomFilter;
    pub fn GNUNET_CONTAINER_bloomfilter_init(
        data: *const ::std::os::raw::c_char,
        size: size_t,
        k: ::std::os::raw::c_uint,
    ) -> *mut Struct_GNUNET_CONTAINER_BloomFilter;
    pub fn GNUNET_CONTAINER_bloomfilter_get_raw_data(
        bf: *const Struct_GNUNET_CONTAINER_BloomFilter,
        data: *mut ::std::os::raw::c_char,
        size: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_test(
        bf: *const Struct_GNUNET_CONTAINER_BloomFilter,
        e: *const Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_add(
        bf: *mut Struct_GNUNET_CONTAINER_BloomFilter,
        e: *const Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_CONTAINER_bloomfilter_remove(
        bf: *mut Struct_GNUNET_CONTAINER_BloomFilter,
        e: *const Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_CONTAINER_bloomfilter_copy(
        bf: *const Struct_GNUNET_CONTAINER_BloomFilter,
    ) -> *mut Struct_GNUNET_CONTAINER_BloomFilter;
    pub fn GNUNET_CONTAINER_bloomfilter_free(bf: *mut Struct_GNUNET_CONTAINER_BloomFilter);
    pub fn GNUNET_CONTAINER_bloomfilter_get_element_addresses(
        bf: *const Struct_GNUNET_CONTAINER_BloomFilter,
    ) -> size_t;
    pub fn GNUNET_CONTAINER_bloomfilter_get_size(
        bf: *const Struct_GNUNET_CONTAINER_BloomFilter,
    ) -> size_t;
    pub fn GNUNET_CONTAINER_bloomfilter_clear(bf: *mut Struct_GNUNET_CONTAINER_BloomFilter);
    pub fn GNUNET_CONTAINER_bloomfilter_or(
        bf: *mut Struct_GNUNET_CONTAINER_BloomFilter,
        data: *const ::std::os::raw::c_char,
        size: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_or2(
        bf: *mut Struct_GNUNET_CONTAINER_BloomFilter,
        to_or: *const Struct_GNUNET_CONTAINER_BloomFilter,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_resize(
        bf: *mut Struct_GNUNET_CONTAINER_BloomFilter,
        iterator: GNUNET_HashCodeIterator,
        iterator_cls: *mut ::std::os::raw::c_void,
        size: size_t,
        k: ::std::os::raw::c_uint,
    );
    pub fn GNUNET_CONTAINER_meta_data_create() -> *mut Struct_GNUNET_CONTAINER_MetaData;
    pub fn GNUNET_CONTAINER_meta_data_duplicate(
        md: *const Struct_GNUNET_CONTAINER_MetaData,
    ) -> *mut Struct_GNUNET_CONTAINER_MetaData;
    pub fn GNUNET_CONTAINER_meta_data_destroy(md: *mut Struct_GNUNET_CONTAINER_MetaData);
    pub fn GNUNET_CONTAINER_meta_data_test_equal(
        md1: *const Struct_GNUNET_CONTAINER_MetaData,
        md2: *const Struct_GNUNET_CONTAINER_MetaData,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_meta_data_insert(
        md: *mut Struct_GNUNET_CONTAINER_MetaData,
        plugin_name: *const ::std::os::raw::c_char,
        _type: Enum_EXTRACTOR_MetaType,
        format: Enum_EXTRACTOR_MetaFormat,
        data_mime_type: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_meta_data_merge(
        md: *mut Struct_GNUNET_CONTAINER_MetaData,
        _in: *const Struct_GNUNET_CONTAINER_MetaData,
    );
    pub fn GNUNET_CONTAINER_meta_data_delete(
        md: *mut Struct_GNUNET_CONTAINER_MetaData,
        _type: Enum_EXTRACTOR_MetaType,
        data: *const ::std::os::raw::c_char,
        data_size: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_meta_data_clear(md: *mut Struct_GNUNET_CONTAINER_MetaData);
    pub fn GNUNET_CONTAINER_meta_data_add_publication_date(
        md: *mut Struct_GNUNET_CONTAINER_MetaData,
    );
    pub fn GNUNET_CONTAINER_meta_data_iterate(
        md: *const Struct_GNUNET_CONTAINER_MetaData,
        iter: EXTRACTOR_MetaDataProcessor,
        iter_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_meta_data_get_by_type(
        md: *const Struct_GNUNET_CONTAINER_MetaData,
        _type: Enum_EXTRACTOR_MetaType,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_CONTAINER_meta_data_get_first_by_types(
        md: *const Struct_GNUNET_CONTAINER_MetaData,
        ...
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_CONTAINER_meta_data_get_thumbnail(
        md: *const Struct_GNUNET_CONTAINER_MetaData,
        thumb: *mut *mut ::std::os::raw::c_uchar,
    ) -> size_t;
    pub fn GNUNET_CONTAINER_meta_data_serialize(
        md: *const Struct_GNUNET_CONTAINER_MetaData,
        target: *mut *mut ::std::os::raw::c_char,
        max: size_t,
        opt: Enum_GNUNET_CONTAINER_MetaDataSerializationOptions,
    ) -> ssize_t;
    pub fn GNUNET_CONTAINER_meta_data_get_serialized_size(
        md: *const Struct_GNUNET_CONTAINER_MetaData,
    ) -> ssize_t;
    pub fn GNUNET_CONTAINER_meta_data_deserialize(
        input: *const ::std::os::raw::c_char,
        size: size_t,
    ) -> *mut Struct_GNUNET_CONTAINER_MetaData;
    pub fn GNUNET_CONTAINER_multihashmap_create(
        len: ::std::os::raw::c_uint,
        do_not_copy_keys: ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_CONTAINER_MultiHashMap;
    pub fn GNUNET_CONTAINER_multihashmap_destroy(map: *mut Struct_GNUNET_CONTAINER_MultiHashMap);
    pub fn GNUNET_CONTAINER_multihashmap_get(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap,
        key: *const Struct_GNUNET_HashCode,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_multihashmap_remove(
        map: *mut Struct_GNUNET_CONTAINER_MultiHashMap,
        key: *const Struct_GNUNET_HashCode,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_remove_all(
        map: *mut Struct_GNUNET_CONTAINER_MultiHashMap,
        key: *const Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_contains(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap,
        key: *const Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_contains_value(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap,
        key: *const Struct_GNUNET_HashCode,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_put(
        map: *mut Struct_GNUNET_CONTAINER_MultiHashMap,
        key: *const Struct_GNUNET_HashCode,
        value: *mut ::std::os::raw::c_void,
        opt: Enum_GNUNET_CONTAINER_MultiHashMapOption,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_size(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap,
    ) -> ::std::os::raw::c_uint;
    pub fn GNUNET_CONTAINER_multihashmap_iterate(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap,
        it: GNUNET_CONTAINER_HashMapIterator,
        it_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_iterator_create(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap,
    ) -> *mut Struct_GNUNET_CONTAINER_MultiHashMapIterator;
    pub fn GNUNET_CONTAINER_multihashmap_iterator_next(
        iter: *mut Struct_GNUNET_CONTAINER_MultiHashMapIterator,
        key: *mut Struct_GNUNET_HashCode,
        value: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_iterator_destroy(
        iter: *mut Struct_GNUNET_CONTAINER_MultiHashMapIterator,
    );
    pub fn GNUNET_CONTAINER_multihashmap_get_multiple(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap,
        key: *const Struct_GNUNET_HashCode,
        it: GNUNET_CONTAINER_HashMapIterator,
        it_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_create(
        len: ::std::os::raw::c_uint,
        do_not_copy_keys: ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_CONTAINER_MultiPeerMap;
    pub fn GNUNET_CONTAINER_multipeermap_destroy(map: *mut Struct_GNUNET_CONTAINER_MultiPeerMap);
    pub fn GNUNET_CONTAINER_multipeermap_get(
        map: *const Struct_GNUNET_CONTAINER_MultiPeerMap,
        key: *const Struct_GNUNET_PeerIdentity,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_multipeermap_remove(
        map: *mut Struct_GNUNET_CONTAINER_MultiPeerMap,
        key: *const Struct_GNUNET_PeerIdentity,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_remove_all(
        map: *mut Struct_GNUNET_CONTAINER_MultiPeerMap,
        key: *const Struct_GNUNET_PeerIdentity,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_contains(
        map: *const Struct_GNUNET_CONTAINER_MultiPeerMap,
        key: *const Struct_GNUNET_PeerIdentity,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_contains_value(
        map: *const Struct_GNUNET_CONTAINER_MultiPeerMap,
        key: *const Struct_GNUNET_PeerIdentity,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_put(
        map: *mut Struct_GNUNET_CONTAINER_MultiPeerMap,
        key: *const Struct_GNUNET_PeerIdentity,
        value: *mut ::std::os::raw::c_void,
        opt: Enum_GNUNET_CONTAINER_MultiHashMapOption,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_size(
        map: *const Struct_GNUNET_CONTAINER_MultiPeerMap,
    ) -> ::std::os::raw::c_uint;
    pub fn GNUNET_CONTAINER_multipeermap_iterate(
        map: *const Struct_GNUNET_CONTAINER_MultiPeerMap,
        it: GNUNET_CONTAINER_PeerMapIterator,
        it_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_iterator_create(
        map: *const Struct_GNUNET_CONTAINER_MultiPeerMap,
    ) -> *mut Struct_GNUNET_CONTAINER_MultiPeerMapIterator;
    pub fn GNUNET_CONTAINER_multipeermap_iterator_next(
        iter: *mut Struct_GNUNET_CONTAINER_MultiPeerMapIterator,
        key: *mut Struct_GNUNET_PeerIdentity,
        value: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_iterator_destroy(
        iter: *mut Struct_GNUNET_CONTAINER_MultiPeerMapIterator,
    );
    pub fn GNUNET_CONTAINER_multipeermap_get_multiple(
        map: *const Struct_GNUNET_CONTAINER_MultiPeerMap,
        key: *const Struct_GNUNET_PeerIdentity,
        it: GNUNET_CONTAINER_PeerMapIterator,
        it_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_create(
        len: ::std::os::raw::c_uint,
    ) -> *mut Struct_GNUNET_CONTAINER_MultiHashMap32;
    pub fn GNUNET_CONTAINER_multihashmap32_destroy(
        map: *mut Struct_GNUNET_CONTAINER_MultiHashMap32,
    );
    pub fn GNUNET_CONTAINER_multihashmap32_size(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap32,
    ) -> ::std::os::raw::c_uint;
    pub fn GNUNET_CONTAINER_multihashmap32_get(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap32,
        key: uint32_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_multihashmap32_iterate(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap32,
        it: GNUNET_CONTAINER_HashMapIterator32,
        it_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_remove(
        map: *mut Struct_GNUNET_CONTAINER_MultiHashMap32,
        key: uint32_t,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_remove_all(
        map: *mut Struct_GNUNET_CONTAINER_MultiHashMap32,
        key: uint32_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_contains(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap32,
        key: uint32_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_contains_value(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap32,
        key: uint32_t,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_put(
        map: *mut Struct_GNUNET_CONTAINER_MultiHashMap32,
        key: uint32_t,
        value: *mut ::std::os::raw::c_void,
        opt: Enum_GNUNET_CONTAINER_MultiHashMapOption,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_get_multiple(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap32,
        key: uint32_t,
        it: GNUNET_CONTAINER_HashMapIterator32,
        it_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_iterator_create(
        map: *const Struct_GNUNET_CONTAINER_MultiHashMap32,
    ) -> *mut Struct_GNUNET_CONTAINER_MultiHashMap32Iterator;
    pub fn GNUNET_CONTAINER_multihashmap32_iterator_next(
        iter: *mut Struct_GNUNET_CONTAINER_MultiHashMap32Iterator,
        key: *mut uint32_t,
        value: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_iterator_destroy(
        iter: *mut Struct_GNUNET_CONTAINER_MultiHashMapIterator,
    );
    pub fn GNUNET_CONTAINER_heap_create(
        order: Enum_GNUNET_CONTAINER_HeapOrder,
    ) -> *mut Struct_GNUNET_CONTAINER_Heap;
    pub fn GNUNET_CONTAINER_heap_destroy(heap: *mut Struct_GNUNET_CONTAINER_Heap);
    pub fn GNUNET_CONTAINER_heap_peek(
        heap: *const Struct_GNUNET_CONTAINER_Heap,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_heap_get_size(
        heap: *const Struct_GNUNET_CONTAINER_Heap,
    ) -> ::std::os::raw::c_uint;
    pub fn GNUNET_CONTAINER_heap_node_get_cost(
        node: *const Struct_GNUNET_CONTAINER_HeapNode,
    ) -> GNUNET_CONTAINER_HeapCostType;
    pub fn GNUNET_CONTAINER_heap_iterate(
        heap: *const Struct_GNUNET_CONTAINER_Heap,
        iterator: GNUNET_CONTAINER_HeapIterator,
        iterator_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_CONTAINER_heap_walk_get_next(
        heap: *mut Struct_GNUNET_CONTAINER_Heap,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_heap_insert(
        heap: *mut Struct_GNUNET_CONTAINER_Heap,
        element: *mut ::std::os::raw::c_void,
        cost: GNUNET_CONTAINER_HeapCostType,
    ) -> *mut Struct_GNUNET_CONTAINER_HeapNode;
    pub fn GNUNET_CONTAINER_heap_remove_root(
        heap: *mut Struct_GNUNET_CONTAINER_Heap,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_heap_remove_node(
        node: *mut Struct_GNUNET_CONTAINER_HeapNode,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_heap_update_cost(
        heap: *mut Struct_GNUNET_CONTAINER_Heap,
        node: *mut Struct_GNUNET_CONTAINER_HeapNode,
        new_cost: GNUNET_CONTAINER_HeapCostType,
    );
    pub fn GNUNET_CONTAINER_slist_add(
        l: *mut Struct_GNUNET_CONTAINER_SList,
        disp: Enum_GNUNET_CONTAINER_SListDisposition,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    );
    pub fn GNUNET_CONTAINER_slist_add_end(
        l: *mut Struct_GNUNET_CONTAINER_SList,
        disp: Enum_GNUNET_CONTAINER_SListDisposition,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    );
    pub fn GNUNET_CONTAINER_slist_append(
        dst: *mut Struct_GNUNET_CONTAINER_SList,
        src: *mut Struct_GNUNET_CONTAINER_SList,
    );
    pub fn GNUNET_CONTAINER_slist_create() -> *mut Struct_GNUNET_CONTAINER_SList;
    pub fn GNUNET_CONTAINER_slist_destroy(l: *mut Struct_GNUNET_CONTAINER_SList);
    pub fn GNUNET_CONTAINER_slist_begin(
        l: *mut Struct_GNUNET_CONTAINER_SList,
    ) -> Struct_GNUNET_CONTAINER_SList_Iterator;
    pub fn GNUNET_CONTAINER_slist_clear(l: *mut Struct_GNUNET_CONTAINER_SList);
    pub fn GNUNET_CONTAINER_slist_contains(
        l: *const Struct_GNUNET_CONTAINER_SList,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_slist_contains2(
        l: *const Struct_GNUNET_CONTAINER_SList,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: size_t,
                arg3: *const ::std::os::raw::c_void,
                arg4: size_t,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_slist_count(
        l: *const Struct_GNUNET_CONTAINER_SList,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_slist_erase(i: *mut Struct_GNUNET_CONTAINER_SList_Iterator);
    pub fn GNUNET_CONTAINER_slist_insert(
        before: *mut Struct_GNUNET_CONTAINER_SList_Iterator,
        disp: Enum_GNUNET_CONTAINER_SListDisposition,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    );
    pub fn GNUNET_CONTAINER_slist_next(
        i: *mut Struct_GNUNET_CONTAINER_SList_Iterator,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_slist_end(
        i: *mut Struct_GNUNET_CONTAINER_SList_Iterator,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONTAINER_slist_get(
        i: *const Struct_GNUNET_CONTAINER_SList_Iterator,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONTAINER_slist_iter_destroy(i: *mut Struct_GNUNET_CONTAINER_SList_Iterator);
    pub fn GNUNET_BIO_read_open(
        _fn: *const ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_BIO_ReadHandle;
    pub fn GNUNET_BIO_read_close(
        h: *mut Struct_GNUNET_BIO_ReadHandle,
        emsg: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_read(
        h: *mut Struct_GNUNET_BIO_ReadHandle,
        what: *const ::std::os::raw::c_char,
        result: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_read_fn(
        h: *mut Struct_GNUNET_BIO_ReadHandle,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_void,
        len: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_read_string(
        h: *mut Struct_GNUNET_BIO_ReadHandle,
        what: *const ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_char,
        max_length: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_read_meta_data(
        h: *mut Struct_GNUNET_BIO_ReadHandle,
        what: *const ::std::os::raw::c_char,
        result: *mut *mut Struct_GNUNET_CONTAINER_MetaData,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_read_int32__(
        h: *mut Struct_GNUNET_BIO_ReadHandle,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        i: *mut int32_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_read_int64__(
        h: *mut Struct_GNUNET_BIO_ReadHandle,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        i: *mut int64_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_write_open(
        _fn: *const ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_BIO_WriteHandle;
    pub fn GNUNET_BIO_write_close(h: *mut Struct_GNUNET_BIO_WriteHandle) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_write(
        h: *mut Struct_GNUNET_BIO_WriteHandle,
        buffer: *const ::std::os::raw::c_void,
        n: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_flush(h: *mut Struct_GNUNET_BIO_WriteHandle) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_write_string(
        h: *mut Struct_GNUNET_BIO_WriteHandle,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_write_meta_data(
        h: *mut Struct_GNUNET_BIO_WriteHandle,
        m: *const Struct_GNUNET_CONTAINER_MetaData,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_write_int32(
        h: *mut Struct_GNUNET_BIO_WriteHandle,
        i: int32_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BIO_write_int64(
        h: *mut Struct_GNUNET_BIO_WriteHandle,
        i: int64_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONNECTION_persist_(connection: *mut Struct_GNUNET_CONNECTION_Handle);
    pub fn GNUNET_CONNECTION_disable_corking(
        connection: *mut Struct_GNUNET_CONNECTION_Handle,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONNECTION_create_from_existing(
        osSocket: *mut Struct_GNUNET_NETWORK_Handle,
    ) -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_accept(
        access: GNUNET_CONNECTION_AccessCheck,
        access_cls: *mut ::std::os::raw::c_void,
        lsock: *mut Struct_GNUNET_NETWORK_Handle,
    ) -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_connect(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        hostname: *const ::std::os::raw::c_char,
        port: uint16_t,
    ) -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_connect_to_unixpath(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        unixpath: *const ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_sockaddr(
        af_family: ::std::os::raw::c_int,
        serv_addr: *const Struct_sockaddr,
        addrlen: socklen_t,
    ) -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_check(
        connection: *mut Struct_GNUNET_CONNECTION_Handle,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONNECTION_get_address(
        connection: *mut Struct_GNUNET_CONNECTION_Handle,
        addr: *mut *mut ::std::os::raw::c_void,
        addrlen: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CONNECTION_destroy(connection: *mut Struct_GNUNET_CONNECTION_Handle);
    pub fn GNUNET_CONNECTION_receive(
        connection: *mut Struct_GNUNET_CONNECTION_Handle,
        max: size_t,
        timeout: Struct_GNUNET_TIME_Relative,
        receiver: GNUNET_CONNECTION_Receiver,
        receiver_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_CONNECTION_receive_cancel(
        connection: *mut Struct_GNUNET_CONNECTION_Handle,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_CONNECTION_notify_transmit_ready(
        connection: *mut Struct_GNUNET_CONNECTION_Handle,
        size: size_t,
        timeout: Struct_GNUNET_TIME_Relative,
        notify: GNUNET_CONNECTION_TransmitReadyNotify,
        notify_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_CONNECTION_TransmitHandle;
    pub fn GNUNET_CONNECTION_notify_transmit_ready_cancel(
        th: *mut Struct_GNUNET_CONNECTION_TransmitHandle,
    );
    pub fn GNUNET_CLIENT_connect(
        service_name: *const ::std::os::raw::c_char,
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ) -> *mut Struct_GNUNET_CLIENT_Connection;
    pub fn GNUNET_CLIENT_disconnect(client: *mut Struct_GNUNET_CLIENT_Connection);
    pub fn GNUNET_CLIENT_receive(
        client: *mut Struct_GNUNET_CLIENT_Connection,
        handler: GNUNET_CLIENT_MessageHandler,
        handler_cls: *mut ::std::os::raw::c_void,
        timeout: Struct_GNUNET_TIME_Relative,
    );
    pub fn GNUNET_CLIENT_notify_transmit_ready(
        client: *mut Struct_GNUNET_CLIENT_Connection,
        size: size_t,
        timeout: Struct_GNUNET_TIME_Relative,
        auto_retry: ::std::os::raw::c_int,
        notify: GNUNET_CONNECTION_TransmitReadyNotify,
        notify_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_CLIENT_TransmitHandle;
    pub fn GNUNET_CLIENT_notify_transmit_ready_cancel(th: *mut Struct_GNUNET_CLIENT_TransmitHandle);
    pub fn GNUNET_CLIENT_transmit_and_get_response(
        client: *mut Struct_GNUNET_CLIENT_Connection,
        hdr: *const Struct_GNUNET_MessageHeader,
        timeout: Struct_GNUNET_TIME_Relative,
        auto_retry: ::std::os::raw::c_int,
        rn: GNUNET_CLIENT_MessageHandler,
        rn_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_CLIENT_service_test(
        service: *const ::std::os::raw::c_char,
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        timeout: Struct_GNUNET_TIME_Relative,
        cb: GNUNET_CLIENT_TestResultCallback,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_CLIENT_TestHandle;
    pub fn GNUNET_CLIENT_service_test_cancel(th: *mut Struct_GNUNET_CLIENT_TestHandle);
    pub fn GNUNET_GETOPT_run(
        binaryOptions: *const ::std::os::raw::c_char,
        allOptions: *const Struct_GNUNET_GETOPT_CommandLineOption,
        argc: ::std::os::raw::c_uint,
        argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_set_ulong(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_set_relative_time(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_set_uint(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_set_one(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_set_string(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_set_filename(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_increment_value(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_format_help_(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GETOPT_print_version_(
        ctx: *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
        scls: *mut ::std::os::raw::c_void,
        option: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_SERVER_create_with_sockets(
        access: GNUNET_CONNECTION_AccessCheck,
        access_cls: *mut ::std::os::raw::c_void,
        lsocks: *mut *mut Struct_GNUNET_NETWORK_Handle,
        idle_timeout: Struct_GNUNET_TIME_Relative,
        require_found: ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_SERVER_Handle;
    pub fn GNUNET_SERVER_create(
        access: GNUNET_CONNECTION_AccessCheck,
        access_cls: *mut ::std::os::raw::c_void,
        server_addr: *const *mut Struct_sockaddr,
        socklen: *const socklen_t,
        idle_timeout: Struct_GNUNET_TIME_Relative,
        require_found: ::std::os::raw::c_int,
    ) -> *mut Struct_GNUNET_SERVER_Handle;
    pub fn GNUNET_SERVER_suspend(server: *mut Struct_GNUNET_SERVER_Handle);
    pub fn GNUNET_SERVER_resume(server: *mut Struct_GNUNET_SERVER_Handle);
    pub fn GNUNET_SERVER_stop_listening(server: *mut Struct_GNUNET_SERVER_Handle);
    pub fn GNUNET_SERVER_destroy(server: *mut Struct_GNUNET_SERVER_Handle);
    pub fn GNUNET_SERVER_add_handlers(
        server: *mut Struct_GNUNET_SERVER_Handle,
        handlers: *const Struct_GNUNET_SERVER_MessageHandler,
    );
    pub fn GNUNET_SERVER_notify_transmit_ready(
        client: *mut Struct_GNUNET_SERVER_Client,
        size: size_t,
        timeout: Struct_GNUNET_TIME_Relative,
        callback: GNUNET_CONNECTION_TransmitReadyNotify,
        callback_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_SERVER_TransmitHandle;
    pub fn GNUNET_SERVER_notify_transmit_ready_cancel(th: *mut Struct_GNUNET_SERVER_TransmitHandle);
    pub fn GNUNET_SERVER_client_mark_monitor(client: *mut Struct_GNUNET_SERVER_Client);
    pub fn GNUNET_SERVER_client_persist_(client: *mut Struct_GNUNET_SERVER_Client);
    pub fn GNUNET_SERVER_receive_done(
        client: *mut Struct_GNUNET_SERVER_Client,
        success: ::std::os::raw::c_int,
    );
    pub fn GNUNET_SERVER_client_set_timeout(
        client: *mut Struct_GNUNET_SERVER_Client,
        timeout: Struct_GNUNET_TIME_Relative,
    );
    pub fn GNUNET_SERVER_client_get_user_context_(
        client: *mut Struct_GNUNET_SERVER_Client,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_SERVER_client_set_user_context_(
        client: *mut Struct_GNUNET_SERVER_Client,
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    );
    pub fn GNUNET_SERVER_disable_receive_done_warning(client: *mut Struct_GNUNET_SERVER_Client);
    pub fn GNUNET_SERVER_inject(
        server: *mut Struct_GNUNET_SERVER_Handle,
        sender: *mut Struct_GNUNET_SERVER_Client,
        message: *const Struct_GNUNET_MessageHeader,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_SERVER_connect_socket(
        server: *mut Struct_GNUNET_SERVER_Handle,
        connection: *mut Struct_GNUNET_CONNECTION_Handle,
    ) -> *mut Struct_GNUNET_SERVER_Client;
    pub fn GNUNET_SERVER_client_keep(client: *mut Struct_GNUNET_SERVER_Client);
    pub fn GNUNET_SERVER_client_drop(client: *mut Struct_GNUNET_SERVER_Client);
    pub fn GNUNET_SERVER_client_get_address(
        client: *mut Struct_GNUNET_SERVER_Client,
        addr: *mut *mut ::std::os::raw::c_void,
        addrlen: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_SERVER_disconnect_notify(
        server: *mut Struct_GNUNET_SERVER_Handle,
        callback: GNUNET_SERVER_DisconnectCallback,
        callback_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_SERVER_connect_notify(
        server: *mut Struct_GNUNET_SERVER_Handle,
        callback: GNUNET_SERVER_ConnectCallback,
        callback_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_SERVER_disconnect_notify_cancel(
        server: *mut Struct_GNUNET_SERVER_Handle,
        callback: GNUNET_SERVER_DisconnectCallback,
        callback_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_SERVER_connect_notify_cancel(
        server: *mut Struct_GNUNET_SERVER_Handle,
        callback: GNUNET_SERVER_ConnectCallback,
        callback_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_SERVER_client_disconnect(client: *mut Struct_GNUNET_SERVER_Client);
    pub fn GNUNET_SERVER_client_disable_corking(
        client: *mut Struct_GNUNET_SERVER_Client,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_SERVER_transmit_context_create(
        client: *mut Struct_GNUNET_SERVER_Client,
    ) -> *mut Struct_GNUNET_SERVER_TransmitContext;
    pub fn GNUNET_SERVER_transmit_context_append_data(
        tc: *mut Struct_GNUNET_SERVER_TransmitContext,
        data: *const ::std::os::raw::c_void,
        length: size_t,
        _type: uint16_t,
    );
    pub fn GNUNET_SERVER_transmit_context_append_message(
        tc: *mut Struct_GNUNET_SERVER_TransmitContext,
        msg: *const Struct_GNUNET_MessageHeader,
    );
    pub fn GNUNET_SERVER_transmit_context_run(
        tc: *mut Struct_GNUNET_SERVER_TransmitContext,
        timeout: Struct_GNUNET_TIME_Relative,
    );
    pub fn GNUNET_SERVER_transmit_context_destroy(
        tc: *mut Struct_GNUNET_SERVER_TransmitContext,
        success: ::std::os::raw::c_int,
    );
    pub fn GNUNET_SERVER_notification_context_create(
        server: *mut Struct_GNUNET_SERVER_Handle,
        queue_length: ::std::os::raw::c_uint,
    ) -> *mut Struct_GNUNET_SERVER_NotificationContext;
    pub fn GNUNET_SERVER_notification_context_destroy(
        nc: *mut Struct_GNUNET_SERVER_NotificationContext,
    );
    pub fn GNUNET_SERVER_notification_context_add(
        nc: *mut Struct_GNUNET_SERVER_NotificationContext,
        client: *mut Struct_GNUNET_SERVER_Client,
    );
    pub fn GNUNET_SERVER_notification_context_unicast(
        nc: *mut Struct_GNUNET_SERVER_NotificationContext,
        client: *mut Struct_GNUNET_SERVER_Client,
        msg: *const Struct_GNUNET_MessageHeader,
        can_drop: ::std::os::raw::c_int,
    );
    pub fn GNUNET_SERVER_notification_context_broadcast(
        nc: *mut Struct_GNUNET_SERVER_NotificationContext,
        msg: *const Struct_GNUNET_MessageHeader,
        can_drop: ::std::os::raw::c_int,
    );
    pub fn GNUNET_SERVER_mst_create(
        cb: GNUNET_SERVER_MessageTokenizerCallback,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_SERVER_MessageStreamTokenizer;
    pub fn GNUNET_SERVER_mst_receive(
        mst: *mut Struct_GNUNET_SERVER_MessageStreamTokenizer,
        client_identity: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_char,
        size: size_t,
        purge: ::std::os::raw::c_int,
        one_shot: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_SERVER_mst_destroy(mst: *mut Struct_GNUNET_SERVER_MessageStreamTokenizer);
    pub fn GNUNET_SERVER_set_callbacks(
        server: *mut Struct_GNUNET_SERVER_Handle,
        create: GNUNET_SERVER_MstCreateCallback,
        destroy: GNUNET_SERVER_MstDestroyCallback,
        receive: GNUNET_SERVER_MstReceiveCallback,
        cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_HELPER_start(
        with_control_pipe: ::std::os::raw::c_int,
        binary_name: *const ::std::os::raw::c_char,
        binary_argv: *mut *mut ::std::os::raw::c_char,
        cb: GNUNET_SERVER_MessageTokenizerCallback,
        exp_cb: GNUNET_HELPER_ExceptionCallback,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_HELPER_Handle;
    pub fn GNUNET_HELPER_kill(
        h: *mut Struct_GNUNET_HELPER_Handle,
        soft_kill: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_HELPER_wait(h: *mut Struct_GNUNET_HELPER_Handle) -> ::std::os::raw::c_int;
    pub fn GNUNET_HELPER_destroy(h: *mut Struct_GNUNET_HELPER_Handle);
    pub fn GNUNET_HELPER_stop(
        h: *mut Struct_GNUNET_HELPER_Handle,
        soft_kill: ::std::os::raw::c_int,
    );
    pub fn GNUNET_HELPER_send(
        h: *mut Struct_GNUNET_HELPER_Handle,
        msg: *const Struct_GNUNET_MessageHeader,
        can_drop: ::std::os::raw::c_int,
        cont: GNUNET_HELPER_Continuation,
        cont_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_HELPER_SendHandle;
    pub fn GNUNET_HELPER_send_cancel(sh: *mut Struct_GNUNET_HELPER_SendHandle);
    pub fn GNUNET_MQ_extract_nested_mh_(
        mh: *const Struct_GNUNET_MessageHeader,
        base_size: uint16_t,
    ) -> *mut Struct_GNUNET_MessageHeader;
    pub fn GNUNET_MQ_msg_nested_mh_(
        mhp: *mut *mut Struct_GNUNET_MessageHeader,
        base_size: uint16_t,
        _type: uint16_t,
        nested_mh: *const Struct_GNUNET_MessageHeader,
    ) -> *mut Struct_GNUNET_MQ_Envelope;
    pub fn GNUNET_MQ_msg_(
        mhp: *mut *mut Struct_GNUNET_MessageHeader,
        size: uint16_t,
        _type: uint16_t,
    ) -> *mut Struct_GNUNET_MQ_Envelope;
    pub fn GNUNET_MQ_discard(mqm: *mut Struct_GNUNET_MQ_Envelope);
    pub fn GNUNET_MQ_send(mq: *mut Struct_GNUNET_MQ_Handle, ev: *mut Struct_GNUNET_MQ_Envelope);
    pub fn GNUNET_MQ_send_cancel(ev: *mut Struct_GNUNET_MQ_Envelope);
    pub fn GNUNET_MQ_assoc_add(
        mq: *mut Struct_GNUNET_MQ_Handle,
        assoc_data: *mut ::std::os::raw::c_void,
    ) -> uint32_t;
    pub fn GNUNET_MQ_assoc_get(
        mq: *mut Struct_GNUNET_MQ_Handle,
        request_id: uint32_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_MQ_assoc_remove(
        mq: *mut Struct_GNUNET_MQ_Handle,
        request_id: uint32_t,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_MQ_queue_for_connection_client(
        connection: *mut Struct_GNUNET_CLIENT_Connection,
        handlers: *const Struct_GNUNET_MQ_MessageHandler,
        error_handler: GNUNET_MQ_ErrorHandler,
        cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_MQ_Handle;
    pub fn GNUNET_MQ_queue_for_server_client(
        client: *mut Struct_GNUNET_SERVER_Client,
    ) -> *mut Struct_GNUNET_MQ_Handle;
    pub fn GNUNET_MQ_queue_for_callbacks(
        send: GNUNET_MQ_SendImpl,
        destroy: GNUNET_MQ_DestroyImpl,
        cancel: GNUNET_MQ_CancelImpl,
        impl_state: *mut ::std::os::raw::c_void,
        handlers: *const Struct_GNUNET_MQ_MessageHandler,
        error_handler: GNUNET_MQ_ErrorHandler,
        cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_MQ_Handle;
    pub fn GNUNET_MQ_replace_handlers(
        mq: *mut Struct_GNUNET_MQ_Handle,
        new_handlers: *const Struct_GNUNET_MQ_MessageHandler,
        cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_MQ_notify_sent(
        ev: *mut Struct_GNUNET_MQ_Envelope,
        cb: GNUNET_MQ_NotifyCallback,
        cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_MQ_destroy(mq: *mut Struct_GNUNET_MQ_Handle);
    pub fn GNUNET_MQ_inject_message(
        mq: *mut Struct_GNUNET_MQ_Handle,
        mh: *const Struct_GNUNET_MessageHeader,
    );
    pub fn GNUNET_MQ_inject_error(mq: *mut Struct_GNUNET_MQ_Handle, error: Enum_GNUNET_MQ_Error);
    pub fn GNUNET_MQ_impl_send_continue(mq: *mut Struct_GNUNET_MQ_Handle);
    pub fn GNUNET_MQ_impl_current(
        mq: *mut Struct_GNUNET_MQ_Handle,
    ) -> *const Struct_GNUNET_MessageHeader;
    pub fn GNUNET_MQ_impl_state(mq: *mut Struct_GNUNET_MQ_Handle) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_OS_installation_get_path(
        dirkind: Enum_GNUNET_OS_InstallationPathKind,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_OS_get_libexec_binary_path(
        progname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_OS_network_interfaces_list(
        _proc: GNUNET_OS_NetworkInterfaceProcessor,
        proc_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_OS_process_current() -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_process_kill(
        _proc: *mut Struct_GNUNET_OS_Process,
        sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_OS_process_destroy(_proc: *mut Struct_GNUNET_OS_Process);
    pub fn GNUNET_OS_process_get_pid(_proc: *mut Struct_GNUNET_OS_Process) -> pid_t;
    pub fn GNUNET_OS_start_process_vap(
        pipe_control: ::std::os::raw::c_int,
        std_inheritance: Enum_GNUNET_OS_InheritStdioFlags,
        pipe_stdin: *mut Struct_GNUNET_DISK_PipeHandle,
        pipe_stdout: *mut Struct_GNUNET_DISK_PipeHandle,
        pipe_stderr: *mut Struct_GNUNET_DISK_PipeHandle,
        filename: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_start_process(
        pipe_control: ::std::os::raw::c_int,
        std_inheritance: Enum_GNUNET_OS_InheritStdioFlags,
        pipe_stdin: *mut Struct_GNUNET_DISK_PipeHandle,
        pipe_stdout: *mut Struct_GNUNET_DISK_PipeHandle,
        pipe_stderr: *mut Struct_GNUNET_DISK_PipeHandle,
        filename: *const ::std::os::raw::c_char,
        ...
    ) -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_start_process_va(
        pipe_control: ::std::os::raw::c_int,
        std_inheritance: Enum_GNUNET_OS_InheritStdioFlags,
        pipe_stdin: *mut Struct_GNUNET_DISK_PipeHandle,
        pipe_stdout: *mut Struct_GNUNET_DISK_PipeHandle,
        pipe_stderr: *mut Struct_GNUNET_DISK_PipeHandle,
        filename: *const ::std::os::raw::c_char,
        va: va_list,
    ) -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_start_process_v(
        pipe_control: ::std::os::raw::c_int,
        std_inheritance: Enum_GNUNET_OS_InheritStdioFlags,
        lsocks: *const ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_start_process_s(
        pipe_control: ::std::os::raw::c_int,
        std_inheritance: ::std::os::raw::c_uint,
        lsocks: *const ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        ...
    ) -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_command_stop(cmd: *mut Struct_GNUNET_OS_CommandHandle);
    pub fn GNUNET_OS_command_run(
        _proc: GNUNET_OS_LineProcessor,
        proc_cls: *mut ::std::os::raw::c_void,
        timeout: Struct_GNUNET_TIME_Relative,
        binary: *const ::std::os::raw::c_char,
        ...
    ) -> *mut Struct_GNUNET_OS_CommandHandle;
    pub fn GNUNET_OS_process_status(
        _proc: *mut Struct_GNUNET_OS_Process,
        _type: *mut Enum_GNUNET_OS_ProcessStatusType,
        code: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_OS_process_wait(_proc: *mut Struct_GNUNET_OS_Process) -> ::std::os::raw::c_int;
    pub fn GNUNET_OS_install_parent_control_handler(
        cls: *mut ::std::os::raw::c_void,
        tc: *const Struct_GNUNET_SCHEDULER_TaskContext,
    );
    pub fn GNUNET_OS_check_helper_binary(
        binary: *const ::std::os::raw::c_char,
        check_suid: ::std::os::raw::c_int,
        params: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_PEER_search(pid: *const Struct_GNUNET_PeerIdentity) -> GNUNET_PEER_Id;
    pub fn GNUNET_PEER_intern(pid: *const Struct_GNUNET_PeerIdentity) -> GNUNET_PEER_Id;
    pub fn GNUNET_PEER_change_rc(id: GNUNET_PEER_Id, delta: ::std::os::raw::c_int);
    pub fn GNUNET_PEER_decrement_rcs(ids: *const GNUNET_PEER_Id, count: ::std::os::raw::c_uint);
    pub fn GNUNET_PEER_resolve(id: GNUNET_PEER_Id, pid: *mut Struct_GNUNET_PeerIdentity);
    pub fn GNUNET_PEER_resolve2(id: GNUNET_PEER_Id) -> *const Struct_GNUNET_PeerIdentity;
    pub fn GNUNET_PLUGIN_test(library_name: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
    pub fn GNUNET_PLUGIN_load(
        library_name: *const ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_PLUGIN_load_all(
        __xpg_basename: *const ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
        cb: GNUNET_PLUGIN_LoaderCallback,
        cb_cls: *mut ::std::os::raw::c_void,
    );
    pub fn GNUNET_PLUGIN_unload(
        library_name: *const ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
    pub fn GNUNET_PROGRAM_run2(
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        binaryName: *const ::std::os::raw::c_char,
        binaryHelp: *const ::std::os::raw::c_char,
        options: *const Struct_GNUNET_GETOPT_CommandLineOption,
        task: GNUNET_PROGRAM_Main,
        task_cls: *mut ::std::os::raw::c_void,
        run_without_scheduler: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_PROGRAM_run(
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        binaryName: *const ::std::os::raw::c_char,
        binaryHelp: *const ::std::os::raw::c_char,
        options: *const Struct_GNUNET_GETOPT_CommandLineOption,
        task: GNUNET_PROGRAM_Main,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_SERVICE_get_server_addresses(
        service_name: *const ::std::os::raw::c_char,
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        addrs: *mut *mut *mut Struct_sockaddr,
        addr_lens: *mut *mut socklen_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_SERVICE_run(
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        service_name: *const ::std::os::raw::c_char,
        options: Enum_GNUNET_SERVICE_Options,
        task: GNUNET_SERVICE_Main,
        task_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_SERVICE_start(
        service_name: *const ::std::os::raw::c_char,
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        options: Enum_GNUNET_SERVICE_Options,
    ) -> *mut Struct_GNUNET_SERVICE_Context;
    pub fn GNUNET_SERVICE_get_server(
        ctx: *mut Struct_GNUNET_SERVICE_Context,
    ) -> *mut Struct_GNUNET_SERVER_Handle;
    pub fn GNUNET_SERVICE_stop(sctx: *mut Struct_GNUNET_SERVICE_Context);
    pub fn GNUNET_SIGNAL_handler_install(
        signal: ::std::os::raw::c_int,
        handler: GNUNET_SIGNAL_Handler,
    ) -> *mut Struct_GNUNET_SIGNAL_Context;
    pub fn GNUNET_SIGNAL_handler_uninstall(ctx: *mut Struct_GNUNET_SIGNAL_Context);
    pub fn GNUNET_SIGNAL_raise(sig: ::std::os::raw::c_int);
    pub fn GNUNET_STRINGS_fancy_size_to_bytes(
        fancy_size: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_fancy_time_to_relative(
        fancy_time: *const ::std::os::raw::c_char,
        rtime: *mut Struct_GNUNET_TIME_Relative,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_fancy_time_to_absolute(
        fancy_time: *const ::std::os::raw::c_char,
        atime: *mut Struct_GNUNET_TIME_Absolute,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_byte_size_fancy(
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_conv(
        input: *const ::std::os::raw::c_char,
        len: size_t,
        input_charset: *const ::std::os::raw::c_char,
        output_charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_to_utf8(
        input: *const ::std::os::raw::c_char,
        len: size_t,
        charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_from_utf8(
        input: *const ::std::os::raw::c_char,
        len: size_t,
        charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_utf8_tolower(
        input: *const ::std::os::raw::c_char,
        output: *mut ::std::os::raw::c_char,
    );
    pub fn GNUNET_STRINGS_utf8_toupper(
        input: *const ::std::os::raw::c_char,
        output: *mut ::std::os::raw::c_char,
    );
    pub fn GNUNET_STRINGS_filename_expand(
        fil: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_buffer_fill(
        buffer: *mut ::std::os::raw::c_char,
        size: size_t,
        count: ::std::os::raw::c_uint,
        ...
    ) -> size_t;
    pub fn GNUNET_STRINGS_buffer_tokenize(
        buffer: *const ::std::os::raw::c_char,
        size: size_t,
        count: ::std::os::raw::c_uint,
        ...
    ) -> ::std::os::raw::c_uint;
    pub fn GNUNET_STRINGS_absolute_time_to_string(
        t: Struct_GNUNET_TIME_Absolute,
    ) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_relative_time_to_string(
        delta: Struct_GNUNET_TIME_Relative,
        do_round: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_get_short_name(
        filename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_data_to_string(
        data: *const ::std::os::raw::c_void,
        size: size_t,
        out: *mut ::std::os::raw::c_char,
        out_size: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_STRINGS_string_to_data(
        enc: *const ::std::os::raw::c_char,
        enclen: size_t,
        out: *mut ::std::os::raw::c_void,
        out_size: size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_base64_encode(
        data: *const ::std::os::raw::c_char,
        len: size_t,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> size_t;
    pub fn GNUNET_STRINGS_base64_decode(
        data: *const ::std::os::raw::c_char,
        len: size_t,
        output: *mut *mut ::std::os::raw::c_char,
    ) -> size_t;
    pub fn GNUNET_STRINGS_parse_uri(
        path: *const ::std::os::raw::c_char,
        scheme_part: *mut *mut ::std::os::raw::c_char,
        path_part: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_path_is_absolute(
        filename: *const ::std::os::raw::c_char,
        can_be_uri: ::std::os::raw::c_int,
        r_is_uri: *mut ::std::os::raw::c_int,
        r_uri_scheme: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_check_filename(
        filename: *const ::std::os::raw::c_char,
        checks: Enum_GNUNET_STRINGS_FilenameCheck,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_to_address_ipv6(
        zt_addr: *const ::std::os::raw::c_char,
        addrlen: uint16_t,
        r_buf: *mut Struct_sockaddr_in6,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_to_address_ipv4(
        zt_addr: *const ::std::os::raw::c_char,
        addrlen: uint16_t,
        r_buf: *mut Struct_sockaddr_in,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_to_address_ip(
        addr: *const ::std::os::raw::c_char,
        addrlen: uint16_t,
        r_buf: *mut Struct_sockaddr_storage,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_get_utf8_args(
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        u8argc: *mut ::std::os::raw::c_int,
        u8argv: *mut *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_STRINGS_parse_ipv4_policy(
        routeListX: *const ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_STRINGS_IPv4NetworkPolicy;
    pub fn GNUNET_STRINGS_parse_ipv6_policy(
        routeListX: *const ::std::os::raw::c_char,
    ) -> *mut Struct_GNUNET_STRINGS_IPv6NetworkPolicy;
    pub fn GNUNET_TUN_initialize_ipv4_header(
        ip: *mut Struct_GNUNET_TUN_IPv4Header,
        protocol: uint8_t,
        payload_length: uint16_t,
        src: *const Struct_in_addr,
        dst: *const Struct_in_addr,
    );
    pub fn GNUNET_TUN_initialize_ipv6_header(
        ip: *mut Struct_GNUNET_TUN_IPv6Header,
        protocol: uint8_t,
        payload_length: uint16_t,
        src: *const Struct_in6_addr,
        dst: *const Struct_in6_addr,
    );
    pub fn GNUNET_TUN_calculate_tcp4_checksum(
        ip: *const Struct_GNUNET_TUN_IPv4Header,
        tcp: *mut Struct_GNUNET_TUN_TcpHeader,
        payload: *const ::std::os::raw::c_void,
        payload_length: uint16_t,
    );
    pub fn GNUNET_TUN_calculate_tcp6_checksum(
        ip: *const Struct_GNUNET_TUN_IPv6Header,
        tcp: *mut Struct_GNUNET_TUN_TcpHeader,
        payload: *const ::std::os::raw::c_void,
        payload_length: uint16_t,
    );
    pub fn GNUNET_TUN_calculate_udp4_checksum(
        ip: *const Struct_GNUNET_TUN_IPv4Header,
        udp: *mut Struct_GNUNET_TUN_UdpHeader,
        payload: *const ::std::os::raw::c_void,
        payload_length: uint16_t,
    );
    pub fn GNUNET_TUN_calculate_udp6_checksum(
        ip: *const Struct_GNUNET_TUN_IPv6Header,
        udp: *mut Struct_GNUNET_TUN_UdpHeader,
        payload: *const ::std::os::raw::c_void,
        payload_length: uint16_t,
    );
    pub fn GNUNET_TUN_calculate_icmp_checksum(
        icmp: *mut Struct_GNUNET_TUN_IcmpHeader,
        payload: *const ::std::os::raw::c_void,
        payload_length: uint16_t,
    );
    pub fn GNUNET_TUN_ipv4toregexsearch(
        ip: *const Struct_in_addr,
        port: uint16_t,
        rxstr: *mut ::std::os::raw::c_char,
    );
    pub fn GNUNET_TUN_ipv6toregexsearch(
        ipv6: *const Struct_in6_addr,
        port: uint16_t,
        rxstr: *mut ::std::os::raw::c_char,
    );
    pub fn GNUNET_TUN_ipv6policy2regex(
        policy: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_TUN_ipv4policy2regex(
        policy: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_TUN_service_name_to_hash(
        service_name: *const ::std::os::raw::c_char,
        hc: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_DNSPARSER_check_label(
        label: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_check_name(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_parse(
        udp_payload: *const ::std::os::raw::c_char,
        udp_payload_length: size_t,
    ) -> *mut Struct_GNUNET_DNSPARSER_Packet;
    pub fn GNUNET_DNSPARSER_free_packet(p: *mut Struct_GNUNET_DNSPARSER_Packet);
    pub fn GNUNET_DNSPARSER_pack(
        p: *const Struct_GNUNET_DNSPARSER_Packet,
        max: uint16_t,
        buf: *mut *mut ::std::os::raw::c_char,
        buf_length: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_name(
        dst: *mut ::std::os::raw::c_char,
        dst_len: size_t,
        off: *mut size_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_query(
        dst: *mut ::std::os::raw::c_char,
        dst_len: size_t,
        off: *mut size_t,
        query: *const Struct_GNUNET_DNSPARSER_Query,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_mx(
        dst: *mut ::std::os::raw::c_char,
        dst_len: size_t,
        off: *mut size_t,
        mx: *const Struct_GNUNET_DNSPARSER_MxRecord,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_soa(
        dst: *mut ::std::os::raw::c_char,
        dst_len: size_t,
        off: *mut size_t,
        soa: *const Struct_GNUNET_DNSPARSER_SoaRecord,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_cert(
        dst: *mut ::std::os::raw::c_char,
        dst_len: size_t,
        off: *mut size_t,
        cert: *const Struct_GNUNET_DNSPARSER_CertRecord,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_srv(
        dst: *mut ::std::os::raw::c_char,
        dst_len: size_t,
        off: *mut size_t,
        srv: *const Struct_GNUNET_DNSPARSER_SrvRecord,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_parse_record(
        udp_payload: *const ::std::os::raw::c_char,
        udp_payload_length: size_t,
        off: *mut size_t,
        r: *mut Struct_GNUNET_DNSPARSER_Record,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_parse_name(
        udp_payload: *const ::std::os::raw::c_char,
        udp_payload_length: size_t,
        off: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_DNSPARSER_parse_query(
        udp_payload: *const ::std::os::raw::c_char,
        udp_payload_length: size_t,
        off: *mut size_t,
        q: *mut Struct_GNUNET_DNSPARSER_Query,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_DNSPARSER_parse_soa(
        udp_payload: *const ::std::os::raw::c_char,
        udp_payload_length: size_t,
        off: *mut size_t,
    ) -> *mut Struct_GNUNET_DNSPARSER_SoaRecord;
    pub fn GNUNET_DNSPARSER_parse_cert(
        udp_payload: *const ::std::os::raw::c_char,
        udp_payload_length: size_t,
        off: *mut size_t,
    ) -> *mut Struct_GNUNET_DNSPARSER_CertRecord;
    pub fn GNUNET_DNSPARSER_parse_mx(
        udp_payload: *const ::std::os::raw::c_char,
        udp_payload_length: size_t,
        off: *mut size_t,
    ) -> *mut Struct_GNUNET_DNSPARSER_MxRecord;
    pub fn GNUNET_DNSPARSER_parse_srv(
        r_name: *const ::std::os::raw::c_char,
        udp_payload: *const ::std::os::raw::c_char,
        udp_payload_length: size_t,
        off: *mut size_t,
    ) -> *mut Struct_GNUNET_DNSPARSER_SrvRecord;
    pub fn GNUNET_DNSPARSER_free_record(r: *mut Struct_GNUNET_DNSPARSER_Record);
    pub fn GNUNET_DNSPARSER_free_mx(mx: *mut Struct_GNUNET_DNSPARSER_MxRecord);
    pub fn GNUNET_DNSPARSER_free_srv(srv: *mut Struct_GNUNET_DNSPARSER_SrvRecord);
    pub fn GNUNET_DNSPARSER_free_soa(soa: *mut Struct_GNUNET_DNSPARSER_SoaRecord);
    pub fn GNUNET_DNSPARSER_free_cert(cert: *mut Struct_GNUNET_DNSPARSER_CertRecord);
    pub fn GNUNET_BLOCK_mingle_hash(
        _in: *const Struct_GNUNET_HashCode,
        mingle_number: uint32_t,
        hc: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_BLOCK_context_create(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ) -> *mut Struct_GNUNET_BLOCK_Context;
    pub fn GNUNET_BLOCK_context_destroy(ctx: *mut Struct_GNUNET_BLOCK_Context);
    pub fn GNUNET_BLOCK_evaluate(
        ctx: *mut Struct_GNUNET_BLOCK_Context,
        _type: Enum_GNUNET_BLOCK_Type,
        query: *const Struct_GNUNET_HashCode,
        bf: *mut *mut Struct_GNUNET_CONTAINER_BloomFilter,
        bf_mutator: int32_t,
        xquery: *const ::std::os::raw::c_void,
        xquery_size: size_t,
        reply_block: *const ::std::os::raw::c_void,
        reply_block_size: size_t,
    ) -> Enum_GNUNET_BLOCK_EvaluationResult;
    pub fn GNUNET_BLOCK_get_key(
        ctx: *mut Struct_GNUNET_BLOCK_Context,
        _type: Enum_GNUNET_BLOCK_Type,
        block: *const ::std::os::raw::c_void,
        block_size: size_t,
        key: *mut Struct_GNUNET_HashCode,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_BLOCK_construct_bloomfilter(
        bf_mutator: int32_t,
        seen_results: *const Struct_GNUNET_HashCode,
        seen_results_count: ::std::os::raw::c_uint,
    ) -> *mut Struct_GNUNET_CONTAINER_BloomFilter;
    pub fn GNUNET_GNSRECORD_value_to_string(
        _type: uint32_t,
        data: *const ::std::os::raw::c_void,
        data_size: size_t,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_GNSRECORD_string_to_value(
        _type: uint32_t,
        s: *const ::std::os::raw::c_char,
        data: *mut *mut ::std::os::raw::c_void,
        data_size: *mut size_t,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GNSRECORD_typename_to_number(
        dns_typename: *const ::std::os::raw::c_char,
    ) -> uint32_t;
    pub fn GNUNET_GNSRECORD_number_to_typename(_type: uint32_t) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_GNSRECORD_records_get_size(
        rd_count: ::std::os::raw::c_uint,
        rd: *const Struct_GNUNET_GNSRECORD_Data,
    ) -> size_t;
    pub fn GNUNET_GNSRECORD_records_serialize(
        rd_count: ::std::os::raw::c_uint,
        rd: *const Struct_GNUNET_GNSRECORD_Data,
        dest_size: size_t,
        dest: *mut ::std::os::raw::c_char,
    ) -> ssize_t;
    pub fn GNUNET_GNSRECORD_records_deserialize(
        len: size_t,
        src: *const ::std::os::raw::c_char,
        rd_count: ::std::os::raw::c_uint,
        dest: *mut Struct_GNUNET_GNSRECORD_Data,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GNSRECORD_is_expired(
        rd: *const Struct_GNUNET_GNSRECORD_Data,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GNSRECORD_string_to_lowercase(
        src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
    pub fn GNUNET_GNSRECORD_z2s(
        z: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    ) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_GNSRECORD_pkey_to_zkey(
        pkey: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    ) -> *const ::std::os::raw::c_char;
    pub fn GNUNET_GNSRECORD_zkey_to_pkey(
        zkey: *const ::std::os::raw::c_char,
        pkey: *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GNSRECORD_query_from_private_key(
        zone: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        label: *const ::std::os::raw::c_char,
        query: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_GNSRECORD_query_from_public_key(
        _pub: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
        label: *const ::std::os::raw::c_char,
        query: *mut Struct_GNUNET_HashCode,
    );
    pub fn GNUNET_GNSRECORD_block_create(
        key: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        expire: Struct_GNUNET_TIME_Absolute,
        label: *const ::std::os::raw::c_char,
        rd: *const Struct_GNUNET_GNSRECORD_Data,
        rd_count: ::std::os::raw::c_uint,
    ) -> *mut Struct_GNUNET_GNSRECORD_Block;
    pub fn GNUNET_GNSRECORD_block_verify(
        block: *const Struct_GNUNET_GNSRECORD_Block,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GNSRECORD_block_decrypt(
        block: *const Struct_GNUNET_GNSRECORD_Block,
        zone_key: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
        label: *const ::std::os::raw::c_char,
        _proc: GNUNET_GNSRECORD_RecordCallback,
        proc_cls: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GNSRECORD_records_cmp(
        a: *const Struct_GNUNET_GNSRECORD_Data,
        b: *const Struct_GNUNET_GNSRECORD_Data,
    ) -> ::std::os::raw::c_int;
    pub fn GNUNET_GNSRECORD_record_get_expiration_time(
        rd_count: ::std::os::raw::c_uint,
        rd: *const Struct_GNUNET_GNSRECORD_Data,
    ) -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_NAMESTORE_connect(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ) -> *mut Struct_GNUNET_NAMESTORE_Handle;
    pub fn GNUNET_NAMESTORE_disconnect(h: *mut Struct_GNUNET_NAMESTORE_Handle);
    pub fn GNUNET_NAMESTORE_records_store(
        h: *mut Struct_GNUNET_NAMESTORE_Handle,
        pkey: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        label: *const ::std::os::raw::c_char,
        rd_count: ::std::os::raw::c_uint,
        rd: *const Struct_GNUNET_GNSRECORD_Data,
        cont: GNUNET_NAMESTORE_ContinuationWithStatus,
        cont_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_NAMESTORE_QueueEntry;
    pub fn GNUNET_NAMESTORE_set_nick(
        h: *mut Struct_GNUNET_NAMESTORE_Handle,
        pkey: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        nick: *const ::std::os::raw::c_char,
        cont: GNUNET_NAMESTORE_ContinuationWithStatus,
        cont_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_NAMESTORE_QueueEntry;
    pub fn GNUNET_NAMESTORE_records_lookup(
        h: *mut Struct_GNUNET_NAMESTORE_Handle,
        pkey: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        label: *const ::std::os::raw::c_char,
        rm: GNUNET_NAMESTORE_RecordMonitor,
        rm_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_NAMESTORE_QueueEntry;
    pub fn GNUNET_NAMESTORE_zone_to_name(
        h: *mut Struct_GNUNET_NAMESTORE_Handle,
        zone: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        value_zone: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
        _proc: GNUNET_NAMESTORE_RecordMonitor,
        proc_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_NAMESTORE_QueueEntry;
    pub fn GNUNET_NAMESTORE_cancel(qe: *mut Struct_GNUNET_NAMESTORE_QueueEntry);
    pub fn GNUNET_NAMESTORE_zone_iteration_start(
        h: *mut Struct_GNUNET_NAMESTORE_Handle,
        zone: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        _proc: GNUNET_NAMESTORE_RecordMonitor,
        proc_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_NAMESTORE_ZoneIterator;
    pub fn GNUNET_NAMESTORE_zone_iterator_next(it: *mut Struct_GNUNET_NAMESTORE_ZoneIterator);
    pub fn GNUNET_NAMESTORE_zone_iteration_stop(it: *mut Struct_GNUNET_NAMESTORE_ZoneIterator);
    pub fn GNUNET_NAMESTORE_zone_monitor_start(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        zone: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        iterate_first: ::std::os::raw::c_int,
        monitor: GNUNET_NAMESTORE_RecordMonitor,
        sync_cb: GNUNET_NAMESTORE_RecordsSynchronizedCallback,
        cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_NAMESTORE_ZoneMonitor;
    pub fn GNUNET_NAMESTORE_zone_monitor_stop(zm: *mut Struct_GNUNET_NAMESTORE_ZoneMonitor);
    pub fn GNUNET_GNS_connect(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
    ) -> *mut Struct_GNUNET_GNS_Handle;
    pub fn GNUNET_GNS_disconnect(handle: *mut Struct_GNUNET_GNS_Handle);
    pub fn GNUNET_GNS_lookup(
        handle: *mut Struct_GNUNET_GNS_Handle,
        name: *const ::std::os::raw::c_char,
        zone: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
        _type: uint32_t,
        options: Enum_GNUNET_GNS_LocalOptions,
        shorten_zone_key: *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
        _proc: GNUNET_GNS_LookupResultProcessor,
        proc_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_GNS_LookupRequest;
    pub fn GNUNET_GNS_lookup_cancel(lr: *mut Struct_GNUNET_GNS_LookupRequest);
    pub fn GNUNET_IDENTITY_ego_get_private_key(
        ego: *const Struct_GNUNET_IDENTITY_Ego,
    ) -> *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_IDENTITY_ego_get_anonymous() -> *const Struct_GNUNET_IDENTITY_Ego;
    pub fn GNUNET_IDENTITY_ego_get_public_key(
        ego: *const Struct_GNUNET_IDENTITY_Ego,
        pk: *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    );
    pub fn GNUNET_IDENTITY_connect(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        cb: GNUNET_IDENTITY_Callback,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_IDENTITY_Handle;
    pub fn GNUNET_IDENTITY_get(
        id: *mut Struct_GNUNET_IDENTITY_Handle,
        service_name: *const ::std::os::raw::c_char,
        cb: GNUNET_IDENTITY_Callback,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_set(
        id: *mut Struct_GNUNET_IDENTITY_Handle,
        service_name: *const ::std::os::raw::c_char,
        ego: *mut Struct_GNUNET_IDENTITY_Ego,
        cont: GNUNET_IDENTITY_Continuation,
        cont_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_disconnect(h: *mut Struct_GNUNET_IDENTITY_Handle);
    pub fn GNUNET_IDENTITY_create(
        id: *mut Struct_GNUNET_IDENTITY_Handle,
        name: *const ::std::os::raw::c_char,
        cont: GNUNET_IDENTITY_Continuation,
        cont_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_rename(
        id: *mut Struct_GNUNET_IDENTITY_Handle,
        old_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
        cb: GNUNET_IDENTITY_Continuation,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_delete(
        id: *mut Struct_GNUNET_IDENTITY_Handle,
        name: *const ::std::os::raw::c_char,
        cb: GNUNET_IDENTITY_Continuation,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_cancel(op: *mut Struct_GNUNET_IDENTITY_Operation);
    pub fn GNUNET_IDENTITY_ego_lookup(
        cfg: *const Struct_GNUNET_CONFIGURATION_Handle,
        name: *const ::std::os::raw::c_char,
        cb: GNUNET_IDENTITY_EgoCallback,
        cb_cls: *mut ::std::os::raw::c_void,
    ) -> *mut Struct_GNUNET_IDENTITY_EgoLookup;
    pub fn GNUNET_IDENTITY_ego_lookup_cancel(el: *mut Struct_GNUNET_IDENTITY_EgoLookup);
}

pub const GNUNET_NO: ::libc::c_int = 0;
pub const GNUNET_OK: ::libc::c_int = 1;
pub const GNUNET_MESSAGE_TYPE_HELLO: u16 = 17;
pub const GNUNET_MESSAGE_TYPE_PEERINFO_GET: u16 = 330;
pub const GNUNET_MESSAGE_TYPE_PEERINFO_GET_ALL: u16 = 331;
pub const GNUNET_MESSAGE_TYPE_PEERINFO_INFO: u16 = 332;
pub const GNUNET_MESSAGE_TYPE_PEERINFO_INFO_END: u16 = 333;
pub const GNUNET_MESSAGE_TYPE_GNS_LOOKUP: u16 = 500;
pub const GNUNET_MESSAGE_TYPE_GNS_LOOKUP_RESULT: u16 = 501;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_START: u16 = 624;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_RESULT_CODE: u16 = 625;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_UPDATE: u16 = 626;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_GET_DEFAULT: u16 = 627;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_SET_DEFAULT: u16 = 628;
pub const GNUNET_MESSAGE_TYPE_CADET_LOCAL_CONNECT: u16 = 272;
pub const GNUNET_MESSAGE_TYPE_CADET_LOCAL_CHANNEL_CREATE: u16 = 273;
pub const GNUNET_MESSAGE_TYPE_TRANSPORT_START: u16 = 360;
pub const GNUNET_DNSPARSER_MAX_NAME_LENGTH: u16 = 253;

unsafe impl Send for Struct_GNUNET_GNSRECORD_Data {}
